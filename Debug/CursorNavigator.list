
CursorNavigator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000108ac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002084  08010a4c  08010a4c  00020a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00000526  08012ad0  08012ad0  00022ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000020  08012ff8  08012ff8  00022ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 0000004c  08013018  08013018  00023018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  08013064  08013064  00030888  2**0
                  CONTENTS
  7 .ARM          00000008  08013064  08013064  00023064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  0801306c  0801306c  00030888  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  0801306c  0801306c  0002306c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  08013080  08013080  00023080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000088  20000000  08013088  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 TouchGFX_Framebuffer 00000800  20000088  08013110  00030088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          00000b78  20000888  08013910  00030888  2**2
                  ALLOC
 14 ._user_heap_stack 00000600  20001400  08013910  00031400  2**0
                  ALLOC
 15 .ARM.attributes 00000030  00000000  00000000  00030888  2**0
                  CONTENTS, READONLY
 16 .debug_info   0007f598  00000000  00000000  000308b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000fad6  00000000  00000000  000afe50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00002860  00000000  00000000  000bf928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 000024e8  00000000  00000000  000c2188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0001f01b  00000000  00000000  000c4670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0002d950  00000000  00000000  000e368b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000a740b  00000000  00000000  00110fdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000cf  00000000  00000000  001b83e6  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000b210  00000000  00000000  001b84b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000888 	.word	0x20000888
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010a34 	.word	0x08010a34

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000088c 	.word	0x2000088c
 80001dc:	08010a34 	.word	0x08010a34

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f000 ff3e 	bl	8001408 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f868 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 f990 	bl	80008b4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000594:	f000 f8e0 	bl	8000758 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000598:	f000 f962 	bl	8000860 <MX_USART1_UART_Init>
  MX_CRC_Init();
 800059c:	f000 f8c8 	bl	8000730 <MX_CRC_Init>
  MX_TIM3_Init();
 80005a0:	f000 f910 	bl	80007c4 <MX_TIM3_Init>
  MX_TouchGFX_Init();
 80005a4:	f003 fd8a 	bl	80040bc <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 80005a8:	f000 fa80 	bl	8000aac <ssd1306_Init>
  ssd1306_Fill(Black);
 80005ac:	2000      	movs	r0, #0
 80005ae:	f000 fae7 	bl	8000b80 <ssd1306_Fill>
  ssd1306_SetCursor(2,2);
 80005b2:	2102      	movs	r1, #2
 80005b4:	2002      	movs	r0, #2
 80005b6:	f000 fc31 	bl	8000e1c <ssd1306_SetCursor>
    ssd1306_WriteString("GPIO Initialized!", Font_6x8, White);
 80005ba:	4a23      	ldr	r2, [pc, #140]	; (8000648 <main+0xc4>)
 80005bc:	2301      	movs	r3, #1
 80005be:	ca06      	ldmia	r2, {r1, r2}
 80005c0:	4822      	ldr	r0, [pc, #136]	; (800064c <main+0xc8>)
 80005c2:	f000 fc05 	bl	8000dd0 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 80005c6:	f000 faff 	bl	8000bc8 <ssd1306_UpdateScreen>
    HAL_Delay(500);
 80005ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005ce:	f000 ff8d 	bl	80014ec <HAL_Delay>
  ssd1306_SetCursor(2,11);
 80005d2:	210b      	movs	r1, #11
 80005d4:	2002      	movs	r0, #2
 80005d6:	f000 fc21 	bl	8000e1c <ssd1306_SetCursor>
  ssd1306_WriteString("Display Started!", Font_6x8, White);
 80005da:	4a1b      	ldr	r2, [pc, #108]	; (8000648 <main+0xc4>)
 80005dc:	2301      	movs	r3, #1
 80005de:	ca06      	ldmia	r2, {r1, r2}
 80005e0:	481b      	ldr	r0, [pc, #108]	; (8000650 <main+0xcc>)
 80005e2:	f000 fbf5 	bl	8000dd0 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 80005e6:	f000 faef 	bl	8000bc8 <ssd1306_UpdateScreen>
  HAL_Delay(500);
 80005ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005ee:	f000 ff7d 	bl	80014ec <HAL_Delay>
  ssd1306_SetCursor(2,20);
 80005f2:	2114      	movs	r1, #20
 80005f4:	2002      	movs	r0, #2
 80005f6:	f000 fc11 	bl	8000e1c <ssd1306_SetCursor>
  ssd1306_WriteString("Initializing TouchGFX", Font_6x8, White);
 80005fa:	4a13      	ldr	r2, [pc, #76]	; (8000648 <main+0xc4>)
 80005fc:	2301      	movs	r3, #1
 80005fe:	ca06      	ldmia	r2, {r1, r2}
 8000600:	4814      	ldr	r0, [pc, #80]	; (8000654 <main+0xd0>)
 8000602:	f000 fbe5 	bl	8000dd0 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8000606:	f000 fadf 	bl	8000bc8 <ssd1306_UpdateScreen>
  HAL_Delay(500);
 800060a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800060e:	f000 ff6d 	bl	80014ec <HAL_Delay>
  ssd1306_SetCursor(2,29);
 8000612:	211d      	movs	r1, #29
 8000614:	2002      	movs	r0, #2
 8000616:	f000 fc01 	bl	8000e1c <ssd1306_SetCursor>
  ssd1306_WriteString("TouchGFX Ready!", Font_6x8, White);
 800061a:	4a0b      	ldr	r2, [pc, #44]	; (8000648 <main+0xc4>)
 800061c:	2301      	movs	r3, #1
 800061e:	ca06      	ldmia	r2, {r1, r2}
 8000620:	480d      	ldr	r0, [pc, #52]	; (8000658 <main+0xd4>)
 8000622:	f000 fbd5 	bl	8000dd0 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8000626:	f000 facf 	bl	8000bc8 <ssd1306_UpdateScreen>
  HAL_Delay(2000);//For now, its a dalay, but no touchGFX code starts running until the next line.
 800062a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800062e:	f000 ff5d 	bl	80014ec <HAL_Delay>


  if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)//Here is where hall is started
 8000632:	480a      	ldr	r0, [pc, #40]	; (800065c <main+0xd8>)
 8000634:	f002 fa2e 	bl	8002a94 <HAL_TIM_Base_Start_IT>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <main+0xbe>
   {
     /* Starting Error */
     Error_Handler();
 800063e:	f000 f9cb 	bl	80009d8 <Error_Handler>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_TouchGFX_Process();
 8000642:	f003 fd43 	bl	80040cc <MX_TouchGFX_Process>
 8000646:	e7fc      	b.n	8000642 <main+0xbe>
 8000648:	20000000 	.word	0x20000000
 800064c:	08010a4c 	.word	0x08010a4c
 8000650:	08010a60 	.word	0x08010a60
 8000654:	08010a74 	.word	0x08010a74
 8000658:	08010a8c 	.word	0x08010a8c
 800065c:	20000904 	.word	0x20000904

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b094      	sub	sp, #80	; 0x50
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0320 	add.w	r3, r7, #32
 800066a:	2230      	movs	r2, #48	; 0x30
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f00f f9bc 	bl	800f9ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	4b27      	ldr	r3, [pc, #156]	; (8000728 <SystemClock_Config+0xc8>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	4a26      	ldr	r2, [pc, #152]	; (8000728 <SystemClock_Config+0xc8>)
 800068e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000692:	6413      	str	r3, [r2, #64]	; 0x40
 8000694:	4b24      	ldr	r3, [pc, #144]	; (8000728 <SystemClock_Config+0xc8>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	4b21      	ldr	r3, [pc, #132]	; (800072c <SystemClock_Config+0xcc>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a20      	ldr	r2, [pc, #128]	; (800072c <SystemClock_Config+0xcc>)
 80006aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	4b1e      	ldr	r3, [pc, #120]	; (800072c <SystemClock_Config+0xcc>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006bc:	2302      	movs	r3, #2
 80006be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c0:	2301      	movs	r3, #1
 80006c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c4:	2310      	movs	r3, #16
 80006c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c8:	2302      	movs	r3, #2
 80006ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006cc:	2300      	movs	r3, #0
 80006ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006d0:	2310      	movs	r3, #16
 80006d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 80006d4:	23c8      	movs	r3, #200	; 0xc8
 80006d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d8:	2302      	movs	r3, #2
 80006da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006dc:	2304      	movs	r3, #4
 80006de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e0:	f107 0320 	add.w	r3, r7, #32
 80006e4:	4618      	mov	r0, r3
 80006e6:	f001 fa9d 	bl	8001c24 <HAL_RCC_OscConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006f0:	f000 f972 	bl	80009d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f4:	230f      	movs	r3, #15
 80006f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f8:	2302      	movs	r3, #2
 80006fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000704:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800070a:	f107 030c 	add.w	r3, r7, #12
 800070e:	2103      	movs	r1, #3
 8000710:	4618      	mov	r0, r3
 8000712:	f001 fcff 	bl	8002114 <HAL_RCC_ClockConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800071c:	f000 f95c 	bl	80009d8 <Error_Handler>
  }
}
 8000720:	bf00      	nop
 8000722:	3750      	adds	r7, #80	; 0x50
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40023800 	.word	0x40023800
 800072c:	40007000 	.word	0x40007000

08000730 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_CRC_Init+0x20>)
 8000736:	4a07      	ldr	r2, [pc, #28]	; (8000754 <MX_CRC_Init+0x24>)
 8000738:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_CRC_Init+0x20>)
 800073c:	f001 f80b 	bl	8001756 <HAL_CRC_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000746:	f000 f947 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	200008a4 	.word	0x200008a4
 8000754:	40023000 	.word	0x40023000

08000758 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800075c:	4b17      	ldr	r3, [pc, #92]	; (80007bc <MX_SPI1_Init+0x64>)
 800075e:	4a18      	ldr	r2, [pc, #96]	; (80007c0 <MX_SPI1_Init+0x68>)
 8000760:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000762:	4b16      	ldr	r3, [pc, #88]	; (80007bc <MX_SPI1_Init+0x64>)
 8000764:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000768:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800076a:	4b14      	ldr	r3, [pc, #80]	; (80007bc <MX_SPI1_Init+0x64>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <MX_SPI1_Init+0x64>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_SPI1_Init+0x64>)
 8000778:	2202      	movs	r2, #2
 800077a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800077c:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <MX_SPI1_Init+0x64>)
 800077e:	2200      	movs	r2, #0
 8000780:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <MX_SPI1_Init+0x64>)
 8000784:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000788:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800078a:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MX_SPI1_Init+0x64>)
 800078c:	2200      	movs	r2, #0
 800078e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000790:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <MX_SPI1_Init+0x64>)
 8000792:	2200      	movs	r2, #0
 8000794:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_SPI1_Init+0x64>)
 8000798:	2200      	movs	r2, #0
 800079a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800079c:	4b07      	ldr	r3, [pc, #28]	; (80007bc <MX_SPI1_Init+0x64>)
 800079e:	2200      	movs	r2, #0
 80007a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <MX_SPI1_Init+0x64>)
 80007a4:	220a      	movs	r2, #10
 80007a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007a8:	4804      	ldr	r0, [pc, #16]	; (80007bc <MX_SPI1_Init+0x64>)
 80007aa:	f001 fe93 	bl	80024d4 <HAL_SPI_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007b4:	f000 f910 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	200008ac 	.word	0x200008ac
 80007c0:	40013000 	.word	0x40013000

080007c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ca:	f107 0308 	add.w	r3, r7, #8
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d8:	463b      	mov	r3, r7
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007e0:	4b1d      	ldr	r3, [pc, #116]	; (8000858 <MX_TIM3_Init+0x94>)
 80007e2:	4a1e      	ldr	r2, [pc, #120]	; (800085c <MX_TIM3_Init+0x98>)
 80007e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000;
 80007e6:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <MX_TIM3_Init+0x94>)
 80007e8:	f242 7210 	movw	r2, #10000	; 0x2710
 80007ec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ee:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <MX_TIM3_Init+0x94>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 167;
 80007f4:	4b18      	ldr	r3, [pc, #96]	; (8000858 <MX_TIM3_Init+0x94>)
 80007f6:	22a7      	movs	r2, #167	; 0xa7
 80007f8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007fa:	4b17      	ldr	r3, [pc, #92]	; (8000858 <MX_TIM3_Init+0x94>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000800:	4b15      	ldr	r3, [pc, #84]	; (8000858 <MX_TIM3_Init+0x94>)
 8000802:	2200      	movs	r2, #0
 8000804:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000806:	4814      	ldr	r0, [pc, #80]	; (8000858 <MX_TIM3_Init+0x94>)
 8000808:	f002 f8f4 	bl	80029f4 <HAL_TIM_Base_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000812:	f000 f8e1 	bl	80009d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000816:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800081a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800081c:	f107 0308 	add.w	r3, r7, #8
 8000820:	4619      	mov	r1, r3
 8000822:	480d      	ldr	r0, [pc, #52]	; (8000858 <MX_TIM3_Init+0x94>)
 8000824:	f002 faa0 	bl	8002d68 <HAL_TIM_ConfigClockSource>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800082e:	f000 f8d3 	bl	80009d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000832:	2300      	movs	r3, #0
 8000834:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800083a:	463b      	mov	r3, r7
 800083c:	4619      	mov	r1, r3
 800083e:	4806      	ldr	r0, [pc, #24]	; (8000858 <MX_TIM3_Init+0x94>)
 8000840:	f002 fca6 	bl	8003190 <HAL_TIMEx_MasterConfigSynchronization>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800084a:	f000 f8c5 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	3718      	adds	r7, #24
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000904 	.word	0x20000904
 800085c:	40000400 	.word	0x40000400

08000860 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000864:	4b11      	ldr	r3, [pc, #68]	; (80008ac <MX_USART1_UART_Init+0x4c>)
 8000866:	4a12      	ldr	r2, [pc, #72]	; (80008b0 <MX_USART1_UART_Init+0x50>)
 8000868:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800086a:	4b10      	ldr	r3, [pc, #64]	; (80008ac <MX_USART1_UART_Init+0x4c>)
 800086c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000870:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000872:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <MX_USART1_UART_Init+0x4c>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000878:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <MX_USART1_UART_Init+0x4c>)
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800087e:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <MX_USART1_UART_Init+0x4c>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000884:	4b09      	ldr	r3, [pc, #36]	; (80008ac <MX_USART1_UART_Init+0x4c>)
 8000886:	220c      	movs	r2, #12
 8000888:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088a:	4b08      	ldr	r3, [pc, #32]	; (80008ac <MX_USART1_UART_Init+0x4c>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <MX_USART1_UART_Init+0x4c>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000896:	4805      	ldr	r0, [pc, #20]	; (80008ac <MX_USART1_UART_Init+0x4c>)
 8000898:	f002 fcfc 	bl	8003294 <HAL_UART_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008a2:	f000 f899 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	2000094c 	.word	0x2000094c
 80008b0:	40011000 	.word	0x40011000

080008b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08a      	sub	sp, #40	; 0x28
 80008b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
 80008c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
 80008ce:	4b3e      	ldr	r3, [pc, #248]	; (80009c8 <MX_GPIO_Init+0x114>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a3d      	ldr	r2, [pc, #244]	; (80009c8 <MX_GPIO_Init+0x114>)
 80008d4:	f043 0304 	orr.w	r3, r3, #4
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b3b      	ldr	r3, [pc, #236]	; (80009c8 <MX_GPIO_Init+0x114>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0304 	and.w	r3, r3, #4
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	4b37      	ldr	r3, [pc, #220]	; (80009c8 <MX_GPIO_Init+0x114>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a36      	ldr	r2, [pc, #216]	; (80009c8 <MX_GPIO_Init+0x114>)
 80008f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b34      	ldr	r3, [pc, #208]	; (80009c8 <MX_GPIO_Init+0x114>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	4b30      	ldr	r3, [pc, #192]	; (80009c8 <MX_GPIO_Init+0x114>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a2f      	ldr	r2, [pc, #188]	; (80009c8 <MX_GPIO_Init+0x114>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b2d      	ldr	r3, [pc, #180]	; (80009c8 <MX_GPIO_Init+0x114>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	4b29      	ldr	r3, [pc, #164]	; (80009c8 <MX_GPIO_Init+0x114>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a28      	ldr	r2, [pc, #160]	; (80009c8 <MX_GPIO_Init+0x114>)
 8000928:	f043 0302 	orr.w	r3, r3, #2
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b26      	ldr	r3, [pc, #152]	; (80009c8 <MX_GPIO_Init+0x114>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0302 	and.w	r3, r3, #2
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000940:	4822      	ldr	r0, [pc, #136]	; (80009cc <MX_GPIO_Init+0x118>)
 8000942:	f001 f93b 	bl	8001bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OLED_Res_Pin|OLED_DC_Pin|OLED_CS_Pin, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	2107      	movs	r1, #7
 800094a:	4821      	ldr	r0, [pc, #132]	; (80009d0 <MX_GPIO_Init+0x11c>)
 800094c:	f001 f936 	bl	8001bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000950:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000954:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000956:	2301      	movs	r3, #1
 8000958:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	2300      	movs	r3, #0
 8000960:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000962:	f107 0314 	add.w	r3, r7, #20
 8000966:	4619      	mov	r1, r3
 8000968:	4818      	ldr	r0, [pc, #96]	; (80009cc <MX_GPIO_Init+0x118>)
 800096a:	f000 ffa3 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 800096e:	2301      	movs	r3, #1
 8000970:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000972:	2300      	movs	r3, #0
 8000974:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000976:	2301      	movs	r3, #1
 8000978:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	4619      	mov	r1, r3
 8000980:	4814      	ldr	r0, [pc, #80]	; (80009d4 <MX_GPIO_Init+0x120>)
 8000982:	f000 ff97 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_Res_Pin OLED_DC_Pin OLED_CS_Pin */
  GPIO_InitStruct.Pin = OLED_Res_Pin|OLED_DC_Pin|OLED_CS_Pin;
 8000986:	2307      	movs	r3, #7
 8000988:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098a:	2301      	movs	r3, #1
 800098c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	4619      	mov	r1, r3
 800099c:	480c      	ldr	r0, [pc, #48]	; (80009d0 <MX_GPIO_Init+0x11c>)
 800099e:	f000 ff89 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Ecoder1_SW_Pin Encode1_DT_Pin Encoder1_CLK_Pin Encoder2_SW_Pin
                           Encoder2_DT_Pin Encoder2_CLK_Pin */
  GPIO_InitStruct.Pin = Ecoder1_SW_Pin|Encode1_DT_Pin|Encoder1_CLK_Pin|Encoder2_SW_Pin
 80009a2:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 80009a6:	617b      	str	r3, [r7, #20]
                          |Encoder2_DT_Pin|Encoder2_CLK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009a8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	4619      	mov	r1, r3
 80009b8:	4805      	ldr	r0, [pc, #20]	; (80009d0 <MX_GPIO_Init+0x11c>)
 80009ba:	f000 ff7b 	bl	80018b4 <HAL_GPIO_Init>

}
 80009be:	bf00      	nop
 80009c0:	3728      	adds	r7, #40	; 0x28
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40020800 	.word	0x40020800
 80009d0:	40020400 	.word	0x40020400
 80009d4:	40020000 	.word	0x40020000

080009d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009dc:	b672      	cpsid	i
}
 80009de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <Error_Handler+0x8>
	...

080009e4 <ssd1306_Reset>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
    // CS = High (not selected)
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 80009e8:	2201      	movs	r2, #1
 80009ea:	2104      	movs	r1, #4
 80009ec:	480a      	ldr	r0, [pc, #40]	; (8000a18 <ssd1306_Reset+0x34>)
 80009ee:	f001 f8e5 	bl	8001bbc <HAL_GPIO_WritePin>

    // Reset the OLED
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2101      	movs	r1, #1
 80009f6:	4808      	ldr	r0, [pc, #32]	; (8000a18 <ssd1306_Reset+0x34>)
 80009f8:	f001 f8e0 	bl	8001bbc <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80009fc:	200a      	movs	r0, #10
 80009fe:	f000 fd75 	bl	80014ec <HAL_Delay>
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 8000a02:	2201      	movs	r2, #1
 8000a04:	2101      	movs	r1, #1
 8000a06:	4804      	ldr	r0, [pc, #16]	; (8000a18 <ssd1306_Reset+0x34>)
 8000a08:	f001 f8d8 	bl	8001bbc <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000a0c:	200a      	movs	r0, #10
 8000a0e:	f000 fd6d 	bl	80014ec <HAL_Delay>
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40020400 	.word	0x40020400

08000a1c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8000a26:	2200      	movs	r2, #0
 8000a28:	2104      	movs	r1, #4
 8000a2a:	480c      	ldr	r0, [pc, #48]	; (8000a5c <ssd1306_WriteCommand+0x40>)
 8000a2c:	f001 f8c6 	bl	8001bbc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 8000a30:	2200      	movs	r2, #0
 8000a32:	2102      	movs	r1, #2
 8000a34:	4809      	ldr	r0, [pc, #36]	; (8000a5c <ssd1306_WriteCommand+0x40>)
 8000a36:	f001 f8c1 	bl	8001bbc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 8000a3a:	1df9      	adds	r1, r7, #7
 8000a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a40:	2201      	movs	r2, #1
 8000a42:	4807      	ldr	r0, [pc, #28]	; (8000a60 <ssd1306_WriteCommand+0x44>)
 8000a44:	f001 fdcf 	bl	80025e6 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8000a48:	2201      	movs	r2, #1
 8000a4a:	2104      	movs	r1, #4
 8000a4c:	4803      	ldr	r0, [pc, #12]	; (8000a5c <ssd1306_WriteCommand+0x40>)
 8000a4e:	f001 f8b5 	bl	8001bbc <HAL_GPIO_WritePin>
}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40020400 	.word	0x40020400
 8000a60:	200008ac 	.word	0x200008ac

08000a64 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2104      	movs	r1, #4
 8000a72:	480c      	ldr	r0, [pc, #48]	; (8000aa4 <ssd1306_WriteData+0x40>)
 8000a74:	f001 f8a2 	bl	8001bbc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 8000a78:	2201      	movs	r2, #1
 8000a7a:	2102      	movs	r1, #2
 8000a7c:	4809      	ldr	r0, [pc, #36]	; (8000aa4 <ssd1306_WriteData+0x40>)
 8000a7e:	f001 f89d 	bl	8001bbc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	b29a      	uxth	r2, r3
 8000a86:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	4806      	ldr	r0, [pc, #24]	; (8000aa8 <ssd1306_WriteData+0x44>)
 8000a8e:	f001 fdaa 	bl	80025e6 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8000a92:	2201      	movs	r2, #1
 8000a94:	2104      	movs	r1, #4
 8000a96:	4803      	ldr	r0, [pc, #12]	; (8000aa4 <ssd1306_WriteData+0x40>)
 8000a98:	f001 f890 	bl	8001bbc <HAL_GPIO_WritePin>
}
 8000a9c:	bf00      	nop
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40020400 	.word	0x40020400
 8000aa8:	200008ac 	.word	0x200008ac

08000aac <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000ab0:	f7ff ff98 	bl	80009e4 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000ab4:	2064      	movs	r0, #100	; 0x64
 8000ab6:	f000 fd19 	bl	80014ec <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000aba:	2000      	movs	r0, #0
 8000abc:	f000 fa34 	bl	8000f28 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000ac0:	2020      	movs	r0, #32
 8000ac2:	f7ff ffab 	bl	8000a1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	f7ff ffa8 	bl	8000a1c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000acc:	20b0      	movs	r0, #176	; 0xb0
 8000ace:	f7ff ffa5 	bl	8000a1c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000ad2:	20c8      	movs	r0, #200	; 0xc8
 8000ad4:	f7ff ffa2 	bl	8000a1c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f7ff ff9f 	bl	8000a1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000ade:	2010      	movs	r0, #16
 8000ae0:	f7ff ff9c 	bl	8000a1c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000ae4:	2040      	movs	r0, #64	; 0x40
 8000ae6:	f7ff ff99 	bl	8000a1c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000aea:	20ff      	movs	r0, #255	; 0xff
 8000aec:	f000 fa09 	bl	8000f02 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000af0:	20a1      	movs	r0, #161	; 0xa1
 8000af2:	f7ff ff93 	bl	8000a1c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000af6:	20a6      	movs	r0, #166	; 0xa6
 8000af8:	f7ff ff90 	bl	8000a1c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000afc:	20a8      	movs	r0, #168	; 0xa8
 8000afe:	f7ff ff8d 	bl	8000a1c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000b02:	203f      	movs	r0, #63	; 0x3f
 8000b04:	f7ff ff8a 	bl	8000a1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000b08:	20a4      	movs	r0, #164	; 0xa4
 8000b0a:	f7ff ff87 	bl	8000a1c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000b0e:	20d3      	movs	r0, #211	; 0xd3
 8000b10:	f7ff ff84 	bl	8000a1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000b14:	2000      	movs	r0, #0
 8000b16:	f7ff ff81 	bl	8000a1c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000b1a:	20d5      	movs	r0, #213	; 0xd5
 8000b1c:	f7ff ff7e 	bl	8000a1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000b20:	20f0      	movs	r0, #240	; 0xf0
 8000b22:	f7ff ff7b 	bl	8000a1c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000b26:	20d9      	movs	r0, #217	; 0xd9
 8000b28:	f7ff ff78 	bl	8000a1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000b2c:	2022      	movs	r0, #34	; 0x22
 8000b2e:	f7ff ff75 	bl	8000a1c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000b32:	20da      	movs	r0, #218	; 0xda
 8000b34:	f7ff ff72 	bl	8000a1c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000b38:	2012      	movs	r0, #18
 8000b3a:	f7ff ff6f 	bl	8000a1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000b3e:	20db      	movs	r0, #219	; 0xdb
 8000b40:	f7ff ff6c 	bl	8000a1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000b44:	2020      	movs	r0, #32
 8000b46:	f7ff ff69 	bl	8000a1c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000b4a:	208d      	movs	r0, #141	; 0x8d
 8000b4c:	f7ff ff66 	bl	8000a1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000b50:	2014      	movs	r0, #20
 8000b52:	f7ff ff63 	bl	8000a1c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000b56:	2001      	movs	r0, #1
 8000b58:	f000 f9e6 	bl	8000f28 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	f000 f80f 	bl	8000b80 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000b62:	f000 f831 	bl	8000bc8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000b66:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <ssd1306_Init+0xd0>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000b6c:	4b03      	ldr	r3, [pc, #12]	; (8000b7c <ssd1306_Init+0xd0>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000b72:	4b02      	ldr	r3, [pc, #8]	; (8000b7c <ssd1306_Init+0xd0>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	711a      	strb	r2, [r3, #4]
}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000d90 	.word	0x20000d90

08000b80 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	e00d      	b.n	8000bac <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d101      	bne.n	8000b9a <ssd1306_Fill+0x1a>
 8000b96:	2100      	movs	r1, #0
 8000b98:	e000      	b.n	8000b9c <ssd1306_Fill+0x1c>
 8000b9a:	21ff      	movs	r1, #255	; 0xff
 8000b9c:	4a09      	ldr	r2, [pc, #36]	; (8000bc4 <ssd1306_Fill+0x44>)
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	460a      	mov	r2, r1
 8000ba4:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bb2:	d3ed      	bcc.n	8000b90 <ssd1306_Fill+0x10>
    }
}
 8000bb4:	bf00      	nop
 8000bb6:	bf00      	nop
 8000bb8:	3714      	adds	r7, #20
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	20000990 	.word	0x20000990

08000bc8 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000bce:	2300      	movs	r3, #0
 8000bd0:	71fb      	strb	r3, [r7, #7]
 8000bd2:	e016      	b.n	8000c02 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	3b50      	subs	r3, #80	; 0x50
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff ff1e 	bl	8000a1c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000be0:	2000      	movs	r0, #0
 8000be2:	f7ff ff1b 	bl	8000a1c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000be6:	2010      	movs	r0, #16
 8000be8:	f7ff ff18 	bl	8000a1c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	01db      	lsls	r3, r3, #7
 8000bf0:	4a08      	ldr	r2, [pc, #32]	; (8000c14 <ssd1306_UpdateScreen+0x4c>)
 8000bf2:	4413      	add	r3, r2
 8000bf4:	2180      	movs	r1, #128	; 0x80
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff ff34 	bl	8000a64 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	71fb      	strb	r3, [r7, #7]
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	2b07      	cmp	r3, #7
 8000c06:	d9e5      	bls.n	8000bd4 <ssd1306_UpdateScreen+0xc>
    }
}
 8000c08:	bf00      	nop
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000990 	.word	0x20000990

08000c18 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	71fb      	strb	r3, [r7, #7]
 8000c22:	460b      	mov	r3, r1
 8000c24:	71bb      	strb	r3, [r7, #6]
 8000c26:	4613      	mov	r3, r2
 8000c28:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	db3d      	blt.n	8000cae <ssd1306_DrawPixel+0x96>
 8000c32:	79bb      	ldrb	r3, [r7, #6]
 8000c34:	2b3f      	cmp	r3, #63	; 0x3f
 8000c36:	d83a      	bhi.n	8000cae <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000c38:	797b      	ldrb	r3, [r7, #5]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d11a      	bne.n	8000c74 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000c3e:	79fa      	ldrb	r2, [r7, #7]
 8000c40:	79bb      	ldrb	r3, [r7, #6]
 8000c42:	08db      	lsrs	r3, r3, #3
 8000c44:	b2d8      	uxtb	r0, r3
 8000c46:	4603      	mov	r3, r0
 8000c48:	01db      	lsls	r3, r3, #7
 8000c4a:	4413      	add	r3, r2
 8000c4c:	4a1b      	ldr	r2, [pc, #108]	; (8000cbc <ssd1306_DrawPixel+0xa4>)
 8000c4e:	5cd3      	ldrb	r3, [r2, r3]
 8000c50:	b25a      	sxtb	r2, r3
 8000c52:	79bb      	ldrb	r3, [r7, #6]
 8000c54:	f003 0307 	and.w	r3, r3, #7
 8000c58:	2101      	movs	r1, #1
 8000c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5e:	b25b      	sxtb	r3, r3
 8000c60:	4313      	orrs	r3, r2
 8000c62:	b259      	sxtb	r1, r3
 8000c64:	79fa      	ldrb	r2, [r7, #7]
 8000c66:	4603      	mov	r3, r0
 8000c68:	01db      	lsls	r3, r3, #7
 8000c6a:	4413      	add	r3, r2
 8000c6c:	b2c9      	uxtb	r1, r1
 8000c6e:	4a13      	ldr	r2, [pc, #76]	; (8000cbc <ssd1306_DrawPixel+0xa4>)
 8000c70:	54d1      	strb	r1, [r2, r3]
 8000c72:	e01d      	b.n	8000cb0 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000c74:	79fa      	ldrb	r2, [r7, #7]
 8000c76:	79bb      	ldrb	r3, [r7, #6]
 8000c78:	08db      	lsrs	r3, r3, #3
 8000c7a:	b2d8      	uxtb	r0, r3
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	01db      	lsls	r3, r3, #7
 8000c80:	4413      	add	r3, r2
 8000c82:	4a0e      	ldr	r2, [pc, #56]	; (8000cbc <ssd1306_DrawPixel+0xa4>)
 8000c84:	5cd3      	ldrb	r3, [r2, r3]
 8000c86:	b25a      	sxtb	r2, r3
 8000c88:	79bb      	ldrb	r3, [r7, #6]
 8000c8a:	f003 0307 	and.w	r3, r3, #7
 8000c8e:	2101      	movs	r1, #1
 8000c90:	fa01 f303 	lsl.w	r3, r1, r3
 8000c94:	b25b      	sxtb	r3, r3
 8000c96:	43db      	mvns	r3, r3
 8000c98:	b25b      	sxtb	r3, r3
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	b259      	sxtb	r1, r3
 8000c9e:	79fa      	ldrb	r2, [r7, #7]
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	01db      	lsls	r3, r3, #7
 8000ca4:	4413      	add	r3, r2
 8000ca6:	b2c9      	uxtb	r1, r1
 8000ca8:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <ssd1306_DrawPixel+0xa4>)
 8000caa:	54d1      	strb	r1, [r2, r3]
 8000cac:	e000      	b.n	8000cb0 <ssd1306_DrawPixel+0x98>
        return;
 8000cae:	bf00      	nop
    }
}
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	20000990 	.word	0x20000990

08000cc0 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000cc0:	b590      	push	{r4, r7, lr}
 8000cc2:	b089      	sub	sp, #36	; 0x24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4604      	mov	r4, r0
 8000cc8:	1d38      	adds	r0, r7, #4
 8000cca:	e880 0006 	stmia.w	r0, {r1, r2}
 8000cce:	461a      	mov	r2, r3
 8000cd0:	4623      	mov	r3, r4
 8000cd2:	73fb      	strb	r3, [r7, #15]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000cd8:	7bfb      	ldrb	r3, [r7, #15]
 8000cda:	2b1f      	cmp	r3, #31
 8000cdc:	d902      	bls.n	8000ce4 <ssd1306_WriteChar+0x24>
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
 8000ce0:	2b7e      	cmp	r3, #126	; 0x7e
 8000ce2:	d901      	bls.n	8000ce8 <ssd1306_WriteChar+0x28>
        return 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	e06d      	b.n	8000dc4 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000ce8:	4b38      	ldr	r3, [pc, #224]	; (8000dcc <ssd1306_WriteChar+0x10c>)
 8000cea:	881b      	ldrh	r3, [r3, #0]
 8000cec:	461a      	mov	r2, r3
 8000cee:	793b      	ldrb	r3, [r7, #4]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	2b80      	cmp	r3, #128	; 0x80
 8000cf4:	dc06      	bgt.n	8000d04 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8000cf6:	4b35      	ldr	r3, [pc, #212]	; (8000dcc <ssd1306_WriteChar+0x10c>)
 8000cf8:	885b      	ldrh	r3, [r3, #2]
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	797b      	ldrb	r3, [r7, #5]
 8000cfe:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000d00:	2b40      	cmp	r3, #64	; 0x40
 8000d02:	dd01      	ble.n	8000d08 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	e05d      	b.n	8000dc4 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61fb      	str	r3, [r7, #28]
 8000d0c:	e04c      	b.n	8000da8 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000d0e:	68ba      	ldr	r2, [r7, #8]
 8000d10:	7bfb      	ldrb	r3, [r7, #15]
 8000d12:	3b20      	subs	r3, #32
 8000d14:	7979      	ldrb	r1, [r7, #5]
 8000d16:	fb01 f303 	mul.w	r3, r1, r3
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	440b      	add	r3, r1
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	4413      	add	r3, r2
 8000d24:	881b      	ldrh	r3, [r3, #0]
 8000d26:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8000d28:	2300      	movs	r3, #0
 8000d2a:	61bb      	str	r3, [r7, #24]
 8000d2c:	e034      	b.n	8000d98 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8000d2e:	697a      	ldr	r2, [r7, #20]
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d012      	beq.n	8000d64 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000d3e:	4b23      	ldr	r3, [pc, #140]	; (8000dcc <ssd1306_WriteChar+0x10c>)
 8000d40:	881b      	ldrh	r3, [r3, #0]
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	4413      	add	r3, r2
 8000d4a:	b2d8      	uxtb	r0, r3
 8000d4c:	4b1f      	ldr	r3, [pc, #124]	; (8000dcc <ssd1306_WriteChar+0x10c>)
 8000d4e:	885b      	ldrh	r3, [r3, #2]
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	4413      	add	r3, r2
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	7bba      	ldrb	r2, [r7, #14]
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f7ff ff5b 	bl	8000c18 <ssd1306_DrawPixel>
 8000d62:	e016      	b.n	8000d92 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000d64:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <ssd1306_WriteChar+0x10c>)
 8000d66:	881b      	ldrh	r3, [r3, #0]
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	69bb      	ldr	r3, [r7, #24]
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	4413      	add	r3, r2
 8000d70:	b2d8      	uxtb	r0, r3
 8000d72:	4b16      	ldr	r3, [pc, #88]	; (8000dcc <ssd1306_WriteChar+0x10c>)
 8000d74:	885b      	ldrh	r3, [r3, #2]
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	4413      	add	r3, r2
 8000d7e:	b2d9      	uxtb	r1, r3
 8000d80:	7bbb      	ldrb	r3, [r7, #14]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	bf0c      	ite	eq
 8000d86:	2301      	moveq	r3, #1
 8000d88:	2300      	movne	r3, #0
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	f7ff ff43 	bl	8000c18 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	3301      	adds	r3, #1
 8000d96:	61bb      	str	r3, [r7, #24]
 8000d98:	793b      	ldrb	r3, [r7, #4]
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d3c5      	bcc.n	8000d2e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	3301      	adds	r3, #1
 8000da6:	61fb      	str	r3, [r7, #28]
 8000da8:	797b      	ldrb	r3, [r7, #5]
 8000daa:	461a      	mov	r2, r3
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d3ad      	bcc.n	8000d0e <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <ssd1306_WriteChar+0x10c>)
 8000db4:	881a      	ldrh	r2, [r3, #0]
 8000db6:	793b      	ldrb	r3, [r7, #4]
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	4413      	add	r3, r2
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	4b03      	ldr	r3, [pc, #12]	; (8000dcc <ssd1306_WriteChar+0x10c>)
 8000dc0:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3724      	adds	r7, #36	; 0x24
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd90      	pop	{r4, r7, pc}
 8000dcc:	20000d90 	.word	0x20000d90

08000dd0 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	1d38      	adds	r0, r7, #4
 8000dda:	e880 0006 	stmia.w	r0, {r1, r2}
 8000dde:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8000de0:	e012      	b.n	8000e08 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	7818      	ldrb	r0, [r3, #0]
 8000de6:	78fb      	ldrb	r3, [r7, #3]
 8000de8:	1d3a      	adds	r2, r7, #4
 8000dea:	ca06      	ldmia	r2, {r1, r2}
 8000dec:	f7ff ff68 	bl	8000cc0 <ssd1306_WriteChar>
 8000df0:	4603      	mov	r3, r0
 8000df2:	461a      	mov	r2, r3
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d002      	beq.n	8000e02 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	e008      	b.n	8000e14 <ssd1306_WriteString+0x44>
        }
        str++;
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	3301      	adds	r3, #1
 8000e06:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d1e8      	bne.n	8000de2 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	781b      	ldrb	r3, [r3, #0]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	460a      	mov	r2, r1
 8000e26:	71fb      	strb	r3, [r7, #7]
 8000e28:	4613      	mov	r3, r2
 8000e2a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <ssd1306_SetCursor+0x2c>)
 8000e32:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000e34:	79bb      	ldrb	r3, [r7, #6]
 8000e36:	b29a      	uxth	r2, r3
 8000e38:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <ssd1306_SetCursor+0x2c>)
 8000e3a:	805a      	strh	r2, [r3, #2]
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	20000d90 	.word	0x20000d90

08000e4c <ssd1306_DrawBitmap>:
    }
    return;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	603a      	str	r2, [r7, #0]
 8000e54:	461a      	mov	r2, r3
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	71bb      	strb	r3, [r7, #6]
 8000e5e:	4613      	mov	r3, r2
 8000e60:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000e62:	797b      	ldrb	r3, [r7, #5]
 8000e64:	3307      	adds	r3, #7
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	da00      	bge.n	8000e6c <ssd1306_DrawBitmap+0x20>
 8000e6a:	3307      	adds	r3, #7
 8000e6c:	10db      	asrs	r3, r3, #3
 8000e6e:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	db3e      	blt.n	8000efa <ssd1306_DrawBitmap+0xae>
 8000e7c:	79bb      	ldrb	r3, [r7, #6]
 8000e7e:	2b3f      	cmp	r3, #63	; 0x3f
 8000e80:	d83b      	bhi.n	8000efa <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8000e82:	2300      	movs	r3, #0
 8000e84:	73bb      	strb	r3, [r7, #14]
 8000e86:	e033      	b.n	8000ef0 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8000e88:	2300      	movs	r3, #0
 8000e8a:	737b      	strb	r3, [r7, #13]
 8000e8c:	e026      	b.n	8000edc <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8000e8e:	7b7b      	ldrb	r3, [r7, #13]
 8000e90:	f003 0307 	and.w	r3, r3, #7
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d003      	beq.n	8000ea0 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8000e98:	7bfb      	ldrb	r3, [r7, #15]
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	73fb      	strb	r3, [r7, #15]
 8000e9e:	e00d      	b.n	8000ebc <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000ea0:	7bbb      	ldrb	r3, [r7, #14]
 8000ea2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000ea6:	fb02 f303 	mul.w	r3, r2, r3
 8000eaa:	7b7a      	ldrb	r2, [r7, #13]
 8000eac:	08d2      	lsrs	r2, r2, #3
 8000eae:	b2d2      	uxtb	r2, r2
 8000eb0:	4413      	add	r3, r2
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8000ebc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	da08      	bge.n	8000ed6 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8000ec4:	79fa      	ldrb	r2, [r7, #7]
 8000ec6:	7b7b      	ldrb	r3, [r7, #13]
 8000ec8:	4413      	add	r3, r2
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	7f3a      	ldrb	r2, [r7, #28]
 8000ece:	79b9      	ldrb	r1, [r7, #6]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff fea1 	bl	8000c18 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8000ed6:	7b7b      	ldrb	r3, [r7, #13]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	737b      	strb	r3, [r7, #13]
 8000edc:	7b7a      	ldrb	r2, [r7, #13]
 8000ede:	797b      	ldrb	r3, [r7, #5]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d3d4      	bcc.n	8000e8e <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8000ee4:	7bbb      	ldrb	r3, [r7, #14]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	73bb      	strb	r3, [r7, #14]
 8000eea:	79bb      	ldrb	r3, [r7, #6]
 8000eec:	3301      	adds	r3, #1
 8000eee:	71bb      	strb	r3, [r7, #6]
 8000ef0:	7bba      	ldrb	r2, [r7, #14]
 8000ef2:	7e3b      	ldrb	r3, [r7, #24]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d3c7      	bcc.n	8000e88 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8000ef8:	e000      	b.n	8000efc <ssd1306_DrawBitmap+0xb0>
        return;
 8000efa:	bf00      	nop
}
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b084      	sub	sp, #16
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	4603      	mov	r3, r0
 8000f0a:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000f0c:	2381      	movs	r3, #129	; 0x81
 8000f0e:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fd82 	bl	8000a1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff fd7e 	bl	8000a1c <ssd1306_WriteCommand>
}
 8000f20:	bf00      	nop
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d005      	beq.n	8000f44 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000f38:	23af      	movs	r3, #175	; 0xaf
 8000f3a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000f3c:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <ssd1306_SetDisplayOn+0x38>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	715a      	strb	r2, [r3, #5]
 8000f42:	e004      	b.n	8000f4e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000f44:	23ae      	movs	r3, #174	; 0xae
 8000f46:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000f48:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <ssd1306_SetDisplayOn+0x38>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff fd63 	bl	8000a1c <ssd1306_WriteCommand>
}
 8000f56:	bf00      	nop
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000d90 	.word	0x20000d90

08000f64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	607b      	str	r3, [r7, #4]
 8000f6e:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <HAL_MspInit+0x4c>)
 8000f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f72:	4a0f      	ldr	r2, [pc, #60]	; (8000fb0 <HAL_MspInit+0x4c>)
 8000f74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f78:	6453      	str	r3, [r2, #68]	; 0x44
 8000f7a:	4b0d      	ldr	r3, [pc, #52]	; (8000fb0 <HAL_MspInit+0x4c>)
 8000f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	603b      	str	r3, [r7, #0]
 8000f8a:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <HAL_MspInit+0x4c>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	4a08      	ldr	r2, [pc, #32]	; (8000fb0 <HAL_MspInit+0x4c>)
 8000f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f94:	6413      	str	r3, [r2, #64]	; 0x40
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_MspInit+0x4c>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9e:	603b      	str	r3, [r7, #0]
 8000fa0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	40023800 	.word	0x40023800

08000fb4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a0b      	ldr	r2, [pc, #44]	; (8000ff0 <HAL_CRC_MspInit+0x3c>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d10d      	bne.n	8000fe2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <HAL_CRC_MspInit+0x40>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a09      	ldr	r2, [pc, #36]	; (8000ff4 <HAL_CRC_MspInit+0x40>)
 8000fd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <HAL_CRC_MspInit+0x40>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000fe2:	bf00      	nop
 8000fe4:	3714      	adds	r7, #20
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	40023000 	.word	0x40023000
 8000ff4:	40023800 	.word	0x40023800

08000ff8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a19      	ldr	r2, [pc, #100]	; (800107c <HAL_SPI_MspInit+0x84>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d12b      	bne.n	8001072 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	4b18      	ldr	r3, [pc, #96]	; (8001080 <HAL_SPI_MspInit+0x88>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001022:	4a17      	ldr	r2, [pc, #92]	; (8001080 <HAL_SPI_MspInit+0x88>)
 8001024:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001028:	6453      	str	r3, [r2, #68]	; 0x44
 800102a:	4b15      	ldr	r3, [pc, #84]	; (8001080 <HAL_SPI_MspInit+0x88>)
 800102c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	4b11      	ldr	r3, [pc, #68]	; (8001080 <HAL_SPI_MspInit+0x88>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a10      	ldr	r2, [pc, #64]	; (8001080 <HAL_SPI_MspInit+0x88>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
 8001046:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <HAL_SPI_MspInit+0x88>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001052:	23a0      	movs	r3, #160	; 0xa0
 8001054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001056:	2302      	movs	r3, #2
 8001058:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800105a:	2301      	movs	r3, #1
 800105c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105e:	2303      	movs	r3, #3
 8001060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001062:	2305      	movs	r3, #5
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	4619      	mov	r1, r3
 800106c:	4805      	ldr	r0, [pc, #20]	; (8001084 <HAL_SPI_MspInit+0x8c>)
 800106e:	f000 fc21 	bl	80018b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001072:	bf00      	nop
 8001074:	3728      	adds	r7, #40	; 0x28
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40013000 	.word	0x40013000
 8001080:	40023800 	.word	0x40023800
 8001084:	40020000 	.word	0x40020000

08001088 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a0e      	ldr	r2, [pc, #56]	; (80010d0 <HAL_TIM_Base_MspInit+0x48>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d115      	bne.n	80010c6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <HAL_TIM_Base_MspInit+0x4c>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	4a0c      	ldr	r2, [pc, #48]	; (80010d4 <HAL_TIM_Base_MspInit+0x4c>)
 80010a4:	f043 0302 	orr.w	r3, r3, #2
 80010a8:	6413      	str	r3, [r2, #64]	; 0x40
 80010aa:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <HAL_TIM_Base_MspInit+0x4c>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2100      	movs	r1, #0
 80010ba:	201d      	movs	r0, #29
 80010bc:	f000 fb15 	bl	80016ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80010c0:	201d      	movs	r0, #29
 80010c2:	f000 fb2e 	bl	8001722 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40000400 	.word	0x40000400
 80010d4:	40023800 	.word	0x40023800

080010d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08a      	sub	sp, #40	; 0x28
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a1d      	ldr	r2, [pc, #116]	; (800116c <HAL_UART_MspInit+0x94>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d134      	bne.n	8001164 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
 80010fe:	4b1c      	ldr	r3, [pc, #112]	; (8001170 <HAL_UART_MspInit+0x98>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001102:	4a1b      	ldr	r2, [pc, #108]	; (8001170 <HAL_UART_MspInit+0x98>)
 8001104:	f043 0310 	orr.w	r3, r3, #16
 8001108:	6453      	str	r3, [r2, #68]	; 0x44
 800110a:	4b19      	ldr	r3, [pc, #100]	; (8001170 <HAL_UART_MspInit+0x98>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110e:	f003 0310 	and.w	r3, r3, #16
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	4b15      	ldr	r3, [pc, #84]	; (8001170 <HAL_UART_MspInit+0x98>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a14      	ldr	r2, [pc, #80]	; (8001170 <HAL_UART_MspInit+0x98>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b12      	ldr	r3, [pc, #72]	; (8001170 <HAL_UART_MspInit+0x98>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001132:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001136:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001138:	2302      	movs	r3, #2
 800113a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001140:	2303      	movs	r3, #3
 8001142:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001144:	2307      	movs	r3, #7
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	4619      	mov	r1, r3
 800114e:	4809      	ldr	r0, [pc, #36]	; (8001174 <HAL_UART_MspInit+0x9c>)
 8001150:	f000 fbb0 	bl	80018b4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001154:	2200      	movs	r2, #0
 8001156:	2100      	movs	r1, #0
 8001158:	2025      	movs	r0, #37	; 0x25
 800115a:	f000 fac6 	bl	80016ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800115e:	2025      	movs	r0, #37	; 0x25
 8001160:	f000 fadf 	bl	8001722 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001164:	bf00      	nop
 8001166:	3728      	adds	r7, #40	; 0x28
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40011000 	.word	0x40011000
 8001170:	40023800 	.word	0x40023800
 8001174:	40020000 	.word	0x40020000

08001178 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800117c:	e7fe      	b.n	800117c <NMI_Handler+0x4>

0800117e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001182:	e7fe      	b.n	8001182 <HardFault_Handler+0x4>

08001184 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001188:	e7fe      	b.n	8001188 <MemManage_Handler+0x4>

0800118a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800118e:	e7fe      	b.n	800118e <BusFault_Handler+0x4>

08001190 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001194:	e7fe      	b.n	8001194 <UsageFault_Handler+0x4>

08001196 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011c4:	f000 f972 	bl	80014ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}

080011cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  extern void touchgfxSignalVSync(void);//We declare this thing here...
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80011d0:	4805      	ldr	r0, [pc, #20]	; (80011e8 <TIM3_IRQHandler+0x1c>)
 80011d2:	f001 fcc1 	bl	8002b58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  touchgfxSignalVSync();//...in order to be called here
 80011d6:	f006 f88c 	bl	80072f2 <touchgfxSignalVSync>
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);//debug
 80011da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011de:	4803      	ldr	r0, [pc, #12]	; (80011ec <TIM3_IRQHandler+0x20>)
 80011e0:	f000 fd05 	bl	8001bee <HAL_GPIO_TogglePin>

  /* USER CODE END TIM3_IRQn 1 */
}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000904 	.word	0x20000904
 80011ec:	40020800 	.word	0x40020800

080011f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011f4:	4802      	ldr	r0, [pc, #8]	; (8001200 <USART1_IRQHandler+0x10>)
 80011f6:	f002 f89b 	bl	8003330 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	2000094c 	.word	0x2000094c

08001204 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  return 1;
 8001208:	2301      	movs	r3, #1
}
 800120a:	4618      	mov	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <_kill>:

int _kill(int pid, int sig)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800121e:	f00e fb8b 	bl	800f938 <__errno>
 8001222:	4603      	mov	r3, r0
 8001224:	2216      	movs	r2, #22
 8001226:	601a      	str	r2, [r3, #0]
  return -1;
 8001228:	f04f 33ff 	mov.w	r3, #4294967295
}
 800122c:	4618      	mov	r0, r3
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <_exit>:

void _exit (int status)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800123c:	f04f 31ff 	mov.w	r1, #4294967295
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff ffe7 	bl	8001214 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001246:	e7fe      	b.n	8001246 <_exit+0x12>

08001248 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
 8001258:	e00a      	b.n	8001270 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800125a:	f3af 8000 	nop.w
 800125e:	4601      	mov	r1, r0
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	1c5a      	adds	r2, r3, #1
 8001264:	60ba      	str	r2, [r7, #8]
 8001266:	b2ca      	uxtb	r2, r1
 8001268:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	3301      	adds	r3, #1
 800126e:	617b      	str	r3, [r7, #20]
 8001270:	697a      	ldr	r2, [r7, #20]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	429a      	cmp	r2, r3
 8001276:	dbf0      	blt.n	800125a <_read+0x12>
  }

  return len;
 8001278:	687b      	ldr	r3, [r7, #4]
}
 800127a:	4618      	mov	r0, r3
 800127c:	3718      	adds	r7, #24
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b086      	sub	sp, #24
 8001286:	af00      	add	r7, sp, #0
 8001288:	60f8      	str	r0, [r7, #12]
 800128a:	60b9      	str	r1, [r7, #8]
 800128c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800128e:	2300      	movs	r3, #0
 8001290:	617b      	str	r3, [r7, #20]
 8001292:	e009      	b.n	80012a8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	1c5a      	adds	r2, r3, #1
 8001298:	60ba      	str	r2, [r7, #8]
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	4618      	mov	r0, r3
 800129e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	3301      	adds	r3, #1
 80012a6:	617b      	str	r3, [r7, #20]
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	dbf1      	blt.n	8001294 <_write+0x12>
  }
  return len;
 80012b0:	687b      	ldr	r3, [r7, #4]
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <_close>:

int _close(int file)
{
 80012ba:	b480      	push	{r7}
 80012bc:	b083      	sub	sp, #12
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
 80012da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012e2:	605a      	str	r2, [r3, #4]
  return 0;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <_isatty>:

int _isatty(int file)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012fa:	2301      	movs	r3, #1
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3714      	adds	r7, #20
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
	...

08001324 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800132c:	4a14      	ldr	r2, [pc, #80]	; (8001380 <_sbrk+0x5c>)
 800132e:	4b15      	ldr	r3, [pc, #84]	; (8001384 <_sbrk+0x60>)
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001338:	4b13      	ldr	r3, [pc, #76]	; (8001388 <_sbrk+0x64>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d102      	bne.n	8001346 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001340:	4b11      	ldr	r3, [pc, #68]	; (8001388 <_sbrk+0x64>)
 8001342:	4a12      	ldr	r2, [pc, #72]	; (800138c <_sbrk+0x68>)
 8001344:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001346:	4b10      	ldr	r3, [pc, #64]	; (8001388 <_sbrk+0x64>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4413      	add	r3, r2
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	429a      	cmp	r2, r3
 8001352:	d207      	bcs.n	8001364 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001354:	f00e faf0 	bl	800f938 <__errno>
 8001358:	4603      	mov	r3, r0
 800135a:	220c      	movs	r2, #12
 800135c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800135e:	f04f 33ff 	mov.w	r3, #4294967295
 8001362:	e009      	b.n	8001378 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001364:	4b08      	ldr	r3, [pc, #32]	; (8001388 <_sbrk+0x64>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800136a:	4b07      	ldr	r3, [pc, #28]	; (8001388 <_sbrk+0x64>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4413      	add	r3, r2
 8001372:	4a05      	ldr	r2, [pc, #20]	; (8001388 <_sbrk+0x64>)
 8001374:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001376:	68fb      	ldr	r3, [r7, #12]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20020000 	.word	0x20020000
 8001384:	00000400 	.word	0x00000400
 8001388:	20000d98 	.word	0x20000d98
 800138c:	20001400 	.word	0x20001400

08001390 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <SystemInit+0x20>)
 8001396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800139a:	4a05      	ldr	r2, [pc, #20]	; (80013b0 <SystemInit+0x20>)
 800139c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80013b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013b8:	480d      	ldr	r0, [pc, #52]	; (80013f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013ba:	490e      	ldr	r1, [pc, #56]	; (80013f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013bc:	4a0e      	ldr	r2, [pc, #56]	; (80013f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c0:	e002      	b.n	80013c8 <LoopCopyDataInit>

080013c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013c6:	3304      	adds	r3, #4

080013c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013cc:	d3f9      	bcc.n	80013c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ce:	4a0b      	ldr	r2, [pc, #44]	; (80013fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013d0:	4c0b      	ldr	r4, [pc, #44]	; (8001400 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d4:	e001      	b.n	80013da <LoopFillZerobss>

080013d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d8:	3204      	adds	r2, #4

080013da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013dc:	d3fb      	bcc.n	80013d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013de:	f7ff ffd7 	bl	8001390 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013e2:	f00e fac1 	bl	800f968 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013e6:	f7ff f8cd 	bl	8000584 <main>
  bx  lr    
 80013ea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80013ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013f4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80013f8:	08013088 	.word	0x08013088
  ldr r2, =_sbss
 80013fc:	20000888 	.word	0x20000888
  ldr r4, =_ebss
 8001400:	20001400 	.word	0x20001400

08001404 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001404:	e7fe      	b.n	8001404 <ADC_IRQHandler>
	...

08001408 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800140c:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <HAL_Init+0x40>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a0d      	ldr	r2, [pc, #52]	; (8001448 <HAL_Init+0x40>)
 8001412:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001416:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001418:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <HAL_Init+0x40>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a0a      	ldr	r2, [pc, #40]	; (8001448 <HAL_Init+0x40>)
 800141e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001422:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001424:	4b08      	ldr	r3, [pc, #32]	; (8001448 <HAL_Init+0x40>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a07      	ldr	r2, [pc, #28]	; (8001448 <HAL_Init+0x40>)
 800142a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800142e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001430:	2003      	movs	r0, #3
 8001432:	f000 f94f 	bl	80016d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001436:	200f      	movs	r0, #15
 8001438:	f000 f808 	bl	800144c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800143c:	f7ff fd92 	bl	8000f64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40023c00 	.word	0x40023c00

0800144c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001454:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <HAL_InitTick+0x54>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <HAL_InitTick+0x58>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	4619      	mov	r1, r3
 800145e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001462:	fbb3 f3f1 	udiv	r3, r3, r1
 8001466:	fbb2 f3f3 	udiv	r3, r2, r3
 800146a:	4618      	mov	r0, r3
 800146c:	f000 f967 	bl	800173e <HAL_SYSTICK_Config>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e00e      	b.n	8001498 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2b0f      	cmp	r3, #15
 800147e:	d80a      	bhi.n	8001496 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001480:	2200      	movs	r2, #0
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	f04f 30ff 	mov.w	r0, #4294967295
 8001488:	f000 f92f 	bl	80016ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800148c:	4a06      	ldr	r2, [pc, #24]	; (80014a8 <HAL_InitTick+0x5c>)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001492:	2300      	movs	r3, #0
 8001494:	e000      	b.n	8001498 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
}
 8001498:	4618      	mov	r0, r3
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000008 	.word	0x20000008
 80014a4:	20000010 	.word	0x20000010
 80014a8:	2000000c 	.word	0x2000000c

080014ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <HAL_IncTick+0x20>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <HAL_IncTick+0x24>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4413      	add	r3, r2
 80014bc:	4a04      	ldr	r2, [pc, #16]	; (80014d0 <HAL_IncTick+0x24>)
 80014be:	6013      	str	r3, [r2, #0]
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	20000010 	.word	0x20000010
 80014d0:	20000d9c 	.word	0x20000d9c

080014d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  return uwTick;
 80014d8:	4b03      	ldr	r3, [pc, #12]	; (80014e8 <HAL_GetTick+0x14>)
 80014da:	681b      	ldr	r3, [r3, #0]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	20000d9c 	.word	0x20000d9c

080014ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014f4:	f7ff ffee 	bl	80014d4 <HAL_GetTick>
 80014f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001504:	d005      	beq.n	8001512 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001506:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <HAL_Delay+0x44>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	461a      	mov	r2, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	4413      	add	r3, r2
 8001510:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001512:	bf00      	nop
 8001514:	f7ff ffde 	bl	80014d4 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	429a      	cmp	r2, r3
 8001522:	d8f7      	bhi.n	8001514 <HAL_Delay+0x28>
  {
  }
}
 8001524:	bf00      	nop
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000010 	.word	0x20000010

08001534 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001544:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <__NVIC_SetPriorityGrouping+0x44>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800154a:	68ba      	ldr	r2, [r7, #8]
 800154c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001550:	4013      	ands	r3, r2
 8001552:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800155c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001564:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001566:	4a04      	ldr	r2, [pc, #16]	; (8001578 <__NVIC_SetPriorityGrouping+0x44>)
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	60d3      	str	r3, [r2, #12]
}
 800156c:	bf00      	nop
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001580:	4b04      	ldr	r3, [pc, #16]	; (8001594 <__NVIC_GetPriorityGrouping+0x18>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	0a1b      	lsrs	r3, r3, #8
 8001586:	f003 0307 	and.w	r3, r3, #7
}
 800158a:	4618      	mov	r0, r3
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	db0b      	blt.n	80015c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	f003 021f 	and.w	r2, r3, #31
 80015b0:	4907      	ldr	r1, [pc, #28]	; (80015d0 <__NVIC_EnableIRQ+0x38>)
 80015b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b6:	095b      	lsrs	r3, r3, #5
 80015b8:	2001      	movs	r0, #1
 80015ba:	fa00 f202 	lsl.w	r2, r0, r2
 80015be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	e000e100 	.word	0xe000e100

080015d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	6039      	str	r1, [r7, #0]
 80015de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	db0a      	blt.n	80015fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	490c      	ldr	r1, [pc, #48]	; (8001620 <__NVIC_SetPriority+0x4c>)
 80015ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f2:	0112      	lsls	r2, r2, #4
 80015f4:	b2d2      	uxtb	r2, r2
 80015f6:	440b      	add	r3, r1
 80015f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015fc:	e00a      	b.n	8001614 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	b2da      	uxtb	r2, r3
 8001602:	4908      	ldr	r1, [pc, #32]	; (8001624 <__NVIC_SetPriority+0x50>)
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	f003 030f 	and.w	r3, r3, #15
 800160a:	3b04      	subs	r3, #4
 800160c:	0112      	lsls	r2, r2, #4
 800160e:	b2d2      	uxtb	r2, r2
 8001610:	440b      	add	r3, r1
 8001612:	761a      	strb	r2, [r3, #24]
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	e000e100 	.word	0xe000e100
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001628:	b480      	push	{r7}
 800162a:	b089      	sub	sp, #36	; 0x24
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	f1c3 0307 	rsb	r3, r3, #7
 8001642:	2b04      	cmp	r3, #4
 8001644:	bf28      	it	cs
 8001646:	2304      	movcs	r3, #4
 8001648:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	3304      	adds	r3, #4
 800164e:	2b06      	cmp	r3, #6
 8001650:	d902      	bls.n	8001658 <NVIC_EncodePriority+0x30>
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	3b03      	subs	r3, #3
 8001656:	e000      	b.n	800165a <NVIC_EncodePriority+0x32>
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800165c:	f04f 32ff 	mov.w	r2, #4294967295
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43da      	mvns	r2, r3
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	401a      	ands	r2, r3
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001670:	f04f 31ff 	mov.w	r1, #4294967295
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	fa01 f303 	lsl.w	r3, r1, r3
 800167a:	43d9      	mvns	r1, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001680:	4313      	orrs	r3, r2
         );
}
 8001682:	4618      	mov	r0, r3
 8001684:	3724      	adds	r7, #36	; 0x24
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
	...

08001690 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3b01      	subs	r3, #1
 800169c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016a0:	d301      	bcc.n	80016a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016a2:	2301      	movs	r3, #1
 80016a4:	e00f      	b.n	80016c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016a6:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <SysTick_Config+0x40>)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ae:	210f      	movs	r1, #15
 80016b0:	f04f 30ff 	mov.w	r0, #4294967295
 80016b4:	f7ff ff8e 	bl	80015d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016b8:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <SysTick_Config+0x40>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016be:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <SysTick_Config+0x40>)
 80016c0:	2207      	movs	r2, #7
 80016c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	e000e010 	.word	0xe000e010

080016d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff ff29 	bl	8001534 <__NVIC_SetPriorityGrouping>
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b086      	sub	sp, #24
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	4603      	mov	r3, r0
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607a      	str	r2, [r7, #4]
 80016f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016fc:	f7ff ff3e 	bl	800157c <__NVIC_GetPriorityGrouping>
 8001700:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	68b9      	ldr	r1, [r7, #8]
 8001706:	6978      	ldr	r0, [r7, #20]
 8001708:	f7ff ff8e 	bl	8001628 <NVIC_EncodePriority>
 800170c:	4602      	mov	r2, r0
 800170e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001712:	4611      	mov	r1, r2
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ff5d 	bl	80015d4 <__NVIC_SetPriority>
}
 800171a:	bf00      	nop
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	4603      	mov	r3, r0
 800172a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800172c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff ff31 	bl	8001598 <__NVIC_EnableIRQ>
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff ffa2 	bl	8001690 <SysTick_Config>
 800174c:	4603      	mov	r3, r0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b082      	sub	sp, #8
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d101      	bne.n	8001768 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e00e      	b.n	8001786 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	795b      	ldrb	r3, [r3, #5]
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d105      	bne.n	800177e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff fc1b 	bl	8000fb4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2201      	movs	r2, #1
 8001782:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b084      	sub	sp, #16
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800179c:	f7ff fe9a 	bl	80014d4 <HAL_GetTick>
 80017a0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d008      	beq.n	80017c0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2280      	movs	r2, #128	; 0x80
 80017b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e052      	b.n	8001866 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f022 0216 	bic.w	r2, r2, #22
 80017ce:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	695a      	ldr	r2, [r3, #20]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017de:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d103      	bne.n	80017f0 <HAL_DMA_Abort+0x62>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d007      	beq.n	8001800 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f022 0208 	bic.w	r2, r2, #8
 80017fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f022 0201 	bic.w	r2, r2, #1
 800180e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001810:	e013      	b.n	800183a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001812:	f7ff fe5f 	bl	80014d4 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b05      	cmp	r3, #5
 800181e:	d90c      	bls.n	800183a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2220      	movs	r2, #32
 8001824:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2203      	movs	r2, #3
 800182a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e015      	b.n	8001866 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	2b00      	cmp	r3, #0
 8001846:	d1e4      	bne.n	8001812 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800184c:	223f      	movs	r2, #63	; 0x3f
 800184e:	409a      	lsls	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2201      	movs	r2, #1
 8001858:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800186e:	b480      	push	{r7}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d004      	beq.n	800188c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2280      	movs	r2, #128	; 0x80
 8001886:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e00c      	b.n	80018a6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2205      	movs	r2, #5
 8001890:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f022 0201 	bic.w	r2, r2, #1
 80018a2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
	...

080018b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b089      	sub	sp, #36	; 0x24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018be:	2300      	movs	r3, #0
 80018c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018c2:	2300      	movs	r3, #0
 80018c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]
 80018ce:	e159      	b.n	8001b84 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018d0:	2201      	movs	r2, #1
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	697a      	ldr	r2, [r7, #20]
 80018e0:	4013      	ands	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	f040 8148 	bne.w	8001b7e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f003 0303 	and.w	r3, r3, #3
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d005      	beq.n	8001906 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001902:	2b02      	cmp	r3, #2
 8001904:	d130      	bne.n	8001968 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	2203      	movs	r2, #3
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43db      	mvns	r3, r3
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	4013      	ands	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	68da      	ldr	r2, [r3, #12]
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4313      	orrs	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800193c:	2201      	movs	r2, #1
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	43db      	mvns	r3, r3
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4013      	ands	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	091b      	lsrs	r3, r3, #4
 8001952:	f003 0201 	and.w	r2, r3, #1
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	4313      	orrs	r3, r2
 8001960:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 0303 	and.w	r3, r3, #3
 8001970:	2b03      	cmp	r3, #3
 8001972:	d017      	beq.n	80019a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	2203      	movs	r2, #3
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	43db      	mvns	r3, r3
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4013      	ands	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	689a      	ldr	r2, [r3, #8]
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4313      	orrs	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 0303 	and.w	r3, r3, #3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d123      	bne.n	80019f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	08da      	lsrs	r2, r3, #3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3208      	adds	r2, #8
 80019b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	f003 0307 	and.w	r3, r3, #7
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	220f      	movs	r2, #15
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	43db      	mvns	r3, r3
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4013      	ands	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	691a      	ldr	r2, [r3, #16]
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	08da      	lsrs	r2, r3, #3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	3208      	adds	r2, #8
 80019f2:	69b9      	ldr	r1, [r7, #24]
 80019f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	2203      	movs	r2, #3
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f003 0203 	and.w	r2, r3, #3
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f000 80a2 	beq.w	8001b7e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	4b57      	ldr	r3, [pc, #348]	; (8001b9c <HAL_GPIO_Init+0x2e8>)
 8001a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a42:	4a56      	ldr	r2, [pc, #344]	; (8001b9c <HAL_GPIO_Init+0x2e8>)
 8001a44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a48:	6453      	str	r3, [r2, #68]	; 0x44
 8001a4a:	4b54      	ldr	r3, [pc, #336]	; (8001b9c <HAL_GPIO_Init+0x2e8>)
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a56:	4a52      	ldr	r2, [pc, #328]	; (8001ba0 <HAL_GPIO_Init+0x2ec>)
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	089b      	lsrs	r3, r3, #2
 8001a5c:	3302      	adds	r3, #2
 8001a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	f003 0303 	and.w	r3, r3, #3
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	220f      	movs	r2, #15
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43db      	mvns	r3, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4013      	ands	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a49      	ldr	r2, [pc, #292]	; (8001ba4 <HAL_GPIO_Init+0x2f0>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d019      	beq.n	8001ab6 <HAL_GPIO_Init+0x202>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a48      	ldr	r2, [pc, #288]	; (8001ba8 <HAL_GPIO_Init+0x2f4>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d013      	beq.n	8001ab2 <HAL_GPIO_Init+0x1fe>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a47      	ldr	r2, [pc, #284]	; (8001bac <HAL_GPIO_Init+0x2f8>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d00d      	beq.n	8001aae <HAL_GPIO_Init+0x1fa>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a46      	ldr	r2, [pc, #280]	; (8001bb0 <HAL_GPIO_Init+0x2fc>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d007      	beq.n	8001aaa <HAL_GPIO_Init+0x1f6>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a45      	ldr	r2, [pc, #276]	; (8001bb4 <HAL_GPIO_Init+0x300>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d101      	bne.n	8001aa6 <HAL_GPIO_Init+0x1f2>
 8001aa2:	2304      	movs	r3, #4
 8001aa4:	e008      	b.n	8001ab8 <HAL_GPIO_Init+0x204>
 8001aa6:	2307      	movs	r3, #7
 8001aa8:	e006      	b.n	8001ab8 <HAL_GPIO_Init+0x204>
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e004      	b.n	8001ab8 <HAL_GPIO_Init+0x204>
 8001aae:	2302      	movs	r3, #2
 8001ab0:	e002      	b.n	8001ab8 <HAL_GPIO_Init+0x204>
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e000      	b.n	8001ab8 <HAL_GPIO_Init+0x204>
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	69fa      	ldr	r2, [r7, #28]
 8001aba:	f002 0203 	and.w	r2, r2, #3
 8001abe:	0092      	lsls	r2, r2, #2
 8001ac0:	4093      	lsls	r3, r2
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ac8:	4935      	ldr	r1, [pc, #212]	; (8001ba0 <HAL_GPIO_Init+0x2ec>)
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	089b      	lsrs	r3, r3, #2
 8001ace:	3302      	adds	r3, #2
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ad6:	4b38      	ldr	r3, [pc, #224]	; (8001bb8 <HAL_GPIO_Init+0x304>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001afa:	4a2f      	ldr	r2, [pc, #188]	; (8001bb8 <HAL_GPIO_Init+0x304>)
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b00:	4b2d      	ldr	r3, [pc, #180]	; (8001bb8 <HAL_GPIO_Init+0x304>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d003      	beq.n	8001b24 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b24:	4a24      	ldr	r2, [pc, #144]	; (8001bb8 <HAL_GPIO_Init+0x304>)
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b2a:	4b23      	ldr	r3, [pc, #140]	; (8001bb8 <HAL_GPIO_Init+0x304>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	43db      	mvns	r3, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4013      	ands	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b4e:	4a1a      	ldr	r2, [pc, #104]	; (8001bb8 <HAL_GPIO_Init+0x304>)
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b54:	4b18      	ldr	r3, [pc, #96]	; (8001bb8 <HAL_GPIO_Init+0x304>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4013      	ands	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d003      	beq.n	8001b78 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b78:	4a0f      	ldr	r2, [pc, #60]	; (8001bb8 <HAL_GPIO_Init+0x304>)
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3301      	adds	r3, #1
 8001b82:	61fb      	str	r3, [r7, #28]
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	2b0f      	cmp	r3, #15
 8001b88:	f67f aea2 	bls.w	80018d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b8c:	bf00      	nop
 8001b8e:	bf00      	nop
 8001b90:	3724      	adds	r7, #36	; 0x24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	40013800 	.word	0x40013800
 8001ba4:	40020000 	.word	0x40020000
 8001ba8:	40020400 	.word	0x40020400
 8001bac:	40020800 	.word	0x40020800
 8001bb0:	40020c00 	.word	0x40020c00
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	40013c00 	.word	0x40013c00

08001bbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	807b      	strh	r3, [r7, #2]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bcc:	787b      	ldrb	r3, [r7, #1]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d003      	beq.n	8001bda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bd2:	887a      	ldrh	r2, [r7, #2]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bd8:	e003      	b.n	8001be2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bda:	887b      	ldrh	r3, [r7, #2]
 8001bdc:	041a      	lsls	r2, r3, #16
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	619a      	str	r2, [r3, #24]
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b085      	sub	sp, #20
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c00:	887a      	ldrh	r2, [r7, #2]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	4013      	ands	r3, r2
 8001c06:	041a      	lsls	r2, r3, #16
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	43d9      	mvns	r1, r3
 8001c0c:	887b      	ldrh	r3, [r7, #2]
 8001c0e:	400b      	ands	r3, r1
 8001c10:	431a      	orrs	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	619a      	str	r2, [r3, #24]
}
 8001c16:	bf00      	nop
 8001c18:	3714      	adds	r7, #20
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
	...

08001c24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e267      	b.n	8002106 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d075      	beq.n	8001d2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c42:	4b88      	ldr	r3, [pc, #544]	; (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 030c 	and.w	r3, r3, #12
 8001c4a:	2b04      	cmp	r3, #4
 8001c4c:	d00c      	beq.n	8001c68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c4e:	4b85      	ldr	r3, [pc, #532]	; (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c56:	2b08      	cmp	r3, #8
 8001c58:	d112      	bne.n	8001c80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c5a:	4b82      	ldr	r3, [pc, #520]	; (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c66:	d10b      	bne.n	8001c80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c68:	4b7e      	ldr	r3, [pc, #504]	; (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d05b      	beq.n	8001d2c <HAL_RCC_OscConfig+0x108>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d157      	bne.n	8001d2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e242      	b.n	8002106 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c88:	d106      	bne.n	8001c98 <HAL_RCC_OscConfig+0x74>
 8001c8a:	4b76      	ldr	r3, [pc, #472]	; (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a75      	ldr	r2, [pc, #468]	; (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c94:	6013      	str	r3, [r2, #0]
 8001c96:	e01d      	b.n	8001cd4 <HAL_RCC_OscConfig+0xb0>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ca0:	d10c      	bne.n	8001cbc <HAL_RCC_OscConfig+0x98>
 8001ca2:	4b70      	ldr	r3, [pc, #448]	; (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a6f      	ldr	r2, [pc, #444]	; (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001ca8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cac:	6013      	str	r3, [r2, #0]
 8001cae:	4b6d      	ldr	r3, [pc, #436]	; (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a6c      	ldr	r2, [pc, #432]	; (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb8:	6013      	str	r3, [r2, #0]
 8001cba:	e00b      	b.n	8001cd4 <HAL_RCC_OscConfig+0xb0>
 8001cbc:	4b69      	ldr	r3, [pc, #420]	; (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a68      	ldr	r2, [pc, #416]	; (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001cc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cc6:	6013      	str	r3, [r2, #0]
 8001cc8:	4b66      	ldr	r3, [pc, #408]	; (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a65      	ldr	r2, [pc, #404]	; (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001cce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d013      	beq.n	8001d04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cdc:	f7ff fbfa 	bl	80014d4 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ce4:	f7ff fbf6 	bl	80014d4 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b64      	cmp	r3, #100	; 0x64
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e207      	b.n	8002106 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf6:	4b5b      	ldr	r3, [pc, #364]	; (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0f0      	beq.n	8001ce4 <HAL_RCC_OscConfig+0xc0>
 8001d02:	e014      	b.n	8001d2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d04:	f7ff fbe6 	bl	80014d4 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d0c:	f7ff fbe2 	bl	80014d4 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b64      	cmp	r3, #100	; 0x64
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e1f3      	b.n	8002106 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d1e:	4b51      	ldr	r3, [pc, #324]	; (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1f0      	bne.n	8001d0c <HAL_RCC_OscConfig+0xe8>
 8001d2a:	e000      	b.n	8001d2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d063      	beq.n	8001e02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d3a:	4b4a      	ldr	r3, [pc, #296]	; (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 030c 	and.w	r3, r3, #12
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d00b      	beq.n	8001d5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d46:	4b47      	ldr	r3, [pc, #284]	; (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d4e:	2b08      	cmp	r3, #8
 8001d50:	d11c      	bne.n	8001d8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d52:	4b44      	ldr	r3, [pc, #272]	; (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d116      	bne.n	8001d8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d5e:	4b41      	ldr	r3, [pc, #260]	; (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d005      	beq.n	8001d76 <HAL_RCC_OscConfig+0x152>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d001      	beq.n	8001d76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e1c7      	b.n	8002106 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d76:	4b3b      	ldr	r3, [pc, #236]	; (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	4937      	ldr	r1, [pc, #220]	; (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d8a:	e03a      	b.n	8001e02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d020      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d94:	4b34      	ldr	r3, [pc, #208]	; (8001e68 <HAL_RCC_OscConfig+0x244>)
 8001d96:	2201      	movs	r2, #1
 8001d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9a:	f7ff fb9b 	bl	80014d4 <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001da2:	f7ff fb97 	bl	80014d4 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e1a8      	b.n	8002106 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db4:	4b2b      	ldr	r3, [pc, #172]	; (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0f0      	beq.n	8001da2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc0:	4b28      	ldr	r3, [pc, #160]	; (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	4925      	ldr	r1, [pc, #148]	; (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	600b      	str	r3, [r1, #0]
 8001dd4:	e015      	b.n	8001e02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dd6:	4b24      	ldr	r3, [pc, #144]	; (8001e68 <HAL_RCC_OscConfig+0x244>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ddc:	f7ff fb7a 	bl	80014d4 <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001de4:	f7ff fb76 	bl	80014d4 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e187      	b.n	8002106 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001df6:	4b1b      	ldr	r3, [pc, #108]	; (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1f0      	bne.n	8001de4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0308 	and.w	r3, r3, #8
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d036      	beq.n	8001e7c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d016      	beq.n	8001e44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e16:	4b15      	ldr	r3, [pc, #84]	; (8001e6c <HAL_RCC_OscConfig+0x248>)
 8001e18:	2201      	movs	r2, #1
 8001e1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e1c:	f7ff fb5a 	bl	80014d4 <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e24:	f7ff fb56 	bl	80014d4 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e167      	b.n	8002106 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e36:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d0f0      	beq.n	8001e24 <HAL_RCC_OscConfig+0x200>
 8001e42:	e01b      	b.n	8001e7c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e44:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <HAL_RCC_OscConfig+0x248>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e4a:	f7ff fb43 	bl	80014d4 <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e50:	e00e      	b.n	8001e70 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e52:	f7ff fb3f 	bl	80014d4 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d907      	bls.n	8001e70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e150      	b.n	8002106 <HAL_RCC_OscConfig+0x4e2>
 8001e64:	40023800 	.word	0x40023800
 8001e68:	42470000 	.word	0x42470000
 8001e6c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e70:	4b88      	ldr	r3, [pc, #544]	; (8002094 <HAL_RCC_OscConfig+0x470>)
 8001e72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d1ea      	bne.n	8001e52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0304 	and.w	r3, r3, #4
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f000 8097 	beq.w	8001fb8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e8e:	4b81      	ldr	r3, [pc, #516]	; (8002094 <HAL_RCC_OscConfig+0x470>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d10f      	bne.n	8001eba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	4b7d      	ldr	r3, [pc, #500]	; (8002094 <HAL_RCC_OscConfig+0x470>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	4a7c      	ldr	r2, [pc, #496]	; (8002094 <HAL_RCC_OscConfig+0x470>)
 8001ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eaa:	4b7a      	ldr	r3, [pc, #488]	; (8002094 <HAL_RCC_OscConfig+0x470>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb2:	60bb      	str	r3, [r7, #8]
 8001eb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eba:	4b77      	ldr	r3, [pc, #476]	; (8002098 <HAL_RCC_OscConfig+0x474>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d118      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ec6:	4b74      	ldr	r3, [pc, #464]	; (8002098 <HAL_RCC_OscConfig+0x474>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a73      	ldr	r2, [pc, #460]	; (8002098 <HAL_RCC_OscConfig+0x474>)
 8001ecc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ed2:	f7ff faff 	bl	80014d4 <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed8:	e008      	b.n	8001eec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eda:	f7ff fafb 	bl	80014d4 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e10c      	b.n	8002106 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eec:	4b6a      	ldr	r3, [pc, #424]	; (8002098 <HAL_RCC_OscConfig+0x474>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0f0      	beq.n	8001eda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d106      	bne.n	8001f0e <HAL_RCC_OscConfig+0x2ea>
 8001f00:	4b64      	ldr	r3, [pc, #400]	; (8002094 <HAL_RCC_OscConfig+0x470>)
 8001f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f04:	4a63      	ldr	r2, [pc, #396]	; (8002094 <HAL_RCC_OscConfig+0x470>)
 8001f06:	f043 0301 	orr.w	r3, r3, #1
 8001f0a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f0c:	e01c      	b.n	8001f48 <HAL_RCC_OscConfig+0x324>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	2b05      	cmp	r3, #5
 8001f14:	d10c      	bne.n	8001f30 <HAL_RCC_OscConfig+0x30c>
 8001f16:	4b5f      	ldr	r3, [pc, #380]	; (8002094 <HAL_RCC_OscConfig+0x470>)
 8001f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f1a:	4a5e      	ldr	r2, [pc, #376]	; (8002094 <HAL_RCC_OscConfig+0x470>)
 8001f1c:	f043 0304 	orr.w	r3, r3, #4
 8001f20:	6713      	str	r3, [r2, #112]	; 0x70
 8001f22:	4b5c      	ldr	r3, [pc, #368]	; (8002094 <HAL_RCC_OscConfig+0x470>)
 8001f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f26:	4a5b      	ldr	r2, [pc, #364]	; (8002094 <HAL_RCC_OscConfig+0x470>)
 8001f28:	f043 0301 	orr.w	r3, r3, #1
 8001f2c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f2e:	e00b      	b.n	8001f48 <HAL_RCC_OscConfig+0x324>
 8001f30:	4b58      	ldr	r3, [pc, #352]	; (8002094 <HAL_RCC_OscConfig+0x470>)
 8001f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f34:	4a57      	ldr	r2, [pc, #348]	; (8002094 <HAL_RCC_OscConfig+0x470>)
 8001f36:	f023 0301 	bic.w	r3, r3, #1
 8001f3a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f3c:	4b55      	ldr	r3, [pc, #340]	; (8002094 <HAL_RCC_OscConfig+0x470>)
 8001f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f40:	4a54      	ldr	r2, [pc, #336]	; (8002094 <HAL_RCC_OscConfig+0x470>)
 8001f42:	f023 0304 	bic.w	r3, r3, #4
 8001f46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d015      	beq.n	8001f7c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f50:	f7ff fac0 	bl	80014d4 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f56:	e00a      	b.n	8001f6e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f58:	f7ff fabc 	bl	80014d4 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e0cb      	b.n	8002106 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f6e:	4b49      	ldr	r3, [pc, #292]	; (8002094 <HAL_RCC_OscConfig+0x470>)
 8001f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0ee      	beq.n	8001f58 <HAL_RCC_OscConfig+0x334>
 8001f7a:	e014      	b.n	8001fa6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f7c:	f7ff faaa 	bl	80014d4 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f82:	e00a      	b.n	8001f9a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f84:	f7ff faa6 	bl	80014d4 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e0b5      	b.n	8002106 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f9a:	4b3e      	ldr	r3, [pc, #248]	; (8002094 <HAL_RCC_OscConfig+0x470>)
 8001f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1ee      	bne.n	8001f84 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fa6:	7dfb      	ldrb	r3, [r7, #23]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d105      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fac:	4b39      	ldr	r3, [pc, #228]	; (8002094 <HAL_RCC_OscConfig+0x470>)
 8001fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb0:	4a38      	ldr	r2, [pc, #224]	; (8002094 <HAL_RCC_OscConfig+0x470>)
 8001fb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fb6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f000 80a1 	beq.w	8002104 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fc2:	4b34      	ldr	r3, [pc, #208]	; (8002094 <HAL_RCC_OscConfig+0x470>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f003 030c 	and.w	r3, r3, #12
 8001fca:	2b08      	cmp	r3, #8
 8001fcc:	d05c      	beq.n	8002088 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d141      	bne.n	800205a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fd6:	4b31      	ldr	r3, [pc, #196]	; (800209c <HAL_RCC_OscConfig+0x478>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fdc:	f7ff fa7a 	bl	80014d4 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fe4:	f7ff fa76 	bl	80014d4 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e087      	b.n	8002106 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ff6:	4b27      	ldr	r3, [pc, #156]	; (8002094 <HAL_RCC_OscConfig+0x470>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1f0      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	69da      	ldr	r2, [r3, #28]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a1b      	ldr	r3, [r3, #32]
 800200a:	431a      	orrs	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002010:	019b      	lsls	r3, r3, #6
 8002012:	431a      	orrs	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002018:	085b      	lsrs	r3, r3, #1
 800201a:	3b01      	subs	r3, #1
 800201c:	041b      	lsls	r3, r3, #16
 800201e:	431a      	orrs	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002024:	061b      	lsls	r3, r3, #24
 8002026:	491b      	ldr	r1, [pc, #108]	; (8002094 <HAL_RCC_OscConfig+0x470>)
 8002028:	4313      	orrs	r3, r2
 800202a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800202c:	4b1b      	ldr	r3, [pc, #108]	; (800209c <HAL_RCC_OscConfig+0x478>)
 800202e:	2201      	movs	r2, #1
 8002030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002032:	f7ff fa4f 	bl	80014d4 <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002038:	e008      	b.n	800204c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800203a:	f7ff fa4b 	bl	80014d4 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e05c      	b.n	8002106 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800204c:	4b11      	ldr	r3, [pc, #68]	; (8002094 <HAL_RCC_OscConfig+0x470>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d0f0      	beq.n	800203a <HAL_RCC_OscConfig+0x416>
 8002058:	e054      	b.n	8002104 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800205a:	4b10      	ldr	r3, [pc, #64]	; (800209c <HAL_RCC_OscConfig+0x478>)
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002060:	f7ff fa38 	bl	80014d4 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002068:	f7ff fa34 	bl	80014d4 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e045      	b.n	8002106 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800207a:	4b06      	ldr	r3, [pc, #24]	; (8002094 <HAL_RCC_OscConfig+0x470>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1f0      	bne.n	8002068 <HAL_RCC_OscConfig+0x444>
 8002086:	e03d      	b.n	8002104 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d107      	bne.n	80020a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e038      	b.n	8002106 <HAL_RCC_OscConfig+0x4e2>
 8002094:	40023800 	.word	0x40023800
 8002098:	40007000 	.word	0x40007000
 800209c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020a0:	4b1b      	ldr	r3, [pc, #108]	; (8002110 <HAL_RCC_OscConfig+0x4ec>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d028      	beq.n	8002100 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d121      	bne.n	8002100 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d11a      	bne.n	8002100 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020d0:	4013      	ands	r3, r2
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020d8:	4293      	cmp	r3, r2
 80020da:	d111      	bne.n	8002100 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e6:	085b      	lsrs	r3, r3, #1
 80020e8:	3b01      	subs	r3, #1
 80020ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d107      	bne.n	8002100 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d001      	beq.n	8002104 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e000      	b.n	8002106 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40023800 	.word	0x40023800

08002114 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e0cc      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002128:	4b68      	ldr	r3, [pc, #416]	; (80022cc <HAL_RCC_ClockConfig+0x1b8>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	429a      	cmp	r2, r3
 8002134:	d90c      	bls.n	8002150 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002136:	4b65      	ldr	r3, [pc, #404]	; (80022cc <HAL_RCC_ClockConfig+0x1b8>)
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	b2d2      	uxtb	r2, r2
 800213c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800213e:	4b63      	ldr	r3, [pc, #396]	; (80022cc <HAL_RCC_ClockConfig+0x1b8>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	429a      	cmp	r2, r3
 800214a:	d001      	beq.n	8002150 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e0b8      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d020      	beq.n	800219e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0304 	and.w	r3, r3, #4
 8002164:	2b00      	cmp	r3, #0
 8002166:	d005      	beq.n	8002174 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002168:	4b59      	ldr	r3, [pc, #356]	; (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	4a58      	ldr	r2, [pc, #352]	; (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 800216e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002172:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0308 	and.w	r3, r3, #8
 800217c:	2b00      	cmp	r3, #0
 800217e:	d005      	beq.n	800218c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002180:	4b53      	ldr	r3, [pc, #332]	; (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	4a52      	ldr	r2, [pc, #328]	; (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002186:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800218a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800218c:	4b50      	ldr	r3, [pc, #320]	; (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	494d      	ldr	r1, [pc, #308]	; (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 800219a:	4313      	orrs	r3, r2
 800219c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d044      	beq.n	8002234 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d107      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b2:	4b47      	ldr	r3, [pc, #284]	; (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d119      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e07f      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d003      	beq.n	80021d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ce:	2b03      	cmp	r3, #3
 80021d0:	d107      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021d2:	4b3f      	ldr	r3, [pc, #252]	; (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d109      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e06f      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e2:	4b3b      	ldr	r3, [pc, #236]	; (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e067      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021f2:	4b37      	ldr	r3, [pc, #220]	; (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f023 0203 	bic.w	r2, r3, #3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	4934      	ldr	r1, [pc, #208]	; (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002200:	4313      	orrs	r3, r2
 8002202:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002204:	f7ff f966 	bl	80014d4 <HAL_GetTick>
 8002208:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800220a:	e00a      	b.n	8002222 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800220c:	f7ff f962 	bl	80014d4 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	f241 3288 	movw	r2, #5000	; 0x1388
 800221a:	4293      	cmp	r3, r2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e04f      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002222:	4b2b      	ldr	r3, [pc, #172]	; (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 020c 	and.w	r2, r3, #12
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	429a      	cmp	r2, r3
 8002232:	d1eb      	bne.n	800220c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002234:	4b25      	ldr	r3, [pc, #148]	; (80022cc <HAL_RCC_ClockConfig+0x1b8>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	429a      	cmp	r2, r3
 8002240:	d20c      	bcs.n	800225c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002242:	4b22      	ldr	r3, [pc, #136]	; (80022cc <HAL_RCC_ClockConfig+0x1b8>)
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	b2d2      	uxtb	r2, r2
 8002248:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800224a:	4b20      	ldr	r3, [pc, #128]	; (80022cc <HAL_RCC_ClockConfig+0x1b8>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	429a      	cmp	r2, r3
 8002256:	d001      	beq.n	800225c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e032      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	2b00      	cmp	r3, #0
 8002266:	d008      	beq.n	800227a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002268:	4b19      	ldr	r3, [pc, #100]	; (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	4916      	ldr	r1, [pc, #88]	; (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002276:	4313      	orrs	r3, r2
 8002278:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0308 	and.w	r3, r3, #8
 8002282:	2b00      	cmp	r3, #0
 8002284:	d009      	beq.n	800229a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002286:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	490e      	ldr	r1, [pc, #56]	; (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002296:	4313      	orrs	r3, r2
 8002298:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800229a:	f000 f821 	bl	80022e0 <HAL_RCC_GetSysClockFreq>
 800229e:	4602      	mov	r2, r0
 80022a0:	4b0b      	ldr	r3, [pc, #44]	; (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	091b      	lsrs	r3, r3, #4
 80022a6:	f003 030f 	and.w	r3, r3, #15
 80022aa:	490a      	ldr	r1, [pc, #40]	; (80022d4 <HAL_RCC_ClockConfig+0x1c0>)
 80022ac:	5ccb      	ldrb	r3, [r1, r3]
 80022ae:	fa22 f303 	lsr.w	r3, r2, r3
 80022b2:	4a09      	ldr	r2, [pc, #36]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 80022b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022b6:	4b09      	ldr	r3, [pc, #36]	; (80022dc <HAL_RCC_ClockConfig+0x1c8>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff f8c6 	bl	800144c <HAL_InitTick>

  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40023c00 	.word	0x40023c00
 80022d0:	40023800 	.word	0x40023800
 80022d4:	08011a20 	.word	0x08011a20
 80022d8:	20000008 	.word	0x20000008
 80022dc:	2000000c 	.word	0x2000000c

080022e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022e4:	b090      	sub	sp, #64	; 0x40
 80022e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80022e8:	2300      	movs	r3, #0
 80022ea:	637b      	str	r3, [r7, #52]	; 0x34
 80022ec:	2300      	movs	r3, #0
 80022ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022f0:	2300      	movs	r3, #0
 80022f2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80022f4:	2300      	movs	r3, #0
 80022f6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022f8:	4b59      	ldr	r3, [pc, #356]	; (8002460 <HAL_RCC_GetSysClockFreq+0x180>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 030c 	and.w	r3, r3, #12
 8002300:	2b08      	cmp	r3, #8
 8002302:	d00d      	beq.n	8002320 <HAL_RCC_GetSysClockFreq+0x40>
 8002304:	2b08      	cmp	r3, #8
 8002306:	f200 80a1 	bhi.w	800244c <HAL_RCC_GetSysClockFreq+0x16c>
 800230a:	2b00      	cmp	r3, #0
 800230c:	d002      	beq.n	8002314 <HAL_RCC_GetSysClockFreq+0x34>
 800230e:	2b04      	cmp	r3, #4
 8002310:	d003      	beq.n	800231a <HAL_RCC_GetSysClockFreq+0x3a>
 8002312:	e09b      	b.n	800244c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002314:	4b53      	ldr	r3, [pc, #332]	; (8002464 <HAL_RCC_GetSysClockFreq+0x184>)
 8002316:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002318:	e09b      	b.n	8002452 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800231a:	4b53      	ldr	r3, [pc, #332]	; (8002468 <HAL_RCC_GetSysClockFreq+0x188>)
 800231c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800231e:	e098      	b.n	8002452 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002320:	4b4f      	ldr	r3, [pc, #316]	; (8002460 <HAL_RCC_GetSysClockFreq+0x180>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002328:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800232a:	4b4d      	ldr	r3, [pc, #308]	; (8002460 <HAL_RCC_GetSysClockFreq+0x180>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d028      	beq.n	8002388 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002336:	4b4a      	ldr	r3, [pc, #296]	; (8002460 <HAL_RCC_GetSysClockFreq+0x180>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	099b      	lsrs	r3, r3, #6
 800233c:	2200      	movs	r2, #0
 800233e:	623b      	str	r3, [r7, #32]
 8002340:	627a      	str	r2, [r7, #36]	; 0x24
 8002342:	6a3b      	ldr	r3, [r7, #32]
 8002344:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002348:	2100      	movs	r1, #0
 800234a:	4b47      	ldr	r3, [pc, #284]	; (8002468 <HAL_RCC_GetSysClockFreq+0x188>)
 800234c:	fb03 f201 	mul.w	r2, r3, r1
 8002350:	2300      	movs	r3, #0
 8002352:	fb00 f303 	mul.w	r3, r0, r3
 8002356:	4413      	add	r3, r2
 8002358:	4a43      	ldr	r2, [pc, #268]	; (8002468 <HAL_RCC_GetSysClockFreq+0x188>)
 800235a:	fba0 1202 	umull	r1, r2, r0, r2
 800235e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002360:	460a      	mov	r2, r1
 8002362:	62ba      	str	r2, [r7, #40]	; 0x28
 8002364:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002366:	4413      	add	r3, r2
 8002368:	62fb      	str	r3, [r7, #44]	; 0x2c
 800236a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800236c:	2200      	movs	r2, #0
 800236e:	61bb      	str	r3, [r7, #24]
 8002370:	61fa      	str	r2, [r7, #28]
 8002372:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002376:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800237a:	f7fd ff81 	bl	8000280 <__aeabi_uldivmod>
 800237e:	4602      	mov	r2, r0
 8002380:	460b      	mov	r3, r1
 8002382:	4613      	mov	r3, r2
 8002384:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002386:	e053      	b.n	8002430 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002388:	4b35      	ldr	r3, [pc, #212]	; (8002460 <HAL_RCC_GetSysClockFreq+0x180>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	099b      	lsrs	r3, r3, #6
 800238e:	2200      	movs	r2, #0
 8002390:	613b      	str	r3, [r7, #16]
 8002392:	617a      	str	r2, [r7, #20]
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800239a:	f04f 0b00 	mov.w	fp, #0
 800239e:	4652      	mov	r2, sl
 80023a0:	465b      	mov	r3, fp
 80023a2:	f04f 0000 	mov.w	r0, #0
 80023a6:	f04f 0100 	mov.w	r1, #0
 80023aa:	0159      	lsls	r1, r3, #5
 80023ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023b0:	0150      	lsls	r0, r2, #5
 80023b2:	4602      	mov	r2, r0
 80023b4:	460b      	mov	r3, r1
 80023b6:	ebb2 080a 	subs.w	r8, r2, sl
 80023ba:	eb63 090b 	sbc.w	r9, r3, fp
 80023be:	f04f 0200 	mov.w	r2, #0
 80023c2:	f04f 0300 	mov.w	r3, #0
 80023c6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80023ca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80023ce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80023d2:	ebb2 0408 	subs.w	r4, r2, r8
 80023d6:	eb63 0509 	sbc.w	r5, r3, r9
 80023da:	f04f 0200 	mov.w	r2, #0
 80023de:	f04f 0300 	mov.w	r3, #0
 80023e2:	00eb      	lsls	r3, r5, #3
 80023e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023e8:	00e2      	lsls	r2, r4, #3
 80023ea:	4614      	mov	r4, r2
 80023ec:	461d      	mov	r5, r3
 80023ee:	eb14 030a 	adds.w	r3, r4, sl
 80023f2:	603b      	str	r3, [r7, #0]
 80023f4:	eb45 030b 	adc.w	r3, r5, fp
 80023f8:	607b      	str	r3, [r7, #4]
 80023fa:	f04f 0200 	mov.w	r2, #0
 80023fe:	f04f 0300 	mov.w	r3, #0
 8002402:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002406:	4629      	mov	r1, r5
 8002408:	028b      	lsls	r3, r1, #10
 800240a:	4621      	mov	r1, r4
 800240c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002410:	4621      	mov	r1, r4
 8002412:	028a      	lsls	r2, r1, #10
 8002414:	4610      	mov	r0, r2
 8002416:	4619      	mov	r1, r3
 8002418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800241a:	2200      	movs	r2, #0
 800241c:	60bb      	str	r3, [r7, #8]
 800241e:	60fa      	str	r2, [r7, #12]
 8002420:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002424:	f7fd ff2c 	bl	8000280 <__aeabi_uldivmod>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	4613      	mov	r3, r2
 800242e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002430:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <HAL_RCC_GetSysClockFreq+0x180>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	0c1b      	lsrs	r3, r3, #16
 8002436:	f003 0303 	and.w	r3, r3, #3
 800243a:	3301      	adds	r3, #1
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002440:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002444:	fbb2 f3f3 	udiv	r3, r2, r3
 8002448:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800244a:	e002      	b.n	8002452 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800244c:	4b05      	ldr	r3, [pc, #20]	; (8002464 <HAL_RCC_GetSysClockFreq+0x184>)
 800244e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002450:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002454:	4618      	mov	r0, r3
 8002456:	3740      	adds	r7, #64	; 0x40
 8002458:	46bd      	mov	sp, r7
 800245a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800245e:	bf00      	nop
 8002460:	40023800 	.word	0x40023800
 8002464:	00f42400 	.word	0x00f42400
 8002468:	017d7840 	.word	0x017d7840

0800246c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002470:	4b03      	ldr	r3, [pc, #12]	; (8002480 <HAL_RCC_GetHCLKFreq+0x14>)
 8002472:	681b      	ldr	r3, [r3, #0]
}
 8002474:	4618      	mov	r0, r3
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	20000008 	.word	0x20000008

08002484 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002488:	f7ff fff0 	bl	800246c <HAL_RCC_GetHCLKFreq>
 800248c:	4602      	mov	r2, r0
 800248e:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	0a9b      	lsrs	r3, r3, #10
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	4903      	ldr	r1, [pc, #12]	; (80024a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800249a:	5ccb      	ldrb	r3, [r1, r3]
 800249c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40023800 	.word	0x40023800
 80024a8:	08011a30 	.word	0x08011a30

080024ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024b0:	f7ff ffdc 	bl	800246c <HAL_RCC_GetHCLKFreq>
 80024b4:	4602      	mov	r2, r0
 80024b6:	4b05      	ldr	r3, [pc, #20]	; (80024cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	0b5b      	lsrs	r3, r3, #13
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	4903      	ldr	r1, [pc, #12]	; (80024d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024c2:	5ccb      	ldrb	r3, [r1, r3]
 80024c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40023800 	.word	0x40023800
 80024d0:	08011a30 	.word	0x08011a30

080024d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e07b      	b.n	80025de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d108      	bne.n	8002500 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024f6:	d009      	beq.n	800250c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	61da      	str	r2, [r3, #28]
 80024fe:	e005      	b.n	800250c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d106      	bne.n	800252c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7fe fd66 	bl	8000ff8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2202      	movs	r2, #2
 8002530:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002542:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002554:	431a      	orrs	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800255e:	431a      	orrs	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	431a      	orrs	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	431a      	orrs	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800257c:	431a      	orrs	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002586:	431a      	orrs	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002590:	ea42 0103 	orr.w	r1, r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002598:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	430a      	orrs	r2, r1
 80025a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	0c1b      	lsrs	r3, r3, #16
 80025aa:	f003 0104 	and.w	r1, r3, #4
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b2:	f003 0210 	and.w	r2, r3, #16
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	69da      	ldr	r2, [r3, #28]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b088      	sub	sp, #32
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	60f8      	str	r0, [r7, #12]
 80025ee:	60b9      	str	r1, [r7, #8]
 80025f0:	603b      	str	r3, [r7, #0]
 80025f2:	4613      	mov	r3, r2
 80025f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80025f6:	2300      	movs	r3, #0
 80025f8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002600:	2b01      	cmp	r3, #1
 8002602:	d101      	bne.n	8002608 <HAL_SPI_Transmit+0x22>
 8002604:	2302      	movs	r3, #2
 8002606:	e126      	b.n	8002856 <HAL_SPI_Transmit+0x270>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002610:	f7fe ff60 	bl	80014d4 <HAL_GetTick>
 8002614:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002616:	88fb      	ldrh	r3, [r7, #6]
 8002618:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b01      	cmp	r3, #1
 8002624:	d002      	beq.n	800262c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002626:	2302      	movs	r3, #2
 8002628:	77fb      	strb	r3, [r7, #31]
    goto error;
 800262a:	e10b      	b.n	8002844 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d002      	beq.n	8002638 <HAL_SPI_Transmit+0x52>
 8002632:	88fb      	ldrh	r3, [r7, #6]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d102      	bne.n	800263e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800263c:	e102      	b.n	8002844 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2203      	movs	r2, #3
 8002642:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	68ba      	ldr	r2, [r7, #8]
 8002650:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	88fa      	ldrh	r2, [r7, #6]
 8002656:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	88fa      	ldrh	r2, [r7, #6]
 800265c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2200      	movs	r2, #0
 8002668:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002684:	d10f      	bne.n	80026a6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002694:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b0:	2b40      	cmp	r3, #64	; 0x40
 80026b2:	d007      	beq.n	80026c4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026cc:	d14b      	bne.n	8002766 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d002      	beq.n	80026dc <HAL_SPI_Transmit+0xf6>
 80026d6:	8afb      	ldrh	r3, [r7, #22]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d13e      	bne.n	800275a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e0:	881a      	ldrh	r2, [r3, #0]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ec:	1c9a      	adds	r2, r3, #2
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	3b01      	subs	r3, #1
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002700:	e02b      	b.n	800275a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b02      	cmp	r3, #2
 800270e:	d112      	bne.n	8002736 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002714:	881a      	ldrh	r2, [r3, #0]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002720:	1c9a      	adds	r2, r3, #2
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800272a:	b29b      	uxth	r3, r3
 800272c:	3b01      	subs	r3, #1
 800272e:	b29a      	uxth	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	86da      	strh	r2, [r3, #54]	; 0x36
 8002734:	e011      	b.n	800275a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002736:	f7fe fecd 	bl	80014d4 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	429a      	cmp	r2, r3
 8002744:	d803      	bhi.n	800274e <HAL_SPI_Transmit+0x168>
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800274c:	d102      	bne.n	8002754 <HAL_SPI_Transmit+0x16e>
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d102      	bne.n	800275a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002758:	e074      	b.n	8002844 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800275e:	b29b      	uxth	r3, r3
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1ce      	bne.n	8002702 <HAL_SPI_Transmit+0x11c>
 8002764:	e04c      	b.n	8002800 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d002      	beq.n	8002774 <HAL_SPI_Transmit+0x18e>
 800276e:	8afb      	ldrh	r3, [r7, #22]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d140      	bne.n	80027f6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	330c      	adds	r3, #12
 800277e:	7812      	ldrb	r2, [r2, #0]
 8002780:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	1c5a      	adds	r2, r3, #1
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002790:	b29b      	uxth	r3, r3
 8002792:	3b01      	subs	r3, #1
 8002794:	b29a      	uxth	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800279a:	e02c      	b.n	80027f6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d113      	bne.n	80027d2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	330c      	adds	r3, #12
 80027b4:	7812      	ldrb	r2, [r2, #0]
 80027b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027bc:	1c5a      	adds	r2, r3, #1
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	86da      	strh	r2, [r3, #54]	; 0x36
 80027d0:	e011      	b.n	80027f6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027d2:	f7fe fe7f 	bl	80014d4 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d803      	bhi.n	80027ea <HAL_SPI_Transmit+0x204>
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e8:	d102      	bne.n	80027f0 <HAL_SPI_Transmit+0x20a>
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d102      	bne.n	80027f6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80027f4:	e026      	b.n	8002844 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1cd      	bne.n	800279c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	6839      	ldr	r1, [r7, #0]
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f000 f8b3 	bl	8002970 <SPI_EndRxTxTransaction>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d002      	beq.n	8002816 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2220      	movs	r2, #32
 8002814:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10a      	bne.n	8002834 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800281e:	2300      	movs	r3, #0
 8002820:	613b      	str	r3, [r7, #16]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	613b      	str	r3, [r7, #16]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	613b      	str	r3, [r7, #16]
 8002832:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002838:	2b00      	cmp	r3, #0
 800283a:	d002      	beq.n	8002842 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	77fb      	strb	r3, [r7, #31]
 8002840:	e000      	b.n	8002844 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002842:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002854:	7ffb      	ldrb	r3, [r7, #31]
}
 8002856:	4618      	mov	r0, r3
 8002858:	3720      	adds	r7, #32
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
	...

08002860 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b088      	sub	sp, #32
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	603b      	str	r3, [r7, #0]
 800286c:	4613      	mov	r3, r2
 800286e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002870:	f7fe fe30 	bl	80014d4 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002878:	1a9b      	subs	r3, r3, r2
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	4413      	add	r3, r2
 800287e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002880:	f7fe fe28 	bl	80014d4 <HAL_GetTick>
 8002884:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002886:	4b39      	ldr	r3, [pc, #228]	; (800296c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	015b      	lsls	r3, r3, #5
 800288c:	0d1b      	lsrs	r3, r3, #20
 800288e:	69fa      	ldr	r2, [r7, #28]
 8002890:	fb02 f303 	mul.w	r3, r2, r3
 8002894:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002896:	e054      	b.n	8002942 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800289e:	d050      	beq.n	8002942 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80028a0:	f7fe fe18 	bl	80014d4 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	69fa      	ldr	r2, [r7, #28]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d902      	bls.n	80028b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d13d      	bne.n	8002932 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80028c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028ce:	d111      	bne.n	80028f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028d8:	d004      	beq.n	80028e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028e2:	d107      	bne.n	80028f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028fc:	d10f      	bne.n	800291e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800290c:	601a      	str	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800291c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e017      	b.n	8002962 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d101      	bne.n	800293c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002938:	2300      	movs	r3, #0
 800293a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	3b01      	subs	r3, #1
 8002940:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	4013      	ands	r3, r2
 800294c:	68ba      	ldr	r2, [r7, #8]
 800294e:	429a      	cmp	r2, r3
 8002950:	bf0c      	ite	eq
 8002952:	2301      	moveq	r3, #1
 8002954:	2300      	movne	r3, #0
 8002956:	b2db      	uxtb	r3, r3
 8002958:	461a      	mov	r2, r3
 800295a:	79fb      	ldrb	r3, [r7, #7]
 800295c:	429a      	cmp	r2, r3
 800295e:	d19b      	bne.n	8002898 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3720      	adds	r7, #32
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	20000008 	.word	0x20000008

08002970 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b088      	sub	sp, #32
 8002974:	af02      	add	r7, sp, #8
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800297c:	4b1b      	ldr	r3, [pc, #108]	; (80029ec <SPI_EndRxTxTransaction+0x7c>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a1b      	ldr	r2, [pc, #108]	; (80029f0 <SPI_EndRxTxTransaction+0x80>)
 8002982:	fba2 2303 	umull	r2, r3, r2, r3
 8002986:	0d5b      	lsrs	r3, r3, #21
 8002988:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800298c:	fb02 f303 	mul.w	r3, r2, r3
 8002990:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800299a:	d112      	bne.n	80029c2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	2200      	movs	r2, #0
 80029a4:	2180      	movs	r1, #128	; 0x80
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f7ff ff5a 	bl	8002860 <SPI_WaitFlagStateUntilTimeout>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d016      	beq.n	80029e0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b6:	f043 0220 	orr.w	r2, r3, #32
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e00f      	b.n	80029e2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00a      	beq.n	80029de <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	3b01      	subs	r3, #1
 80029cc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d8:	2b80      	cmp	r3, #128	; 0x80
 80029da:	d0f2      	beq.n	80029c2 <SPI_EndRxTxTransaction+0x52>
 80029dc:	e000      	b.n	80029e0 <SPI_EndRxTxTransaction+0x70>
        break;
 80029de:	bf00      	nop
  }

  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3718      	adds	r7, #24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	20000008 	.word	0x20000008
 80029f0:	165e9f81 	.word	0x165e9f81

080029f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e041      	b.n	8002a8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d106      	bne.n	8002a20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7fe fb34 	bl	8001088 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2202      	movs	r2, #2
 8002a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3304      	adds	r3, #4
 8002a30:	4619      	mov	r1, r3
 8002a32:	4610      	mov	r0, r2
 8002a34:	f000 fa92 	bl	8002f5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
	...

08002a94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d001      	beq.n	8002aac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e044      	b.n	8002b36 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2202      	movs	r2, #2
 8002ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68da      	ldr	r2, [r3, #12]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f042 0201 	orr.w	r2, r2, #1
 8002ac2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a1e      	ldr	r2, [pc, #120]	; (8002b44 <HAL_TIM_Base_Start_IT+0xb0>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d018      	beq.n	8002b00 <HAL_TIM_Base_Start_IT+0x6c>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ad6:	d013      	beq.n	8002b00 <HAL_TIM_Base_Start_IT+0x6c>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a1a      	ldr	r2, [pc, #104]	; (8002b48 <HAL_TIM_Base_Start_IT+0xb4>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d00e      	beq.n	8002b00 <HAL_TIM_Base_Start_IT+0x6c>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a19      	ldr	r2, [pc, #100]	; (8002b4c <HAL_TIM_Base_Start_IT+0xb8>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d009      	beq.n	8002b00 <HAL_TIM_Base_Start_IT+0x6c>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a17      	ldr	r2, [pc, #92]	; (8002b50 <HAL_TIM_Base_Start_IT+0xbc>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d004      	beq.n	8002b00 <HAL_TIM_Base_Start_IT+0x6c>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a16      	ldr	r2, [pc, #88]	; (8002b54 <HAL_TIM_Base_Start_IT+0xc0>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d111      	bne.n	8002b24 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2b06      	cmp	r3, #6
 8002b10:	d010      	beq.n	8002b34 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f042 0201 	orr.w	r2, r2, #1
 8002b20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b22:	e007      	b.n	8002b34 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f042 0201 	orr.w	r2, r2, #1
 8002b32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3714      	adds	r7, #20
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	40010000 	.word	0x40010000
 8002b48:	40000400 	.word	0x40000400
 8002b4c:	40000800 	.word	0x40000800
 8002b50:	40000c00 	.word	0x40000c00
 8002b54:	40014000 	.word	0x40014000

08002b58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d122      	bne.n	8002bb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d11b      	bne.n	8002bb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f06f 0202 	mvn.w	r2, #2
 8002b84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f9bf 	bl	8002f1e <HAL_TIM_IC_CaptureCallback>
 8002ba0:	e005      	b.n	8002bae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f9b1 	bl	8002f0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 f9c2 	bl	8002f32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	f003 0304 	and.w	r3, r3, #4
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	d122      	bne.n	8002c08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b04      	cmp	r3, #4
 8002bce:	d11b      	bne.n	8002c08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f06f 0204 	mvn.w	r2, #4
 8002bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2202      	movs	r2, #2
 8002bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f995 	bl	8002f1e <HAL_TIM_IC_CaptureCallback>
 8002bf4:	e005      	b.n	8002c02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f987 	bl	8002f0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 f998 	bl	8002f32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	f003 0308 	and.w	r3, r3, #8
 8002c12:	2b08      	cmp	r3, #8
 8002c14:	d122      	bne.n	8002c5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	f003 0308 	and.w	r3, r3, #8
 8002c20:	2b08      	cmp	r3, #8
 8002c22:	d11b      	bne.n	8002c5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f06f 0208 	mvn.w	r2, #8
 8002c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2204      	movs	r2, #4
 8002c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	f003 0303 	and.w	r3, r3, #3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f96b 	bl	8002f1e <HAL_TIM_IC_CaptureCallback>
 8002c48:	e005      	b.n	8002c56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f95d 	bl	8002f0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 f96e 	bl	8002f32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	f003 0310 	and.w	r3, r3, #16
 8002c66:	2b10      	cmp	r3, #16
 8002c68:	d122      	bne.n	8002cb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	f003 0310 	and.w	r3, r3, #16
 8002c74:	2b10      	cmp	r3, #16
 8002c76:	d11b      	bne.n	8002cb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f06f 0210 	mvn.w	r2, #16
 8002c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2208      	movs	r2, #8
 8002c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 f941 	bl	8002f1e <HAL_TIM_IC_CaptureCallback>
 8002c9c:	e005      	b.n	8002caa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 f933 	bl	8002f0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 f944 	bl	8002f32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d10e      	bne.n	8002cdc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d107      	bne.n	8002cdc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f06f 0201 	mvn.w	r2, #1
 8002cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 f90d 	bl	8002ef6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce6:	2b80      	cmp	r3, #128	; 0x80
 8002ce8:	d10e      	bne.n	8002d08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf4:	2b80      	cmp	r3, #128	; 0x80
 8002cf6:	d107      	bne.n	8002d08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 fabc 	bl	8003280 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d12:	2b40      	cmp	r3, #64	; 0x40
 8002d14:	d10e      	bne.n	8002d34 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d20:	2b40      	cmp	r3, #64	; 0x40
 8002d22:	d107      	bne.n	8002d34 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f909 	bl	8002f46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	f003 0320 	and.w	r3, r3, #32
 8002d3e:	2b20      	cmp	r3, #32
 8002d40:	d10e      	bne.n	8002d60 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	f003 0320 	and.w	r3, r3, #32
 8002d4c:	2b20      	cmp	r3, #32
 8002d4e:	d107      	bne.n	8002d60 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f06f 0220 	mvn.w	r2, #32
 8002d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 fa86 	bl	800326c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d60:	bf00      	nop
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d72:	2300      	movs	r3, #0
 8002d74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d101      	bne.n	8002d84 <HAL_TIM_ConfigClockSource+0x1c>
 8002d80:	2302      	movs	r3, #2
 8002d82:	e0b4      	b.n	8002eee <HAL_TIM_ConfigClockSource+0x186>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2202      	movs	r2, #2
 8002d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002da2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002daa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68ba      	ldr	r2, [r7, #8]
 8002db2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dbc:	d03e      	beq.n	8002e3c <HAL_TIM_ConfigClockSource+0xd4>
 8002dbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dc2:	f200 8087 	bhi.w	8002ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8002dc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dca:	f000 8086 	beq.w	8002eda <HAL_TIM_ConfigClockSource+0x172>
 8002dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dd2:	d87f      	bhi.n	8002ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8002dd4:	2b70      	cmp	r3, #112	; 0x70
 8002dd6:	d01a      	beq.n	8002e0e <HAL_TIM_ConfigClockSource+0xa6>
 8002dd8:	2b70      	cmp	r3, #112	; 0x70
 8002dda:	d87b      	bhi.n	8002ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ddc:	2b60      	cmp	r3, #96	; 0x60
 8002dde:	d050      	beq.n	8002e82 <HAL_TIM_ConfigClockSource+0x11a>
 8002de0:	2b60      	cmp	r3, #96	; 0x60
 8002de2:	d877      	bhi.n	8002ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8002de4:	2b50      	cmp	r3, #80	; 0x50
 8002de6:	d03c      	beq.n	8002e62 <HAL_TIM_ConfigClockSource+0xfa>
 8002de8:	2b50      	cmp	r3, #80	; 0x50
 8002dea:	d873      	bhi.n	8002ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8002dec:	2b40      	cmp	r3, #64	; 0x40
 8002dee:	d058      	beq.n	8002ea2 <HAL_TIM_ConfigClockSource+0x13a>
 8002df0:	2b40      	cmp	r3, #64	; 0x40
 8002df2:	d86f      	bhi.n	8002ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8002df4:	2b30      	cmp	r3, #48	; 0x30
 8002df6:	d064      	beq.n	8002ec2 <HAL_TIM_ConfigClockSource+0x15a>
 8002df8:	2b30      	cmp	r3, #48	; 0x30
 8002dfa:	d86b      	bhi.n	8002ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8002dfc:	2b20      	cmp	r3, #32
 8002dfe:	d060      	beq.n	8002ec2 <HAL_TIM_ConfigClockSource+0x15a>
 8002e00:	2b20      	cmp	r3, #32
 8002e02:	d867      	bhi.n	8002ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d05c      	beq.n	8002ec2 <HAL_TIM_ConfigClockSource+0x15a>
 8002e08:	2b10      	cmp	r3, #16
 8002e0a:	d05a      	beq.n	8002ec2 <HAL_TIM_ConfigClockSource+0x15a>
 8002e0c:	e062      	b.n	8002ed4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6818      	ldr	r0, [r3, #0]
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	6899      	ldr	r1, [r3, #8]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685a      	ldr	r2, [r3, #4]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	f000 f997 	bl	8003150 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68ba      	ldr	r2, [r7, #8]
 8002e38:	609a      	str	r2, [r3, #8]
      break;
 8002e3a:	e04f      	b.n	8002edc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6818      	ldr	r0, [r3, #0]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	6899      	ldr	r1, [r3, #8]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	f000 f980 	bl	8003150 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689a      	ldr	r2, [r3, #8]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e5e:	609a      	str	r2, [r3, #8]
      break;
 8002e60:	e03c      	b.n	8002edc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6818      	ldr	r0, [r3, #0]
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	6859      	ldr	r1, [r3, #4]
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	f000 f8f4 	bl	800305c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2150      	movs	r1, #80	; 0x50
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f000 f94d 	bl	800311a <TIM_ITRx_SetConfig>
      break;
 8002e80:	e02c      	b.n	8002edc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6818      	ldr	r0, [r3, #0]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	6859      	ldr	r1, [r3, #4]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	f000 f913 	bl	80030ba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2160      	movs	r1, #96	; 0x60
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 f93d 	bl	800311a <TIM_ITRx_SetConfig>
      break;
 8002ea0:	e01c      	b.n	8002edc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6818      	ldr	r0, [r3, #0]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	6859      	ldr	r1, [r3, #4]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	f000 f8d4 	bl	800305c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2140      	movs	r1, #64	; 0x40
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 f92d 	bl	800311a <TIM_ITRx_SetConfig>
      break;
 8002ec0:	e00c      	b.n	8002edc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4619      	mov	r1, r3
 8002ecc:	4610      	mov	r0, r2
 8002ece:	f000 f924 	bl	800311a <TIM_ITRx_SetConfig>
      break;
 8002ed2:	e003      	b.n	8002edc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ed8:	e000      	b.n	8002edc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002eda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b083      	sub	sp, #12
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr

08002f0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b083      	sub	sp, #12
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b083      	sub	sp, #12
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f3a:	bf00      	nop
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr

08002f46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b083      	sub	sp, #12
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
	...

08002f5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a34      	ldr	r2, [pc, #208]	; (8003040 <TIM_Base_SetConfig+0xe4>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d00f      	beq.n	8002f94 <TIM_Base_SetConfig+0x38>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f7a:	d00b      	beq.n	8002f94 <TIM_Base_SetConfig+0x38>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a31      	ldr	r2, [pc, #196]	; (8003044 <TIM_Base_SetConfig+0xe8>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d007      	beq.n	8002f94 <TIM_Base_SetConfig+0x38>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a30      	ldr	r2, [pc, #192]	; (8003048 <TIM_Base_SetConfig+0xec>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d003      	beq.n	8002f94 <TIM_Base_SetConfig+0x38>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a2f      	ldr	r2, [pc, #188]	; (800304c <TIM_Base_SetConfig+0xf0>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d108      	bne.n	8002fa6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a25      	ldr	r2, [pc, #148]	; (8003040 <TIM_Base_SetConfig+0xe4>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d01b      	beq.n	8002fe6 <TIM_Base_SetConfig+0x8a>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb4:	d017      	beq.n	8002fe6 <TIM_Base_SetConfig+0x8a>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a22      	ldr	r2, [pc, #136]	; (8003044 <TIM_Base_SetConfig+0xe8>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d013      	beq.n	8002fe6 <TIM_Base_SetConfig+0x8a>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a21      	ldr	r2, [pc, #132]	; (8003048 <TIM_Base_SetConfig+0xec>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d00f      	beq.n	8002fe6 <TIM_Base_SetConfig+0x8a>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a20      	ldr	r2, [pc, #128]	; (800304c <TIM_Base_SetConfig+0xf0>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d00b      	beq.n	8002fe6 <TIM_Base_SetConfig+0x8a>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a1f      	ldr	r2, [pc, #124]	; (8003050 <TIM_Base_SetConfig+0xf4>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d007      	beq.n	8002fe6 <TIM_Base_SetConfig+0x8a>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a1e      	ldr	r2, [pc, #120]	; (8003054 <TIM_Base_SetConfig+0xf8>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d003      	beq.n	8002fe6 <TIM_Base_SetConfig+0x8a>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a1d      	ldr	r2, [pc, #116]	; (8003058 <TIM_Base_SetConfig+0xfc>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d108      	bne.n	8002ff8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	4313      	orrs	r3, r2
 8003004:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a08      	ldr	r2, [pc, #32]	; (8003040 <TIM_Base_SetConfig+0xe4>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d103      	bne.n	800302c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	691a      	ldr	r2, [r3, #16]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	615a      	str	r2, [r3, #20]
}
 8003032:	bf00      	nop
 8003034:	3714      	adds	r7, #20
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	40010000 	.word	0x40010000
 8003044:	40000400 	.word	0x40000400
 8003048:	40000800 	.word	0x40000800
 800304c:	40000c00 	.word	0x40000c00
 8003050:	40014000 	.word	0x40014000
 8003054:	40014400 	.word	0x40014400
 8003058:	40014800 	.word	0x40014800

0800305c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800305c:	b480      	push	{r7}
 800305e:	b087      	sub	sp, #28
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	f023 0201 	bic.w	r2, r3, #1
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003086:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	011b      	lsls	r3, r3, #4
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	4313      	orrs	r3, r2
 8003090:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f023 030a 	bic.w	r3, r3, #10
 8003098:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	4313      	orrs	r3, r2
 80030a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	621a      	str	r2, [r3, #32]
}
 80030ae:	bf00      	nop
 80030b0:	371c      	adds	r7, #28
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr

080030ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b087      	sub	sp, #28
 80030be:	af00      	add	r7, sp, #0
 80030c0:	60f8      	str	r0, [r7, #12]
 80030c2:	60b9      	str	r1, [r7, #8]
 80030c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	f023 0210 	bic.w	r2, r3, #16
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	031b      	lsls	r3, r3, #12
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80030f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	011b      	lsls	r3, r3, #4
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	4313      	orrs	r3, r2
 8003100:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	621a      	str	r2, [r3, #32]
}
 800310e:	bf00      	nop
 8003110:	371c      	adds	r7, #28
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr

0800311a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800311a:	b480      	push	{r7}
 800311c:	b085      	sub	sp, #20
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
 8003122:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003130:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	4313      	orrs	r3, r2
 8003138:	f043 0307 	orr.w	r3, r3, #7
 800313c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	609a      	str	r2, [r3, #8]
}
 8003144:	bf00      	nop
 8003146:	3714      	adds	r7, #20
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003150:	b480      	push	{r7}
 8003152:	b087      	sub	sp, #28
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
 800315c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800316a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	021a      	lsls	r2, r3, #8
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	431a      	orrs	r2, r3
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	4313      	orrs	r3, r2
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	4313      	orrs	r3, r2
 800317c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	697a      	ldr	r2, [r7, #20]
 8003182:	609a      	str	r2, [r3, #8]
}
 8003184:	bf00      	nop
 8003186:	371c      	adds	r7, #28
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003190:	b480      	push	{r7}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d101      	bne.n	80031a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031a4:	2302      	movs	r3, #2
 80031a6:	e050      	b.n	800324a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2202      	movs	r2, #2
 80031b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a1c      	ldr	r2, [pc, #112]	; (8003258 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d018      	beq.n	800321e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031f4:	d013      	beq.n	800321e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a18      	ldr	r2, [pc, #96]	; (800325c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d00e      	beq.n	800321e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a16      	ldr	r2, [pc, #88]	; (8003260 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d009      	beq.n	800321e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a15      	ldr	r2, [pc, #84]	; (8003264 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d004      	beq.n	800321e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a13      	ldr	r2, [pc, #76]	; (8003268 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d10c      	bne.n	8003238 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003224:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	4313      	orrs	r3, r2
 800322e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68ba      	ldr	r2, [r7, #8]
 8003236:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	40010000 	.word	0x40010000
 800325c:	40000400 	.word	0x40000400
 8003260:	40000800 	.word	0x40000800
 8003264:	40000c00 	.word	0x40000c00
 8003268:	40014000 	.word	0x40014000

0800326c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e03f      	b.n	8003326 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d106      	bne.n	80032c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7fd ff0c 	bl	80010d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2224      	movs	r2, #36	; 0x24
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68da      	ldr	r2, [r3, #12]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 fc7b 	bl	8003bd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	691a      	ldr	r2, [r3, #16]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	695a      	ldr	r2, [r3, #20]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68da      	ldr	r2, [r3, #12]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800330c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2220      	movs	r2, #32
 8003318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2220      	movs	r2, #32
 8003320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
	...

08003330 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b0ba      	sub	sp, #232	; 0xe8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003356:	2300      	movs	r3, #0
 8003358:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800335c:	2300      	movs	r3, #0
 800335e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003366:	f003 030f 	and.w	r3, r3, #15
 800336a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800336e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10f      	bne.n	8003396 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800337a:	f003 0320 	and.w	r3, r3, #32
 800337e:	2b00      	cmp	r3, #0
 8003380:	d009      	beq.n	8003396 <HAL_UART_IRQHandler+0x66>
 8003382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003386:	f003 0320 	and.w	r3, r3, #32
 800338a:	2b00      	cmp	r3, #0
 800338c:	d003      	beq.n	8003396 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 fb65 	bl	8003a5e <UART_Receive_IT>
      return;
 8003394:	e256      	b.n	8003844 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003396:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800339a:	2b00      	cmp	r3, #0
 800339c:	f000 80de 	beq.w	800355c <HAL_UART_IRQHandler+0x22c>
 80033a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d106      	bne.n	80033ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80033ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033b0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 80d1 	beq.w	800355c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80033ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00b      	beq.n	80033de <HAL_UART_IRQHandler+0xae>
 80033c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d005      	beq.n	80033de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	f043 0201 	orr.w	r2, r3, #1
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033e2:	f003 0304 	and.w	r3, r3, #4
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00b      	beq.n	8003402 <HAL_UART_IRQHandler+0xd2>
 80033ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d005      	beq.n	8003402 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	f043 0202 	orr.w	r2, r3, #2
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00b      	beq.n	8003426 <HAL_UART_IRQHandler+0xf6>
 800340e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b00      	cmp	r3, #0
 8003418:	d005      	beq.n	8003426 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	f043 0204 	orr.w	r2, r3, #4
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800342a:	f003 0308 	and.w	r3, r3, #8
 800342e:	2b00      	cmp	r3, #0
 8003430:	d011      	beq.n	8003456 <HAL_UART_IRQHandler+0x126>
 8003432:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003436:	f003 0320 	and.w	r3, r3, #32
 800343a:	2b00      	cmp	r3, #0
 800343c:	d105      	bne.n	800344a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800343e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b00      	cmp	r3, #0
 8003448:	d005      	beq.n	8003456 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	f043 0208 	orr.w	r2, r3, #8
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	2b00      	cmp	r3, #0
 800345c:	f000 81ed 	beq.w	800383a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003464:	f003 0320 	and.w	r3, r3, #32
 8003468:	2b00      	cmp	r3, #0
 800346a:	d008      	beq.n	800347e <HAL_UART_IRQHandler+0x14e>
 800346c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003470:	f003 0320 	and.w	r3, r3, #32
 8003474:	2b00      	cmp	r3, #0
 8003476:	d002      	beq.n	800347e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 faf0 	bl	8003a5e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	695b      	ldr	r3, [r3, #20]
 8003484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003488:	2b40      	cmp	r3, #64	; 0x40
 800348a:	bf0c      	ite	eq
 800348c:	2301      	moveq	r3, #1
 800348e:	2300      	movne	r3, #0
 8003490:	b2db      	uxtb	r3, r3
 8003492:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	f003 0308 	and.w	r3, r3, #8
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d103      	bne.n	80034aa <HAL_UART_IRQHandler+0x17a>
 80034a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d04f      	beq.n	800354a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f9f8 	bl	80038a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ba:	2b40      	cmp	r3, #64	; 0x40
 80034bc:	d141      	bne.n	8003542 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	3314      	adds	r3, #20
 80034c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80034cc:	e853 3f00 	ldrex	r3, [r3]
 80034d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80034d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80034d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	3314      	adds	r3, #20
 80034e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80034ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80034ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80034f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80034fa:	e841 2300 	strex	r3, r2, [r1]
 80034fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003502:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1d9      	bne.n	80034be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350e:	2b00      	cmp	r3, #0
 8003510:	d013      	beq.n	800353a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003516:	4a7d      	ldr	r2, [pc, #500]	; (800370c <HAL_UART_IRQHandler+0x3dc>)
 8003518:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351e:	4618      	mov	r0, r3
 8003520:	f7fe f9a5 	bl	800186e <HAL_DMA_Abort_IT>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d016      	beq.n	8003558 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003534:	4610      	mov	r0, r2
 8003536:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003538:	e00e      	b.n	8003558 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f99a 	bl	8003874 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003540:	e00a      	b.n	8003558 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f996 	bl	8003874 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003548:	e006      	b.n	8003558 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f992 	bl	8003874 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003556:	e170      	b.n	800383a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003558:	bf00      	nop
    return;
 800355a:	e16e      	b.n	800383a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003560:	2b01      	cmp	r3, #1
 8003562:	f040 814a 	bne.w	80037fa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800356a:	f003 0310 	and.w	r3, r3, #16
 800356e:	2b00      	cmp	r3, #0
 8003570:	f000 8143 	beq.w	80037fa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003578:	f003 0310 	and.w	r3, r3, #16
 800357c:	2b00      	cmp	r3, #0
 800357e:	f000 813c 	beq.w	80037fa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003582:	2300      	movs	r3, #0
 8003584:	60bb      	str	r3, [r7, #8]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	60bb      	str	r3, [r7, #8]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	60bb      	str	r3, [r7, #8]
 8003596:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a2:	2b40      	cmp	r3, #64	; 0x40
 80035a4:	f040 80b4 	bne.w	8003710 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80035b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f000 8140 	beq.w	800383e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80035c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80035c6:	429a      	cmp	r2, r3
 80035c8:	f080 8139 	bcs.w	800383e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80035d2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035de:	f000 8088 	beq.w	80036f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	330c      	adds	r3, #12
 80035e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035f0:	e853 3f00 	ldrex	r3, [r3]
 80035f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80035f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80035fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003600:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	330c      	adds	r3, #12
 800360a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800360e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003612:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003616:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800361a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800361e:	e841 2300 	strex	r3, r2, [r1]
 8003622:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003626:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1d9      	bne.n	80035e2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	3314      	adds	r3, #20
 8003634:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003636:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003638:	e853 3f00 	ldrex	r3, [r3]
 800363c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800363e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003640:	f023 0301 	bic.w	r3, r3, #1
 8003644:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	3314      	adds	r3, #20
 800364e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003652:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003656:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003658:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800365a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800365e:	e841 2300 	strex	r3, r2, [r1]
 8003662:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003664:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1e1      	bne.n	800362e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	3314      	adds	r3, #20
 8003670:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003672:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003674:	e853 3f00 	ldrex	r3, [r3]
 8003678:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800367a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800367c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003680:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	3314      	adds	r3, #20
 800368a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800368e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003690:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003692:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003694:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003696:	e841 2300 	strex	r3, r2, [r1]
 800369a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800369c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1e3      	bne.n	800366a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2220      	movs	r2, #32
 80036a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	330c      	adds	r3, #12
 80036b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036ba:	e853 3f00 	ldrex	r3, [r3]
 80036be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80036c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036c2:	f023 0310 	bic.w	r3, r3, #16
 80036c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	330c      	adds	r3, #12
 80036d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80036d4:	65ba      	str	r2, [r7, #88]	; 0x58
 80036d6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80036da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036dc:	e841 2300 	strex	r3, r2, [r1]
 80036e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80036e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1e3      	bne.n	80036b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7fe f84e 	bl	800178e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	b29b      	uxth	r3, r3
 8003700:	4619      	mov	r1, r3
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f8c0 	bl	8003888 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003708:	e099      	b.n	800383e <HAL_UART_IRQHandler+0x50e>
 800370a:	bf00      	nop
 800370c:	08003967 	.word	0x08003967
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003718:	b29b      	uxth	r3, r3
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003724:	b29b      	uxth	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	f000 808b 	beq.w	8003842 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800372c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003730:	2b00      	cmp	r3, #0
 8003732:	f000 8086 	beq.w	8003842 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	330c      	adds	r3, #12
 800373c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800373e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003740:	e853 3f00 	ldrex	r3, [r3]
 8003744:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003748:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800374c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	330c      	adds	r3, #12
 8003756:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800375a:	647a      	str	r2, [r7, #68]	; 0x44
 800375c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800375e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003760:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003762:	e841 2300 	strex	r3, r2, [r1]
 8003766:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1e3      	bne.n	8003736 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	3314      	adds	r3, #20
 8003774:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003778:	e853 3f00 	ldrex	r3, [r3]
 800377c:	623b      	str	r3, [r7, #32]
   return(result);
 800377e:	6a3b      	ldr	r3, [r7, #32]
 8003780:	f023 0301 	bic.w	r3, r3, #1
 8003784:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	3314      	adds	r3, #20
 800378e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003792:	633a      	str	r2, [r7, #48]	; 0x30
 8003794:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003796:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800379a:	e841 2300 	strex	r3, r2, [r1]
 800379e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80037a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1e3      	bne.n	800376e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2220      	movs	r2, #32
 80037aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	330c      	adds	r3, #12
 80037ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	e853 3f00 	ldrex	r3, [r3]
 80037c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f023 0310 	bic.w	r3, r3, #16
 80037ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	330c      	adds	r3, #12
 80037d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80037d8:	61fa      	str	r2, [r7, #28]
 80037da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037dc:	69b9      	ldr	r1, [r7, #24]
 80037de:	69fa      	ldr	r2, [r7, #28]
 80037e0:	e841 2300 	strex	r3, r2, [r1]
 80037e4:	617b      	str	r3, [r7, #20]
   return(result);
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1e3      	bne.n	80037b4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80037ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80037f0:	4619      	mov	r1, r3
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f848 	bl	8003888 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80037f8:	e023      	b.n	8003842 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80037fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003802:	2b00      	cmp	r3, #0
 8003804:	d009      	beq.n	800381a <HAL_UART_IRQHandler+0x4ea>
 8003806:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800380a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f8bb 	bl	800398e <UART_Transmit_IT>
    return;
 8003818:	e014      	b.n	8003844 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800381a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800381e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00e      	beq.n	8003844 <HAL_UART_IRQHandler+0x514>
 8003826:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800382a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800382e:	2b00      	cmp	r3, #0
 8003830:	d008      	beq.n	8003844 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f8fb 	bl	8003a2e <UART_EndTransmit_IT>
    return;
 8003838:	e004      	b.n	8003844 <HAL_UART_IRQHandler+0x514>
    return;
 800383a:	bf00      	nop
 800383c:	e002      	b.n	8003844 <HAL_UART_IRQHandler+0x514>
      return;
 800383e:	bf00      	nop
 8003840:	e000      	b.n	8003844 <HAL_UART_IRQHandler+0x514>
      return;
 8003842:	bf00      	nop
  }
}
 8003844:	37e8      	adds	r7, #232	; 0xe8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop

0800384c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	460b      	mov	r3, r1
 8003892:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b095      	sub	sp, #84	; 0x54
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	330c      	adds	r3, #12
 80038ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038b2:	e853 3f00 	ldrex	r3, [r3]
 80038b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80038b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	330c      	adds	r3, #12
 80038c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80038c8:	643a      	str	r2, [r7, #64]	; 0x40
 80038ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80038ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80038d0:	e841 2300 	strex	r3, r2, [r1]
 80038d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1e5      	bne.n	80038a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	3314      	adds	r3, #20
 80038e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e4:	6a3b      	ldr	r3, [r7, #32]
 80038e6:	e853 3f00 	ldrex	r3, [r3]
 80038ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	f023 0301 	bic.w	r3, r3, #1
 80038f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	3314      	adds	r3, #20
 80038fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003900:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003902:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003904:	e841 2300 	strex	r3, r2, [r1]
 8003908:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1e5      	bne.n	80038dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003914:	2b01      	cmp	r3, #1
 8003916:	d119      	bne.n	800394c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	330c      	adds	r3, #12
 800391e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	e853 3f00 	ldrex	r3, [r3]
 8003926:	60bb      	str	r3, [r7, #8]
   return(result);
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	f023 0310 	bic.w	r3, r3, #16
 800392e:	647b      	str	r3, [r7, #68]	; 0x44
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	330c      	adds	r3, #12
 8003936:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003938:	61ba      	str	r2, [r7, #24]
 800393a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393c:	6979      	ldr	r1, [r7, #20]
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	e841 2300 	strex	r3, r2, [r1]
 8003944:	613b      	str	r3, [r7, #16]
   return(result);
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1e5      	bne.n	8003918 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2220      	movs	r2, #32
 8003950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	631a      	str	r2, [r3, #48]	; 0x30
}
 800395a:	bf00      	nop
 800395c:	3754      	adds	r7, #84	; 0x54
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr

08003966 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b084      	sub	sp, #16
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003972:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f7ff ff77 	bl	8003874 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003986:	bf00      	nop
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800398e:	b480      	push	{r7}
 8003990:	b085      	sub	sp, #20
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b21      	cmp	r3, #33	; 0x21
 80039a0:	d13e      	bne.n	8003a20 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039aa:	d114      	bne.n	80039d6 <UART_Transmit_IT+0x48>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d110      	bne.n	80039d6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	881b      	ldrh	r3, [r3, #0]
 80039be:	461a      	mov	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	1c9a      	adds	r2, r3, #2
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	621a      	str	r2, [r3, #32]
 80039d4:	e008      	b.n	80039e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	1c59      	adds	r1, r3, #1
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	6211      	str	r1, [r2, #32]
 80039e0:	781a      	ldrb	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	3b01      	subs	r3, #1
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	4619      	mov	r1, r3
 80039f6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10f      	bne.n	8003a1c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68da      	ldr	r2, [r3, #12]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a0a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68da      	ldr	r2, [r3, #12]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a1a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	e000      	b.n	8003a22 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003a20:	2302      	movs	r3, #2
  }
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3714      	adds	r7, #20
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr

08003a2e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b082      	sub	sp, #8
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68da      	ldr	r2, [r3, #12]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a44:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2220      	movs	r2, #32
 8003a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f7ff fefc 	bl	800384c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b08c      	sub	sp, #48	; 0x30
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b22      	cmp	r3, #34	; 0x22
 8003a70:	f040 80ab 	bne.w	8003bca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a7c:	d117      	bne.n	8003aae <UART_Receive_IT+0x50>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d113      	bne.n	8003aae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003a86:	2300      	movs	r3, #0
 8003a88:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa6:	1c9a      	adds	r2, r3, #2
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	629a      	str	r2, [r3, #40]	; 0x28
 8003aac:	e026      	b.n	8003afc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ac0:	d007      	beq.n	8003ad2 <UART_Receive_IT+0x74>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10a      	bne.n	8003ae0 <UART_Receive_IT+0x82>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d106      	bne.n	8003ae0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	b2da      	uxtb	r2, r3
 8003ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003adc:	701a      	strb	r2, [r3, #0]
 8003ade:	e008      	b.n	8003af2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003aec:	b2da      	uxtb	r2, r3
 8003aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af6:	1c5a      	adds	r2, r3, #1
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	3b01      	subs	r3, #1
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	4619      	mov	r1, r3
 8003b0a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d15a      	bne.n	8003bc6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68da      	ldr	r2, [r3, #12]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0220 	bic.w	r2, r2, #32
 8003b1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68da      	ldr	r2, [r3, #12]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	695a      	ldr	r2, [r3, #20]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 0201 	bic.w	r2, r2, #1
 8003b3e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2220      	movs	r2, #32
 8003b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d135      	bne.n	8003bbc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	330c      	adds	r3, #12
 8003b5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	e853 3f00 	ldrex	r3, [r3]
 8003b64:	613b      	str	r3, [r7, #16]
   return(result);
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	f023 0310 	bic.w	r3, r3, #16
 8003b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	330c      	adds	r3, #12
 8003b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b76:	623a      	str	r2, [r7, #32]
 8003b78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7a:	69f9      	ldr	r1, [r7, #28]
 8003b7c:	6a3a      	ldr	r2, [r7, #32]
 8003b7e:	e841 2300 	strex	r3, r2, [r1]
 8003b82:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1e5      	bne.n	8003b56 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0310 	and.w	r3, r3, #16
 8003b94:	2b10      	cmp	r3, #16
 8003b96:	d10a      	bne.n	8003bae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b98:	2300      	movs	r3, #0
 8003b9a:	60fb      	str	r3, [r7, #12]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	60fb      	str	r3, [r7, #12]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	60fb      	str	r3, [r7, #12]
 8003bac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f7ff fe67 	bl	8003888 <HAL_UARTEx_RxEventCallback>
 8003bba:	e002      	b.n	8003bc2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f7ff fe4f 	bl	8003860 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	e002      	b.n	8003bcc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	e000      	b.n	8003bcc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003bca:	2302      	movs	r3, #2
  }
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3730      	adds	r7, #48	; 0x30
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bd8:	b0c0      	sub	sp, #256	; 0x100
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf0:	68d9      	ldr	r1, [r3, #12]
 8003bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	ea40 0301 	orr.w	r3, r0, r1
 8003bfc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	431a      	orrs	r2, r3
 8003c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c18:	69db      	ldr	r3, [r3, #28]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003c2c:	f021 010c 	bic.w	r1, r1, #12
 8003c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c3a:	430b      	orrs	r3, r1
 8003c3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c4e:	6999      	ldr	r1, [r3, #24]
 8003c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	ea40 0301 	orr.w	r3, r0, r1
 8003c5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	4b8f      	ldr	r3, [pc, #572]	; (8003ea0 <UART_SetConfig+0x2cc>)
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d005      	beq.n	8003c74 <UART_SetConfig+0xa0>
 8003c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	4b8d      	ldr	r3, [pc, #564]	; (8003ea4 <UART_SetConfig+0x2d0>)
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d104      	bne.n	8003c7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c74:	f7fe fc1a 	bl	80024ac <HAL_RCC_GetPCLK2Freq>
 8003c78:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003c7c:	e003      	b.n	8003c86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c7e:	f7fe fc01 	bl	8002484 <HAL_RCC_GetPCLK1Freq>
 8003c82:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c8a:	69db      	ldr	r3, [r3, #28]
 8003c8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c90:	f040 810c 	bne.w	8003eac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003c9e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003ca2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003ca6:	4622      	mov	r2, r4
 8003ca8:	462b      	mov	r3, r5
 8003caa:	1891      	adds	r1, r2, r2
 8003cac:	65b9      	str	r1, [r7, #88]	; 0x58
 8003cae:	415b      	adcs	r3, r3
 8003cb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cb2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003cb6:	4621      	mov	r1, r4
 8003cb8:	eb12 0801 	adds.w	r8, r2, r1
 8003cbc:	4629      	mov	r1, r5
 8003cbe:	eb43 0901 	adc.w	r9, r3, r1
 8003cc2:	f04f 0200 	mov.w	r2, #0
 8003cc6:	f04f 0300 	mov.w	r3, #0
 8003cca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cd6:	4690      	mov	r8, r2
 8003cd8:	4699      	mov	r9, r3
 8003cda:	4623      	mov	r3, r4
 8003cdc:	eb18 0303 	adds.w	r3, r8, r3
 8003ce0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003ce4:	462b      	mov	r3, r5
 8003ce6:	eb49 0303 	adc.w	r3, r9, r3
 8003cea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003cfa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003cfe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003d02:	460b      	mov	r3, r1
 8003d04:	18db      	adds	r3, r3, r3
 8003d06:	653b      	str	r3, [r7, #80]	; 0x50
 8003d08:	4613      	mov	r3, r2
 8003d0a:	eb42 0303 	adc.w	r3, r2, r3
 8003d0e:	657b      	str	r3, [r7, #84]	; 0x54
 8003d10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003d14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003d18:	f7fc fab2 	bl	8000280 <__aeabi_uldivmod>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	460b      	mov	r3, r1
 8003d20:	4b61      	ldr	r3, [pc, #388]	; (8003ea8 <UART_SetConfig+0x2d4>)
 8003d22:	fba3 2302 	umull	r2, r3, r3, r2
 8003d26:	095b      	lsrs	r3, r3, #5
 8003d28:	011c      	lsls	r4, r3, #4
 8003d2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d34:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003d38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003d3c:	4642      	mov	r2, r8
 8003d3e:	464b      	mov	r3, r9
 8003d40:	1891      	adds	r1, r2, r2
 8003d42:	64b9      	str	r1, [r7, #72]	; 0x48
 8003d44:	415b      	adcs	r3, r3
 8003d46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d4c:	4641      	mov	r1, r8
 8003d4e:	eb12 0a01 	adds.w	sl, r2, r1
 8003d52:	4649      	mov	r1, r9
 8003d54:	eb43 0b01 	adc.w	fp, r3, r1
 8003d58:	f04f 0200 	mov.w	r2, #0
 8003d5c:	f04f 0300 	mov.w	r3, #0
 8003d60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d6c:	4692      	mov	sl, r2
 8003d6e:	469b      	mov	fp, r3
 8003d70:	4643      	mov	r3, r8
 8003d72:	eb1a 0303 	adds.w	r3, sl, r3
 8003d76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d7a:	464b      	mov	r3, r9
 8003d7c:	eb4b 0303 	adc.w	r3, fp, r3
 8003d80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d90:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003d94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003d98:	460b      	mov	r3, r1
 8003d9a:	18db      	adds	r3, r3, r3
 8003d9c:	643b      	str	r3, [r7, #64]	; 0x40
 8003d9e:	4613      	mov	r3, r2
 8003da0:	eb42 0303 	adc.w	r3, r2, r3
 8003da4:	647b      	str	r3, [r7, #68]	; 0x44
 8003da6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003daa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003dae:	f7fc fa67 	bl	8000280 <__aeabi_uldivmod>
 8003db2:	4602      	mov	r2, r0
 8003db4:	460b      	mov	r3, r1
 8003db6:	4611      	mov	r1, r2
 8003db8:	4b3b      	ldr	r3, [pc, #236]	; (8003ea8 <UART_SetConfig+0x2d4>)
 8003dba:	fba3 2301 	umull	r2, r3, r3, r1
 8003dbe:	095b      	lsrs	r3, r3, #5
 8003dc0:	2264      	movs	r2, #100	; 0x64
 8003dc2:	fb02 f303 	mul.w	r3, r2, r3
 8003dc6:	1acb      	subs	r3, r1, r3
 8003dc8:	00db      	lsls	r3, r3, #3
 8003dca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003dce:	4b36      	ldr	r3, [pc, #216]	; (8003ea8 <UART_SetConfig+0x2d4>)
 8003dd0:	fba3 2302 	umull	r2, r3, r3, r2
 8003dd4:	095b      	lsrs	r3, r3, #5
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ddc:	441c      	add	r4, r3
 8003dde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003de2:	2200      	movs	r2, #0
 8003de4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003de8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003dec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003df0:	4642      	mov	r2, r8
 8003df2:	464b      	mov	r3, r9
 8003df4:	1891      	adds	r1, r2, r2
 8003df6:	63b9      	str	r1, [r7, #56]	; 0x38
 8003df8:	415b      	adcs	r3, r3
 8003dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dfc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e00:	4641      	mov	r1, r8
 8003e02:	1851      	adds	r1, r2, r1
 8003e04:	6339      	str	r1, [r7, #48]	; 0x30
 8003e06:	4649      	mov	r1, r9
 8003e08:	414b      	adcs	r3, r1
 8003e0a:	637b      	str	r3, [r7, #52]	; 0x34
 8003e0c:	f04f 0200 	mov.w	r2, #0
 8003e10:	f04f 0300 	mov.w	r3, #0
 8003e14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003e18:	4659      	mov	r1, fp
 8003e1a:	00cb      	lsls	r3, r1, #3
 8003e1c:	4651      	mov	r1, sl
 8003e1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e22:	4651      	mov	r1, sl
 8003e24:	00ca      	lsls	r2, r1, #3
 8003e26:	4610      	mov	r0, r2
 8003e28:	4619      	mov	r1, r3
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	4642      	mov	r2, r8
 8003e2e:	189b      	adds	r3, r3, r2
 8003e30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e34:	464b      	mov	r3, r9
 8003e36:	460a      	mov	r2, r1
 8003e38:	eb42 0303 	adc.w	r3, r2, r3
 8003e3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e4c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003e50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003e54:	460b      	mov	r3, r1
 8003e56:	18db      	adds	r3, r3, r3
 8003e58:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	eb42 0303 	adc.w	r3, r2, r3
 8003e60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003e6a:	f7fc fa09 	bl	8000280 <__aeabi_uldivmod>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	460b      	mov	r3, r1
 8003e72:	4b0d      	ldr	r3, [pc, #52]	; (8003ea8 <UART_SetConfig+0x2d4>)
 8003e74:	fba3 1302 	umull	r1, r3, r3, r2
 8003e78:	095b      	lsrs	r3, r3, #5
 8003e7a:	2164      	movs	r1, #100	; 0x64
 8003e7c:	fb01 f303 	mul.w	r3, r1, r3
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	3332      	adds	r3, #50	; 0x32
 8003e86:	4a08      	ldr	r2, [pc, #32]	; (8003ea8 <UART_SetConfig+0x2d4>)
 8003e88:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8c:	095b      	lsrs	r3, r3, #5
 8003e8e:	f003 0207 	and.w	r2, r3, #7
 8003e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4422      	add	r2, r4
 8003e9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e9c:	e105      	b.n	80040aa <UART_SetConfig+0x4d6>
 8003e9e:	bf00      	nop
 8003ea0:	40011000 	.word	0x40011000
 8003ea4:	40011400 	.word	0x40011400
 8003ea8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003eac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003eb6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003eba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003ebe:	4642      	mov	r2, r8
 8003ec0:	464b      	mov	r3, r9
 8003ec2:	1891      	adds	r1, r2, r2
 8003ec4:	6239      	str	r1, [r7, #32]
 8003ec6:	415b      	adcs	r3, r3
 8003ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8003eca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ece:	4641      	mov	r1, r8
 8003ed0:	1854      	adds	r4, r2, r1
 8003ed2:	4649      	mov	r1, r9
 8003ed4:	eb43 0501 	adc.w	r5, r3, r1
 8003ed8:	f04f 0200 	mov.w	r2, #0
 8003edc:	f04f 0300 	mov.w	r3, #0
 8003ee0:	00eb      	lsls	r3, r5, #3
 8003ee2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ee6:	00e2      	lsls	r2, r4, #3
 8003ee8:	4614      	mov	r4, r2
 8003eea:	461d      	mov	r5, r3
 8003eec:	4643      	mov	r3, r8
 8003eee:	18e3      	adds	r3, r4, r3
 8003ef0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ef4:	464b      	mov	r3, r9
 8003ef6:	eb45 0303 	adc.w	r3, r5, r3
 8003efa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003f0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f0e:	f04f 0200 	mov.w	r2, #0
 8003f12:	f04f 0300 	mov.w	r3, #0
 8003f16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003f1a:	4629      	mov	r1, r5
 8003f1c:	008b      	lsls	r3, r1, #2
 8003f1e:	4621      	mov	r1, r4
 8003f20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f24:	4621      	mov	r1, r4
 8003f26:	008a      	lsls	r2, r1, #2
 8003f28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003f2c:	f7fc f9a8 	bl	8000280 <__aeabi_uldivmod>
 8003f30:	4602      	mov	r2, r0
 8003f32:	460b      	mov	r3, r1
 8003f34:	4b60      	ldr	r3, [pc, #384]	; (80040b8 <UART_SetConfig+0x4e4>)
 8003f36:	fba3 2302 	umull	r2, r3, r3, r2
 8003f3a:	095b      	lsrs	r3, r3, #5
 8003f3c:	011c      	lsls	r4, r3, #4
 8003f3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f42:	2200      	movs	r2, #0
 8003f44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003f4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003f50:	4642      	mov	r2, r8
 8003f52:	464b      	mov	r3, r9
 8003f54:	1891      	adds	r1, r2, r2
 8003f56:	61b9      	str	r1, [r7, #24]
 8003f58:	415b      	adcs	r3, r3
 8003f5a:	61fb      	str	r3, [r7, #28]
 8003f5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f60:	4641      	mov	r1, r8
 8003f62:	1851      	adds	r1, r2, r1
 8003f64:	6139      	str	r1, [r7, #16]
 8003f66:	4649      	mov	r1, r9
 8003f68:	414b      	adcs	r3, r1
 8003f6a:	617b      	str	r3, [r7, #20]
 8003f6c:	f04f 0200 	mov.w	r2, #0
 8003f70:	f04f 0300 	mov.w	r3, #0
 8003f74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f78:	4659      	mov	r1, fp
 8003f7a:	00cb      	lsls	r3, r1, #3
 8003f7c:	4651      	mov	r1, sl
 8003f7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f82:	4651      	mov	r1, sl
 8003f84:	00ca      	lsls	r2, r1, #3
 8003f86:	4610      	mov	r0, r2
 8003f88:	4619      	mov	r1, r3
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	4642      	mov	r2, r8
 8003f8e:	189b      	adds	r3, r3, r2
 8003f90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f94:	464b      	mov	r3, r9
 8003f96:	460a      	mov	r2, r1
 8003f98:	eb42 0303 	adc.w	r3, r2, r3
 8003f9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	67bb      	str	r3, [r7, #120]	; 0x78
 8003faa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003fac:	f04f 0200 	mov.w	r2, #0
 8003fb0:	f04f 0300 	mov.w	r3, #0
 8003fb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003fb8:	4649      	mov	r1, r9
 8003fba:	008b      	lsls	r3, r1, #2
 8003fbc:	4641      	mov	r1, r8
 8003fbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fc2:	4641      	mov	r1, r8
 8003fc4:	008a      	lsls	r2, r1, #2
 8003fc6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003fca:	f7fc f959 	bl	8000280 <__aeabi_uldivmod>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	4b39      	ldr	r3, [pc, #228]	; (80040b8 <UART_SetConfig+0x4e4>)
 8003fd4:	fba3 1302 	umull	r1, r3, r3, r2
 8003fd8:	095b      	lsrs	r3, r3, #5
 8003fda:	2164      	movs	r1, #100	; 0x64
 8003fdc:	fb01 f303 	mul.w	r3, r1, r3
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	011b      	lsls	r3, r3, #4
 8003fe4:	3332      	adds	r3, #50	; 0x32
 8003fe6:	4a34      	ldr	r2, [pc, #208]	; (80040b8 <UART_SetConfig+0x4e4>)
 8003fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fec:	095b      	lsrs	r3, r3, #5
 8003fee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ff2:	441c      	add	r4, r3
 8003ff4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	673b      	str	r3, [r7, #112]	; 0x70
 8003ffc:	677a      	str	r2, [r7, #116]	; 0x74
 8003ffe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004002:	4642      	mov	r2, r8
 8004004:	464b      	mov	r3, r9
 8004006:	1891      	adds	r1, r2, r2
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	415b      	adcs	r3, r3
 800400c:	60fb      	str	r3, [r7, #12]
 800400e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004012:	4641      	mov	r1, r8
 8004014:	1851      	adds	r1, r2, r1
 8004016:	6039      	str	r1, [r7, #0]
 8004018:	4649      	mov	r1, r9
 800401a:	414b      	adcs	r3, r1
 800401c:	607b      	str	r3, [r7, #4]
 800401e:	f04f 0200 	mov.w	r2, #0
 8004022:	f04f 0300 	mov.w	r3, #0
 8004026:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800402a:	4659      	mov	r1, fp
 800402c:	00cb      	lsls	r3, r1, #3
 800402e:	4651      	mov	r1, sl
 8004030:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004034:	4651      	mov	r1, sl
 8004036:	00ca      	lsls	r2, r1, #3
 8004038:	4610      	mov	r0, r2
 800403a:	4619      	mov	r1, r3
 800403c:	4603      	mov	r3, r0
 800403e:	4642      	mov	r2, r8
 8004040:	189b      	adds	r3, r3, r2
 8004042:	66bb      	str	r3, [r7, #104]	; 0x68
 8004044:	464b      	mov	r3, r9
 8004046:	460a      	mov	r2, r1
 8004048:	eb42 0303 	adc.w	r3, r2, r3
 800404c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800404e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	663b      	str	r3, [r7, #96]	; 0x60
 8004058:	667a      	str	r2, [r7, #100]	; 0x64
 800405a:	f04f 0200 	mov.w	r2, #0
 800405e:	f04f 0300 	mov.w	r3, #0
 8004062:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004066:	4649      	mov	r1, r9
 8004068:	008b      	lsls	r3, r1, #2
 800406a:	4641      	mov	r1, r8
 800406c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004070:	4641      	mov	r1, r8
 8004072:	008a      	lsls	r2, r1, #2
 8004074:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004078:	f7fc f902 	bl	8000280 <__aeabi_uldivmod>
 800407c:	4602      	mov	r2, r0
 800407e:	460b      	mov	r3, r1
 8004080:	4b0d      	ldr	r3, [pc, #52]	; (80040b8 <UART_SetConfig+0x4e4>)
 8004082:	fba3 1302 	umull	r1, r3, r3, r2
 8004086:	095b      	lsrs	r3, r3, #5
 8004088:	2164      	movs	r1, #100	; 0x64
 800408a:	fb01 f303 	mul.w	r3, r1, r3
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	011b      	lsls	r3, r3, #4
 8004092:	3332      	adds	r3, #50	; 0x32
 8004094:	4a08      	ldr	r2, [pc, #32]	; (80040b8 <UART_SetConfig+0x4e4>)
 8004096:	fba2 2303 	umull	r2, r3, r2, r3
 800409a:	095b      	lsrs	r3, r3, #5
 800409c:	f003 020f 	and.w	r2, r3, #15
 80040a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4422      	add	r2, r4
 80040a8:	609a      	str	r2, [r3, #8]
}
 80040aa:	bf00      	nop
 80040ac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80040b0:	46bd      	mov	sp, r7
 80040b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040b6:	bf00      	nop
 80040b8:	51eb851f 	.word	0x51eb851f

080040bc <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 80040c0:	f003 fe20 	bl	8007d04 <touchgfx_components_init>
  touchgfx_init();
 80040c4:	f003 fdf4 	bl	8007cb0 <touchgfx_init>
}
 80040c8:	bf00      	nop
 80040ca:	bd80      	pop	{r7, pc}

080040cc <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 80040d0:	f003 fe20 	bl	8007d14 <touchgfx_taskEntry>
}
 80040d4:	bf00      	nop
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
    {
 80040e0:	4a04      	ldr	r2, [pc, #16]	; (80040f4 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	601a      	str	r2, [r3, #0]
    }
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4618      	mov	r0, r3
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr
 80040f4:	08011a54 	.word	0x08011a54

080040f8 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
    }
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f7ff ffe9 	bl	80040d8 <_ZN8touchgfx12FontProviderD1Ev>
 8004106:	2104      	movs	r1, #4
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f00b fbc3 	bl	800f894 <_ZdlPvj>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4618      	mov	r0, r3
 8004112:	3708      	adds	r7, #8
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	460b      	mov	r3, r1
 8004122:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8004124:	887b      	ldrh	r3, [r7, #2]
 8004126:	2b03      	cmp	r3, #3
 8004128:	d81e      	bhi.n	8004168 <_ZN23ApplicationFontProvider7getFontEt+0x50>
 800412a:	a201      	add	r2, pc, #4	; (adr r2, 8004130 <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 800412c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004130:	08004141 	.word	0x08004141
 8004134:	0800414b 	.word	0x0800414b
 8004138:	08004155 	.word	0x08004155
 800413c:	0800415f 	.word	0x0800415f
    {
    case Typography::DEFAULT:
        // ChicagoFLF_20_1bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8004140:	f002 fb18 	bl	8006774 <_ZN17TypedTextDatabase8getFontsEv>
 8004144:	4603      	mov	r3, r0
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	e00f      	b.n	800416a <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::LARGE:
        // verdana_40_1bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800414a:	f002 fb13 	bl	8006774 <_ZN17TypedTextDatabase8getFontsEv>
 800414e:	4603      	mov	r3, r0
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	e00a      	b.n	800416a <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::SMALL:
        // ChicagoFLF_11_1bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8004154:	f002 fb0e 	bl	8006774 <_ZN17TypedTextDatabase8getFontsEv>
 8004158:	4603      	mov	r3, r0
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	e005      	b.n	800416a <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::FPS:
        // trebucbd_40_1bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 800415e:	f002 fb09 	bl	8006774 <_ZN17TypedTextDatabase8getFontsEv>
 8004162:	4603      	mov	r3, r0
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	e000      	b.n	800416a <_ZN23ApplicationFontProvider7getFontEt+0x52>
    default:
        return 0;
 8004168:	2300      	movs	r3, #0
    }
}
 800416a:	4618      	mov	r0, r3
 800416c:	3708      	adds	r7, #8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop

08004174 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SMALL = 2;   // ChicagoFLF_11_1bpp
    static const touchgfx::FontId FPS = 3;     // trebucbd_40_1bpp
    static const uint16_t NUMBER_OF_FONTS = 4;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	4a05      	ldr	r2, [pc, #20]	; (8004194 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	601a      	str	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4618      	mov	r0, r3
 8004186:	f7ff ffa7 	bl	80040d8 <_ZN8touchgfx12FontProviderD1Ev>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4618      	mov	r0, r3
 800418e:	3708      	adds	r7, #8
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	08011a40 	.word	0x08011a40

08004198 <_ZN23ApplicationFontProviderD0Ev>:
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7ff ffe7 	bl	8004174 <_ZN23ApplicationFontProviderD1Ev>
 80041a6:	2104      	movs	r1, #4
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f00b fb73 	bl	800f894 <_ZdlPvj>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4618      	mov	r0, r3
 80041b2:	3708      	adds	r7, #8
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
    {
 80041c0:	4a04      	ldr	r2, [pc, #16]	; (80041d4 <_ZN8touchgfx4FontD1Ev+0x1c>)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	601a      	str	r2, [r3, #0]
    }
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4618      	mov	r0, r3
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	08011eac 	.word	0x08011eac

080041d8 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
    }
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f7ff ffe9 	bl	80041b8 <_ZN8touchgfx4FontD1Ev>
 80041e6:	2114      	movs	r1, #20
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f00b fb53 	bl	800f894 <_ZdlPvj>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4618      	mov	r0, r3
 80041f2:	3708      	adds	r7, #8
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 80041f8:	b590      	push	{r4, r7, lr}
 80041fa:	b087      	sub	sp, #28
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	460b      	mov	r3, r1
 8004202:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 8004204:	887b      	ldrh	r3, [r7, #2]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800420a:	2300      	movs	r3, #0
 800420c:	e010      	b.n	8004230 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800420e:	2300      	movs	r3, #0
 8004210:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8004212:	2300      	movs	r3, #0
 8004214:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	3308      	adds	r3, #8
 800421c:	681c      	ldr	r4, [r3, #0]
 800421e:	f107 030f 	add.w	r3, r7, #15
 8004222:	f107 0210 	add.w	r2, r7, #16
 8004226:	8879      	ldrh	r1, [r7, #2]
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	47a0      	blx	r4
 800422c:	6178      	str	r0, [r7, #20]
        return glyph;
 800422e:	697b      	ldr	r3, [r7, #20]
    }
 8004230:	4618      	mov	r0, r3
 8004232:	371c      	adds	r7, #28
 8004234:	46bd      	mov	sp, r7
 8004236:	bd90      	pop	{r4, r7, pc}

08004238 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	89db      	ldrh	r3, [r3, #14]
    }
 8004244:	4618      	mov	r0, r3
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	8a1b      	ldrh	r3, [r3, #16]
    }
 800425c:	4618      	mov	r0, r3
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	88db      	ldrh	r3, [r3, #6]
    }
 8004274:	4618      	mov	r0, r3
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	889b      	ldrh	r3, [r3, #4]
    }
 800428c:	4618      	mov	r0, r3
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	7a9b      	ldrb	r3, [r3, #10]
 80042a4:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80042a8:	b2db      	uxtb	r3, r3
    }
 80042aa:	4618      	mov	r0, r3
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 80042b6:	b480      	push	{r7}
 80042b8:	b083      	sub	sp, #12
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	7a9b      	ldrb	r3, [r3, #10]
 80042c2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80042c6:	b2db      	uxtb	r3, r3
    }
 80042c8:	4618      	mov	r0, r3
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	4a05      	ldr	r2, [pc, #20]	; (80042f4 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	601a      	str	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7ff ff67 	bl	80041b8 <_ZN8touchgfx4FontD1Ev>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4618      	mov	r0, r3
 80042ee:	3708      	adds	r7, #8
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	080128d8 	.word	0x080128d8

080042f8 <_ZN8touchgfx9ConstFontD0Ev>:
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f7ff ffe7 	bl	80042d4 <_ZN8touchgfx9ConstFontD1Ev>
 8004306:	211c      	movs	r1, #28
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f00b fac3 	bl	800f894 <_ZdlPvj>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4618      	mov	r0, r3
 8004312:	3708      	adds	r7, #8
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	4a05      	ldr	r2, [pc, #20]	; (8004338 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	601a      	str	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4618      	mov	r0, r3
 800432a:	f7ff ffd3 	bl	80042d4 <_ZN8touchgfx9ConstFontD1Ev>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4618      	mov	r0, r3
 8004332:	3708      	adds	r7, #8
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	08011a78 	.word	0x08011a78

0800433c <_ZN8touchgfx13GeneratedFontD0Ev>:
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f7ff ffe7 	bl	8004318 <_ZN8touchgfx13GeneratedFontD1Ev>
 800434a:	212c      	movs	r1, #44	; 0x2c
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f00b faa1 	bl	800f894 <_ZdlPvj>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4618      	mov	r0, r3
 8004356:	3708      	adds	r7, #8
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
    {
 8004364:	4a04      	ldr	r2, [pc, #16]	; (8004378 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	601a      	str	r2, [r3, #0]
    }
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4618      	mov	r0, r3
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr
 8004378:	08011a68 	.word	0x08011a68

0800437c <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
    }
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f7ff ffe9 	bl	800435c <_ZN8touchgfx9TypedTextD1Ev>
 800438a:	2108      	movs	r1, #8
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f00b fa81 	bl	800f894 <_ZdlPvj>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4618      	mov	r0, r3
 8004396:	3708      	adds	r7, #8
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 80043a8:	4618      	mov	r0, r3
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 80043c0:	4618      	mov	r0, r3
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b08e      	sub	sp, #56	; 0x38
 80043d0:	af0a      	add	r7, sp, #40	; 0x28
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	4611      	mov	r1, r2
 80043d8:	461a      	mov	r2, r3
 80043da:	460b      	mov	r3, r1
 80043dc:	80fb      	strh	r3, [r7, #6]
 80043de:	4613      	mov	r3, r2
 80043e0:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	88b9      	ldrh	r1, [r7, #4]
 80043e6:	88fa      	ldrh	r2, [r7, #6]
 80043e8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80043ec:	9308      	str	r3, [sp, #32]
 80043ee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80043f0:	9307      	str	r3, [sp, #28]
 80043f2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80043f6:	9306      	str	r3, [sp, #24]
 80043f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80043fc:	9305      	str	r3, [sp, #20]
 80043fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004402:	9304      	str	r3, [sp, #16]
 8004404:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004408:	9303      	str	r3, [sp, #12]
 800440a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800440e:	9302      	str	r3, [sp, #8]
 8004410:	7f3b      	ldrb	r3, [r7, #28]
 8004412:	9301      	str	r3, [sp, #4]
 8004414:	8b3b      	ldrh	r3, [r7, #24]
 8004416:	9300      	str	r3, [sp, #0]
 8004418:	460b      	mov	r3, r1
 800441a:	68b9      	ldr	r1, [r7, #8]
 800441c:	f008 fa74 	bl	800c908 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8004420:	4a09      	ldr	r2, [pc, #36]	; (8004448 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	601a      	str	r2, [r3, #0]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800442a:	61da      	str	r2, [r3, #28]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004430:	621a      	str	r2, [r3, #32]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004436:	625a      	str	r2, [r3, #36]	; 0x24
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800443c:	629a      	str	r2, [r3, #40]	; 0x28
{
}
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	4618      	mov	r0, r3
 8004442:	3710      	adds	r7, #16
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	08011a78 	.word	0x08011a78

0800444c <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	69db      	ldr	r3, [r3, #28]
 800445a:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	889b      	ldrh	r3, [r3, #4]
 8004460:	0adb      	lsrs	r3, r3, #11
 8004462:	b29b      	uxth	r3, r3
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	4413      	add	r3, r2
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4413      	add	r3, r2
}
 8004472:	4618      	mov	r0, r3
 8004474:	3714      	adds	r7, #20
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr

0800447e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800447e:	b480      	push	{r7}
 8004480:	b089      	sub	sp, #36	; 0x24
 8004482:	af00      	add	r7, sp, #0
 8004484:	60f8      	str	r0, [r7, #12]
 8004486:	460b      	mov	r3, r1
 8004488:	607a      	str	r2, [r7, #4]
 800448a:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	7b1b      	ldrb	r3, [r3, #12]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800449a:	2300      	movs	r3, #0
 800449c:	e030      	b.n	8004500 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6a1a      	ldr	r2, [r3, #32]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	7b5b      	ldrb	r3, [r3, #13]
 80044aa:	021b      	lsls	r3, r3, #8
 80044ac:	b21b      	sxth	r3, r3
 80044ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80044b2:	b219      	sxth	r1, r3
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	7adb      	ldrb	r3, [r3, #11]
 80044b8:	b21b      	sxth	r3, r3
 80044ba:	430b      	orrs	r3, r1
 80044bc:	b21b      	sxth	r3, r3
 80044be:	b29b      	uxth	r3, r3
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	4413      	add	r3, r2
 80044c4:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	7b1b      	ldrb	r3, [r3, #12]
 80044ca:	837b      	strh	r3, [r7, #26]
 80044cc:	8b7b      	ldrh	r3, [r7, #26]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d015      	beq.n	80044fe <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	881b      	ldrh	r3, [r3, #0]
 80044d6:	897a      	ldrh	r2, [r7, #10]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d103      	bne.n	80044e4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80044e2:	e00d      	b.n	8004500 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	881b      	ldrh	r3, [r3, #0]
 80044e8:	897a      	ldrh	r2, [r7, #10]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d306      	bcc.n	80044fc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80044ee:	8b7b      	ldrh	r3, [r7, #26]
 80044f0:	3b01      	subs	r3, #1
 80044f2:	837b      	strh	r3, [r7, #26]
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	3304      	adds	r3, #4
 80044f8:	61fb      	str	r3, [r7, #28]
 80044fa:	e7e7      	b.n	80044cc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 80044fc:	bf00      	nop
        }
    }
    return 0;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3724      	adds	r7, #36	; 0x24
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_ChicagoFLF_11_1bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_ChicagoFLF_11_1bpp();

touchgfx::GeneratedFont& getFont_ChicagoFLF_11_1bpp()
{
    static touchgfx::GeneratedFont ChicagoFLF_11_1bpp(glyphs_ChicagoFLF_11_1bpp, 18, 12, 11, 0, 0, 1, 0, 0, 0, unicodes_ChicagoFLF_11_1bpp, kerning_ChicagoFLF_11_1bpp, 63, 0, 0, 0);
 800450c:	b580      	push	{r7, lr}
 800450e:	af00      	add	r7, sp, #0
 8004510:	4801      	ldr	r0, [pc, #4]	; (8004518 <__tcf_0+0xc>)
 8004512:	f7ff ff01 	bl	8004318 <_ZN8touchgfx13GeneratedFontD1Ev>
 8004516:	bd80      	pop	{r7, pc}
 8004518:	20000da0 	.word	0x20000da0

0800451c <_Z26getFont_ChicagoFLF_11_1bppv>:
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b08e      	sub	sp, #56	; 0x38
 8004520:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont ChicagoFLF_11_1bpp(glyphs_ChicagoFLF_11_1bpp, 18, 12, 11, 0, 0, 1, 0, 0, 0, unicodes_ChicagoFLF_11_1bpp, kerning_ChicagoFLF_11_1bpp, 63, 0, 0, 0);
 8004522:	4b21      	ldr	r3, [pc, #132]	; (80045a8 <_Z26getFont_ChicagoFLF_11_1bppv+0x8c>)
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	f3bf 8f5b 	dmb	ish
 800452a:	b2db      	uxtb	r3, r3
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	2b00      	cmp	r3, #0
 8004532:	bf0c      	ite	eq
 8004534:	2301      	moveq	r3, #1
 8004536:	2300      	movne	r3, #0
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d030      	beq.n	80045a0 <_Z26getFont_ChicagoFLF_11_1bppv+0x84>
 800453e:	481a      	ldr	r0, [pc, #104]	; (80045a8 <_Z26getFont_ChicagoFLF_11_1bppv+0x8c>)
 8004540:	f00b f9aa 	bl	800f898 <__cxa_guard_acquire>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	bf14      	ite	ne
 800454a:	2301      	movne	r3, #1
 800454c:	2300      	moveq	r3, #0
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b00      	cmp	r3, #0
 8004552:	d025      	beq.n	80045a0 <_Z26getFont_ChicagoFLF_11_1bppv+0x84>
 8004554:	2300      	movs	r3, #0
 8004556:	930c      	str	r3, [sp, #48]	; 0x30
 8004558:	2300      	movs	r3, #0
 800455a:	930b      	str	r3, [sp, #44]	; 0x2c
 800455c:	2300      	movs	r3, #0
 800455e:	930a      	str	r3, [sp, #40]	; 0x28
 8004560:	233f      	movs	r3, #63	; 0x3f
 8004562:	9309      	str	r3, [sp, #36]	; 0x24
 8004564:	4b11      	ldr	r3, [pc, #68]	; (80045ac <_Z26getFont_ChicagoFLF_11_1bppv+0x90>)
 8004566:	9308      	str	r3, [sp, #32]
 8004568:	4b11      	ldr	r3, [pc, #68]	; (80045b0 <_Z26getFont_ChicagoFLF_11_1bppv+0x94>)
 800456a:	9307      	str	r3, [sp, #28]
 800456c:	2300      	movs	r3, #0
 800456e:	9306      	str	r3, [sp, #24]
 8004570:	2300      	movs	r3, #0
 8004572:	9305      	str	r3, [sp, #20]
 8004574:	2300      	movs	r3, #0
 8004576:	9304      	str	r3, [sp, #16]
 8004578:	2301      	movs	r3, #1
 800457a:	9303      	str	r3, [sp, #12]
 800457c:	2300      	movs	r3, #0
 800457e:	9302      	str	r3, [sp, #8]
 8004580:	2300      	movs	r3, #0
 8004582:	9301      	str	r3, [sp, #4]
 8004584:	230b      	movs	r3, #11
 8004586:	9300      	str	r3, [sp, #0]
 8004588:	230c      	movs	r3, #12
 800458a:	2212      	movs	r2, #18
 800458c:	4909      	ldr	r1, [pc, #36]	; (80045b4 <_Z26getFont_ChicagoFLF_11_1bppv+0x98>)
 800458e:	480a      	ldr	r0, [pc, #40]	; (80045b8 <_Z26getFont_ChicagoFLF_11_1bppv+0x9c>)
 8004590:	f7ff ff1c 	bl	80043cc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004594:	4809      	ldr	r0, [pc, #36]	; (80045bc <_Z26getFont_ChicagoFLF_11_1bppv+0xa0>)
 8004596:	f00b f9c9 	bl	800f92c <atexit>
 800459a:	4803      	ldr	r0, [pc, #12]	; (80045a8 <_Z26getFont_ChicagoFLF_11_1bppv+0x8c>)
 800459c:	f00b f988 	bl	800f8b0 <__cxa_guard_release>
    return ChicagoFLF_11_1bpp;
 80045a0:	4b05      	ldr	r3, [pc, #20]	; (80045b8 <_Z26getFont_ChicagoFLF_11_1bppv+0x9c>)
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	20000dcc 	.word	0x20000dcc
 80045ac:	08012ff8 	.word	0x08012ff8
 80045b0:	08013008 	.word	0x08013008
 80045b4:	08012e40 	.word	0x08012e40
 80045b8:	20000da0 	.word	0x20000da0
 80045bc:	0800450d 	.word	0x0800450d

080045c0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_ChicagoFLF_20_1bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_ChicagoFLF_20_1bpp();

touchgfx::GeneratedFont& getFont_ChicagoFLF_20_1bpp()
{
    static touchgfx::GeneratedFont ChicagoFLF_20_1bpp(glyphs_ChicagoFLF_20_1bpp, 1, 20, 20, 0, 0, 1, 0, 0, 0, unicodes_ChicagoFLF_20_1bpp, kerning_ChicagoFLF_20_1bpp, 63, 0, 0, 0);
 80045c0:	b580      	push	{r7, lr}
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	4801      	ldr	r0, [pc, #4]	; (80045cc <__tcf_0+0xc>)
 80045c6:	f7ff fea7 	bl	8004318 <_ZN8touchgfx13GeneratedFontD1Ev>
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	20000dd0 	.word	0x20000dd0

080045d0 <_Z26getFont_ChicagoFLF_20_1bppv>:
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b08e      	sub	sp, #56	; 0x38
 80045d4:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont ChicagoFLF_20_1bpp(glyphs_ChicagoFLF_20_1bpp, 1, 20, 20, 0, 0, 1, 0, 0, 0, unicodes_ChicagoFLF_20_1bpp, kerning_ChicagoFLF_20_1bpp, 63, 0, 0, 0);
 80045d6:	4b21      	ldr	r3, [pc, #132]	; (800465c <_Z26getFont_ChicagoFLF_20_1bppv+0x8c>)
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	f3bf 8f5b 	dmb	ish
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	bf0c      	ite	eq
 80045e8:	2301      	moveq	r3, #1
 80045ea:	2300      	movne	r3, #0
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d030      	beq.n	8004654 <_Z26getFont_ChicagoFLF_20_1bppv+0x84>
 80045f2:	481a      	ldr	r0, [pc, #104]	; (800465c <_Z26getFont_ChicagoFLF_20_1bppv+0x8c>)
 80045f4:	f00b f950 	bl	800f898 <__cxa_guard_acquire>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	bf14      	ite	ne
 80045fe:	2301      	movne	r3, #1
 8004600:	2300      	moveq	r3, #0
 8004602:	b2db      	uxtb	r3, r3
 8004604:	2b00      	cmp	r3, #0
 8004606:	d025      	beq.n	8004654 <_Z26getFont_ChicagoFLF_20_1bppv+0x84>
 8004608:	2300      	movs	r3, #0
 800460a:	930c      	str	r3, [sp, #48]	; 0x30
 800460c:	2300      	movs	r3, #0
 800460e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004610:	2300      	movs	r3, #0
 8004612:	930a      	str	r3, [sp, #40]	; 0x28
 8004614:	233f      	movs	r3, #63	; 0x3f
 8004616:	9309      	str	r3, [sp, #36]	; 0x24
 8004618:	4b11      	ldr	r3, [pc, #68]	; (8004660 <_Z26getFont_ChicagoFLF_20_1bppv+0x90>)
 800461a:	9308      	str	r3, [sp, #32]
 800461c:	4b11      	ldr	r3, [pc, #68]	; (8004664 <_Z26getFont_ChicagoFLF_20_1bppv+0x94>)
 800461e:	9307      	str	r3, [sp, #28]
 8004620:	2300      	movs	r3, #0
 8004622:	9306      	str	r3, [sp, #24]
 8004624:	2300      	movs	r3, #0
 8004626:	9305      	str	r3, [sp, #20]
 8004628:	2300      	movs	r3, #0
 800462a:	9304      	str	r3, [sp, #16]
 800462c:	2301      	movs	r3, #1
 800462e:	9303      	str	r3, [sp, #12]
 8004630:	2300      	movs	r3, #0
 8004632:	9302      	str	r3, [sp, #8]
 8004634:	2300      	movs	r3, #0
 8004636:	9301      	str	r3, [sp, #4]
 8004638:	2314      	movs	r3, #20
 800463a:	9300      	str	r3, [sp, #0]
 800463c:	2314      	movs	r3, #20
 800463e:	2201      	movs	r2, #1
 8004640:	4909      	ldr	r1, [pc, #36]	; (8004668 <_Z26getFont_ChicagoFLF_20_1bppv+0x98>)
 8004642:	480a      	ldr	r0, [pc, #40]	; (800466c <_Z26getFont_ChicagoFLF_20_1bppv+0x9c>)
 8004644:	f7ff fec2 	bl	80043cc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004648:	4809      	ldr	r0, [pc, #36]	; (8004670 <_Z26getFont_ChicagoFLF_20_1bppv+0xa0>)
 800464a:	f00b f96f 	bl	800f92c <atexit>
 800464e:	4803      	ldr	r0, [pc, #12]	; (800465c <_Z26getFont_ChicagoFLF_20_1bppv+0x8c>)
 8004650:	f00b f92e 	bl	800f8b0 <__cxa_guard_release>
    return ChicagoFLF_20_1bpp;
 8004654:	4b05      	ldr	r3, [pc, #20]	; (800466c <_Z26getFont_ChicagoFLF_20_1bppv+0x9c>)
}
 8004656:	4618      	mov	r0, r3
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	20000dfc 	.word	0x20000dfc
 8004660:	08012ffc 	.word	0x08012ffc
 8004664:	0801300c 	.word	0x0801300c
 8004668:	08012f3c 	.word	0x08012f3c
 800466c:	20000dd0 	.word	0x20000dd0
 8004670:	080045c1 	.word	0x080045c1

08004674 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_trebucbd_40_1bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_trebucbd_40_1bpp();

touchgfx::GeneratedFont& getFont_trebucbd_40_1bpp()
{
    static touchgfx::GeneratedFont trebucbd_40_1bpp(glyphs_trebucbd_40_1bpp, 11, 40, 40, 0, 0, 1, 0, 0, 0, unicodes_trebucbd_40_1bpp, kerning_trebucbd_40_1bpp, 63, 0, 0, 0);
 8004674:	b580      	push	{r7, lr}
 8004676:	af00      	add	r7, sp, #0
 8004678:	4801      	ldr	r0, [pc, #4]	; (8004680 <__tcf_0+0xc>)
 800467a:	f7ff fe4d 	bl	8004318 <_ZN8touchgfx13GeneratedFontD1Ev>
 800467e:	bd80      	pop	{r7, pc}
 8004680:	20000e00 	.word	0x20000e00

08004684 <_Z24getFont_trebucbd_40_1bppv>:
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b08e      	sub	sp, #56	; 0x38
 8004688:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont trebucbd_40_1bpp(glyphs_trebucbd_40_1bpp, 11, 40, 40, 0, 0, 1, 0, 0, 0, unicodes_trebucbd_40_1bpp, kerning_trebucbd_40_1bpp, 63, 0, 0, 0);
 800468a:	4b21      	ldr	r3, [pc, #132]	; (8004710 <_Z24getFont_trebucbd_40_1bppv+0x8c>)
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	f3bf 8f5b 	dmb	ish
 8004692:	b2db      	uxtb	r3, r3
 8004694:	f003 0301 	and.w	r3, r3, #1
 8004698:	2b00      	cmp	r3, #0
 800469a:	bf0c      	ite	eq
 800469c:	2301      	moveq	r3, #1
 800469e:	2300      	movne	r3, #0
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d030      	beq.n	8004708 <_Z24getFont_trebucbd_40_1bppv+0x84>
 80046a6:	481a      	ldr	r0, [pc, #104]	; (8004710 <_Z24getFont_trebucbd_40_1bppv+0x8c>)
 80046a8:	f00b f8f6 	bl	800f898 <__cxa_guard_acquire>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	bf14      	ite	ne
 80046b2:	2301      	movne	r3, #1
 80046b4:	2300      	moveq	r3, #0
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d025      	beq.n	8004708 <_Z24getFont_trebucbd_40_1bppv+0x84>
 80046bc:	2300      	movs	r3, #0
 80046be:	930c      	str	r3, [sp, #48]	; 0x30
 80046c0:	2300      	movs	r3, #0
 80046c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80046c4:	2300      	movs	r3, #0
 80046c6:	930a      	str	r3, [sp, #40]	; 0x28
 80046c8:	233f      	movs	r3, #63	; 0x3f
 80046ca:	9309      	str	r3, [sp, #36]	; 0x24
 80046cc:	4b11      	ldr	r3, [pc, #68]	; (8004714 <_Z24getFont_trebucbd_40_1bppv+0x90>)
 80046ce:	9308      	str	r3, [sp, #32]
 80046d0:	4b11      	ldr	r3, [pc, #68]	; (8004718 <_Z24getFont_trebucbd_40_1bppv+0x94>)
 80046d2:	9307      	str	r3, [sp, #28]
 80046d4:	2300      	movs	r3, #0
 80046d6:	9306      	str	r3, [sp, #24]
 80046d8:	2300      	movs	r3, #0
 80046da:	9305      	str	r3, [sp, #20]
 80046dc:	2300      	movs	r3, #0
 80046de:	9304      	str	r3, [sp, #16]
 80046e0:	2301      	movs	r3, #1
 80046e2:	9303      	str	r3, [sp, #12]
 80046e4:	2300      	movs	r3, #0
 80046e6:	9302      	str	r3, [sp, #8]
 80046e8:	2300      	movs	r3, #0
 80046ea:	9301      	str	r3, [sp, #4]
 80046ec:	2328      	movs	r3, #40	; 0x28
 80046ee:	9300      	str	r3, [sp, #0]
 80046f0:	2328      	movs	r3, #40	; 0x28
 80046f2:	220b      	movs	r2, #11
 80046f4:	4909      	ldr	r1, [pc, #36]	; (800471c <_Z24getFont_trebucbd_40_1bppv+0x98>)
 80046f6:	480a      	ldr	r0, [pc, #40]	; (8004720 <_Z24getFont_trebucbd_40_1bppv+0x9c>)
 80046f8:	f7ff fe68 	bl	80043cc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80046fc:	4809      	ldr	r0, [pc, #36]	; (8004724 <_Z24getFont_trebucbd_40_1bppv+0xa0>)
 80046fe:	f00b f915 	bl	800f92c <atexit>
 8004702:	4803      	ldr	r0, [pc, #12]	; (8004710 <_Z24getFont_trebucbd_40_1bppv+0x8c>)
 8004704:	f00b f8d4 	bl	800f8b0 <__cxa_guard_release>
    return trebucbd_40_1bpp;
 8004708:	4b05      	ldr	r3, [pc, #20]	; (8004720 <_Z24getFont_trebucbd_40_1bppv+0x9c>)
}
 800470a:	4618      	mov	r0, r3
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	20000e2c 	.word	0x20000e2c
 8004714:	08013000 	.word	0x08013000
 8004718:	08013010 	.word	0x08013010
 800471c:	08012f4c 	.word	0x08012f4c
 8004720:	20000e00 	.word	0x20000e00
 8004724:	08004675 	.word	0x08004675

08004728 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_1bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_1bpp();

touchgfx::GeneratedFont& getFont_verdana_40_1bpp()
{
    static touchgfx::GeneratedFont verdana_40_1bpp(glyphs_verdana_40_1bpp, 1, 40, 40, 0, 0, 1, 0, 0, 0, unicodes_verdana_40_1bpp, kerning_verdana_40_1bpp, 63, 0, 0, 0);
 8004728:	b580      	push	{r7, lr}
 800472a:	af00      	add	r7, sp, #0
 800472c:	4801      	ldr	r0, [pc, #4]	; (8004734 <__tcf_0+0xc>)
 800472e:	f7ff fdf3 	bl	8004318 <_ZN8touchgfx13GeneratedFontD1Ev>
 8004732:	bd80      	pop	{r7, pc}
 8004734:	20000e30 	.word	0x20000e30

08004738 <_Z23getFont_verdana_40_1bppv>:
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b08e      	sub	sp, #56	; 0x38
 800473c:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_40_1bpp(glyphs_verdana_40_1bpp, 1, 40, 40, 0, 0, 1, 0, 0, 0, unicodes_verdana_40_1bpp, kerning_verdana_40_1bpp, 63, 0, 0, 0);
 800473e:	4b21      	ldr	r3, [pc, #132]	; (80047c4 <_Z23getFont_verdana_40_1bppv+0x8c>)
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	f3bf 8f5b 	dmb	ish
 8004746:	b2db      	uxtb	r3, r3
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b00      	cmp	r3, #0
 800474e:	bf0c      	ite	eq
 8004750:	2301      	moveq	r3, #1
 8004752:	2300      	movne	r3, #0
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d030      	beq.n	80047bc <_Z23getFont_verdana_40_1bppv+0x84>
 800475a:	481a      	ldr	r0, [pc, #104]	; (80047c4 <_Z23getFont_verdana_40_1bppv+0x8c>)
 800475c:	f00b f89c 	bl	800f898 <__cxa_guard_acquire>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	bf14      	ite	ne
 8004766:	2301      	movne	r3, #1
 8004768:	2300      	moveq	r3, #0
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b00      	cmp	r3, #0
 800476e:	d025      	beq.n	80047bc <_Z23getFont_verdana_40_1bppv+0x84>
 8004770:	2300      	movs	r3, #0
 8004772:	930c      	str	r3, [sp, #48]	; 0x30
 8004774:	2300      	movs	r3, #0
 8004776:	930b      	str	r3, [sp, #44]	; 0x2c
 8004778:	2300      	movs	r3, #0
 800477a:	930a      	str	r3, [sp, #40]	; 0x28
 800477c:	233f      	movs	r3, #63	; 0x3f
 800477e:	9309      	str	r3, [sp, #36]	; 0x24
 8004780:	4b11      	ldr	r3, [pc, #68]	; (80047c8 <_Z23getFont_verdana_40_1bppv+0x90>)
 8004782:	9308      	str	r3, [sp, #32]
 8004784:	4b11      	ldr	r3, [pc, #68]	; (80047cc <_Z23getFont_verdana_40_1bppv+0x94>)
 8004786:	9307      	str	r3, [sp, #28]
 8004788:	2300      	movs	r3, #0
 800478a:	9306      	str	r3, [sp, #24]
 800478c:	2300      	movs	r3, #0
 800478e:	9305      	str	r3, [sp, #20]
 8004790:	2300      	movs	r3, #0
 8004792:	9304      	str	r3, [sp, #16]
 8004794:	2301      	movs	r3, #1
 8004796:	9303      	str	r3, [sp, #12]
 8004798:	2300      	movs	r3, #0
 800479a:	9302      	str	r3, [sp, #8]
 800479c:	2300      	movs	r3, #0
 800479e:	9301      	str	r3, [sp, #4]
 80047a0:	2328      	movs	r3, #40	; 0x28
 80047a2:	9300      	str	r3, [sp, #0]
 80047a4:	2328      	movs	r3, #40	; 0x28
 80047a6:	2201      	movs	r2, #1
 80047a8:	4909      	ldr	r1, [pc, #36]	; (80047d0 <_Z23getFont_verdana_40_1bppv+0x98>)
 80047aa:	480a      	ldr	r0, [pc, #40]	; (80047d4 <_Z23getFont_verdana_40_1bppv+0x9c>)
 80047ac:	f7ff fe0e 	bl	80043cc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80047b0:	4809      	ldr	r0, [pc, #36]	; (80047d8 <_Z23getFont_verdana_40_1bppv+0xa0>)
 80047b2:	f00b f8bb 	bl	800f92c <atexit>
 80047b6:	4803      	ldr	r0, [pc, #12]	; (80047c4 <_Z23getFont_verdana_40_1bppv+0x8c>)
 80047b8:	f00b f87a 	bl	800f8b0 <__cxa_guard_release>
    return verdana_40_1bpp;
 80047bc:	4b05      	ldr	r3, [pc, #20]	; (80047d4 <_Z23getFont_verdana_40_1bppv+0x9c>)
}
 80047be:	4618      	mov	r0, r3
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	20000e5c 	.word	0x20000e5c
 80047c8:	08013004 	.word	0x08013004
 80047cc:	08013014 	.word	0x08013014
 80047d0:	08012fe8 	.word	0x08012fe8
 80047d4:	20000e30 	.word	0x20000e30
 80047d8:	08004729 	.word	0x08004729

080047dc <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	4618      	mov	r0, r3
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80047fe:	bf00      	nop
 8004800:	370c      	adds	r7, #12
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr

0800480a <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800480a:	b480      	push	{r7}
 800480c:	b083      	sub	sp, #12
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
 8004812:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800482a:	bf00      	nop
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8004836:	b480      	push	{r7}
 8004838:	b083      	sub	sp, #12
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
 800483e:	460b      	mov	r3, r1
 8004840:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 8004842:	bf00      	nop
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr

0800484e <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800484e:	b480      	push	{r7}
 8004850:	b083      	sub	sp, #12
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
    {
    }
 8004856:	bf00      	nop
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 8004862:	b480      	push	{r7}
 8004864:	b083      	sub	sp, #12
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
    {
    }
 800486a:	bf00      	nop
 800486c:	370c      	adds	r7, #12
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
	...

08004878 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
    {
 8004880:	4a04      	ldr	r2, [pc, #16]	; (8004894 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	601a      	str	r2, [r3, #0]
    }
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4618      	mov	r0, r3
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr
 8004894:	08011be8 	.word	0x08011be8

08004898 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
    }
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f7ff ffe9 	bl	8004878 <_ZN8touchgfx15UIEventListenerD1Ev>
 80048a6:	2104      	movs	r1, #4
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f00a fff3 	bl	800f894 <_ZdlPvj>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4618      	mov	r0, r3
 80048b2:	3708      	adds	r7, #8
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
    {
    }
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	460b      	mov	r3, r1
 80048d6:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	683a      	ldr	r2, [r7, #0]
 80048f2:	f503 7398 	add.w	r3, r3, #304	; 0x130
 80048f6:	6810      	ldr	r0, [r2, #0]
 80048f8:	6851      	ldr	r1, [r2, #4]
 80048fa:	c303      	stmia	r3!, {r0, r1}
    }
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
        timerWidgets.add(w);
    }

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
    {
        timerWidgets.clear();
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	3304      	adds	r3, #4
 8004914:	4618      	mov	r0, r3
 8004916:	f006 ff2a 	bl	800b76e <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    }
 800491a:	bf00      	nop
 800491c:	3708      	adds	r7, #8
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
	...

08004924 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
    {
 800492c:	4a04      	ldr	r2, [pc, #16]	; (8004940 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	601a      	str	r2, [r3, #0]
    }
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4618      	mov	r0, r3
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr
 8004940:	08011bd0 	.word	0x08011bd0

08004944 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
    }
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f7ff ffe9 	bl	8004924 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8004952:	2104      	movs	r1, #4
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f00a ff9d 	bl	800f894 <_ZdlPvj>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4618      	mov	r0, r3
 800495e:	3708      	adds	r7, #8
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 8004964:	b480      	push	{r7}
 8004966:	af00      	add	r7, sp, #0
    {
        return instance;
 8004968:	4b03      	ldr	r3, [pc, #12]	; (8004978 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800496a:	681b      	ldr	r3, [r3, #0]
    }
 800496c:	4618      	mov	r0, r3
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	200012d4 	.word	0x200012d4

0800497c <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 8004984:	4a07      	ldr	r2, [pc, #28]	; (80049a4 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	601a      	str	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	605a      	str	r2, [r3, #4]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	721a      	strb	r2, [r3, #8]
    {
    }
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4618      	mov	r0, r3
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr
 80049a4:	08011bac 	.word	0x08011bac

080049a8 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
    {
 80049b0:	4a04      	ldr	r2, [pc, #16]	; (80049c4 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	601a      	str	r2, [r3, #0]
    }
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4618      	mov	r0, r3
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr
 80049c4:	08011bac 	.word	0x08011bac

080049c8 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
    }
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f7ff ffe9 	bl	80049a8 <_ZN8touchgfx10TransitionD1Ev>
 80049d6:	210c      	movs	r1, #12
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f00a ff5b 	bl	800f894 <_ZdlPvj>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4618      	mov	r0, r3
 80049e2:	3708      	adds	r7, #8
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
    {
    }
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
    {
    }
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
    {
    }
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 8004a2c:	f006 fe7a 	bl	800b724 <_ZN8touchgfx11Application11getInstanceEv>
 8004a30:	4603      	mov	r3, r0
 8004a32:	4618      	mov	r0, r3
 8004a34:	f007 fabe 	bl	800bfb4 <_ZN8touchgfx11Application10invalidateEv>
    }
 8004a38:	bf00      	nop
 8004a3a:	3708      	adds	r7, #8
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	683a      	ldr	r2, [r7, #0]
 8004a4e:	605a      	str	r2, [r3, #4]
    }
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	4a05      	ldr	r2, [pc, #20]	; (8004a7c <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	601a      	str	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7ff ff03 	bl	8004878 <_ZN8touchgfx15UIEventListenerD1Ev>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4618      	mov	r0, r3
 8004a76:	3708      	adds	r7, #8
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	08012824 	.word	0x08012824

08004a80 <_ZN8touchgfx11ApplicationD0Ev>:
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f7ff ffe7 	bl	8004a5c <_ZN8touchgfx11ApplicationD1Ev>
 8004a8e:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f00a fefe 	bl	800f894 <_ZdlPvj>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3708      	adds	r7, #8
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
	...

08004aa4 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f006 fefa 	bl	800b8a8 <_ZN8touchgfx11ApplicationC1Ev>
 8004ab4:	4a09      	ldr	r2, [pc, #36]	; (8004adc <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	601a      	str	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    {
        instance = this;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a04      	ldr	r2, [pc, #16]	; (8004ae0 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8004ace:	6013      	str	r3, [r2, #0]
    }
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3708      	adds	r7, #8
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	08011b60 	.word	0x08011b60
 8004ae0:	20001320 	.word	0x20001320

08004ae4 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 f804 	bl	8004afa <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8004af2:	bf00      	nop
 8004af4:	3708      	adds	r7, #8
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b082      	sub	sp, #8
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00f      	beq.n	8004b2c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	330c      	adds	r3, #12
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4610      	mov	r0, r2
 8004b20:	4798      	blx	r3
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d001      	beq.n	8004b2c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e000      	b.n	8004b2e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00e      	beq.n	8004b50 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	3308      	adds	r3, #8
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4610      	mov	r0, r2
 8004b46:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
        }
    }
 8004b50:	bf00      	nop
 8004b52:	3708      	adds	r7, #8
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	683a      	ldr	r2, [r7, #0]
 8004b66:	601a      	str	r2, [r3, #0]
    }
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	4a05      	ldr	r2, [pc, #20]	; (8004b94 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	601a      	str	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7ff ff69 	bl	8004a5c <_ZN8touchgfx11ApplicationD1Ev>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3708      	adds	r7, #8
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	08011b60 	.word	0x08011b60

08004b98 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f7ff ffe7 	bl	8004b74 <_ZN8touchgfx14MVPApplicationD1Ev>
 8004ba6:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f00a fe72 	bl	800f894 <_ZdlPvj>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3708      	adds	r7, #8
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
	...

08004bbc <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	4a08      	ldr	r2, [pc, #32]	; (8004be8 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	601a      	str	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f000 fac3 	bl	800515c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7ff ffcb 	bl	8004b74 <_ZN8touchgfx14MVPApplicationD1Ev>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4618      	mov	r0, r3
 8004be2:	3708      	adds	r7, #8
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	08011afc 	.word	0x08011afc

08004bec <_ZN23FrontendApplicationBaseD0Ev>:
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f7ff ffe1 	bl	8004bbc <_ZN23FrontendApplicationBaseD1Ev>
 8004bfa:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f00a fe48 	bl	800f894 <_ZdlPvj>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4618      	mov	r0, r3
 8004c08:	3708      	adds	r7, #8
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b082      	sub	sp, #8
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
    {
        gotoMainScreenScreenNoTransition();
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 f876 	bl	8004d08 <_ZN23FrontendApplicationBase32gotoMainScreenScreenNoTransitionEv>
    }
 8004c1c:	bf00      	nop
 8004c1e:	3708      	adds	r7, #8
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	721a      	strb	r2, [r3, #8]
    }
 8004c32:	bf00      	nop
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr

08004c3e <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 8004c3e:	b480      	push	{r7}
 8004c40:	b083      	sub	sp, #12
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
 8004c46:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	683a      	ldr	r2, [r7, #0]
 8004c4c:	605a      	str	r2, [r3, #4]
    }
 8004c4e:	bf00      	nop
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
	...

08004c5c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/mainscreen_screen/MainScreenView.hpp>
#include <gui/mainscreen_screen/MainScreenPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7ff ff1a 	bl	8004aa4 <_ZN8touchgfx14MVPApplicationC1Ev>
 8004c70:	4a10      	ldr	r2, [pc, #64]	; (8004cb4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	601a      	str	r2, [r3, #0]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f000 f899 	bl	8004db4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8004c92:	f7ff fe67 	bl	8004964 <_ZN8touchgfx3HAL11getInstanceEv>
 8004c96:	4603      	mov	r3, r0
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	3208      	adds	r2, #8
 8004c9c:	6812      	ldr	r2, [r2, #0]
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 8004ca4:	2000      	movs	r0, #0
 8004ca6:	f001 fced 	bl	8006684 <_ZN8touchgfx5Texts11setLanguageEt>
}
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	4618      	mov	r0, r3
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	08011afc 	.word	0x08011afc

08004cb8 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	683a      	ldr	r2, [r7, #0]
 8004cde:	4611      	mov	r1, r2
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7ff ffe9 	bl	8004cb8 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	685a      	ldr	r2, [r3, #4]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	605a      	str	r2, [r3, #4]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	683a      	ldr	r2, [r7, #0]
 8004cf2:	3308      	adds	r3, #8
 8004cf4:	3208      	adds	r2, #8
 8004cf6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004cfa:	e883 0003 	stmia.w	r3, {r0, r1}
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4618      	mov	r0, r3
 8004d02:	3708      	adds	r7, #8
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <_ZN23FrontendApplicationBase32gotoMainScreenScreenNoTransitionEv>:
 */

// MainScreen

void FrontendApplicationBase::gotoMainScreenScreenNoTransition()
{
 8004d08:	b590      	push	{r4, r7, lr}
 8004d0a:	b089      	sub	sp, #36	; 0x24
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenScreenNoTransitionImpl);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 8004d16:	4b10      	ldr	r3, [pc, #64]	; (8004d58 <_ZN23FrontendApplicationBase32gotoMainScreenScreenNoTransitionEv+0x50>)
 8004d18:	61bb      	str	r3, [r7, #24]
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	61fb      	str	r3, [r7, #28]
 8004d1e:	f107 0008 	add.w	r0, r7, #8
 8004d22:	f107 0318 	add.w	r3, r7, #24
 8004d26:	cb0c      	ldmia	r3, {r2, r3}
 8004d28:	6879      	ldr	r1, [r7, #4]
 8004d2a:	f000 f85f 	bl	8004dec <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8004d2e:	f107 0308 	add.w	r3, r7, #8
 8004d32:	4619      	mov	r1, r3
 8004d34:	4620      	mov	r0, r4
 8004d36:	f7ff ffcb 	bl	8004cd0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8004d3a:	f107 0308 	add.w	r3, r7, #8
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f000 fa0c 	bl	800515c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 8004d50:	bf00      	nop
 8004d52:	3724      	adds	r7, #36	; 0x24
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd90      	pop	{r4, r7, pc}
 8004d58:	08004d5d 	.word	0x08004d5d

08004d5c <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMainScreenScreenNoTransitionImpl()
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af02      	add	r7, sp, #8
 8004d62:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainScreenView, MainScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f503 719e 	add.w	r1, r3, #316	; 0x13c
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004d70:	461a      	mov	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8004d78:	9300      	str	r3, [sp, #0]
 8004d7a:	4b04      	ldr	r3, [pc, #16]	; (8004d8c <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x30>)
 8004d7c:	4804      	ldr	r0, [pc, #16]	; (8004d90 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x34>)
 8004d7e:	f000 f867 	bl	8004e50 <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8004d82:	bf00      	nop
 8004d84:	3708      	adds	r7, #8
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	20001314 	.word	0x20001314
 8004d90:	20001310 	.word	0x20001310

08004d94 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	4a04      	ldr	r2, [pc, #16]	; (8004db0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	601a      	str	r2, [r3, #0]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4618      	mov	r0, r3
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr
 8004db0:	08011bd0 	.word	0x08011bd0

08004db4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7ff ffe8 	bl	8004d94 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8004dc4:	4a08      	ldr	r2, [pc, #32]	; (8004de8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	601a      	str	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	605a      	str	r2, [r3, #4]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	609a      	str	r2, [r3, #8]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	60da      	str	r2, [r3, #12]
    {
    }
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4618      	mov	r0, r3
 8004de0:	3708      	adds	r7, #8
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	08011b48 	.word	0x08011b48

08004dec <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	4639      	mov	r1, r7
 8004df8:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7ff ffc8 	bl	8004d94 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8004e04:	4a08      	ldr	r2, [pc, #32]	; (8004e28 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	601a      	str	r2, [r3, #0]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	68ba      	ldr	r2, [r7, #8]
 8004e0e:	605a      	str	r2, [r3, #4]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	3308      	adds	r3, #8
 8004e14:	463a      	mov	r2, r7
 8004e16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004e1a:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	4618      	mov	r0, r3
 8004e22:	3710      	adds	r7, #16
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	08011b48 	.word	0x08011b48

08004e2c <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f7ff fda0 	bl	800497c <_ZN8touchgfx10TransitionC1Ev>
 8004e3c:	4a03      	ldr	r2, [pc, #12]	; (8004e4c <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	601a      	str	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4618      	mov	r0, r3
 8004e46:	3708      	adds	r7, #8
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	08011ad8 	.word	0x08011ad8

08004e50 <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8004e50:	b590      	push	{r4, r7, lr}
 8004e52:	b08f      	sub	sp, #60	; 0x3c
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	607a      	str	r2, [r7, #4]
 8004e5c:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	689a      	ldr	r2, [r3, #8]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	3320      	adds	r3, #32
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4610      	mov	r0, r2
 8004e6e:	4798      	blx	r3
 8004e70:	4603      	mov	r3, r0
 8004e72:	f5b3 7fe2 	cmp.w	r3, #452	; 0x1c4
 8004e76:	d205      	bcs.n	8004e84 <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8004e78:	4b7e      	ldr	r3, [pc, #504]	; (8005074 <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004e7a:	4a7f      	ldr	r2, [pc, #508]	; (8005078 <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004e7c:	21a3      	movs	r1, #163	; 0xa3
 8004e7e:	487f      	ldr	r0, [pc, #508]	; (800507c <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004e80:	f00a fd36 	bl	800f8f0 <__assert_func>
 8004e84:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685a      	ldr	r2, [r3, #4]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	3320      	adds	r3, #32
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4610      	mov	r0, r2
 8004e96:	4798      	blx	r3
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b0f      	cmp	r3, #15
 8004e9c:	d805      	bhi.n	8004eaa <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 8004e9e:	4b78      	ldr	r3, [pc, #480]	; (8005080 <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8004ea0:	4a75      	ldr	r2, [pc, #468]	; (8005078 <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004ea2:	21a4      	movs	r1, #164	; 0xa4
 8004ea4:	4875      	ldr	r0, [pc, #468]	; (800507c <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004ea6:	f00a fd23 	bl	800f8f0 <__assert_func>
 8004eaa:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	68da      	ldr	r2, [r3, #12]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	3320      	adds	r3, #32
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4610      	mov	r0, r2
 8004ebc:	4798      	blx	r3
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b0b      	cmp	r3, #11
 8004ec2:	d805      	bhi.n	8004ed0 <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 8004ec4:	4b6f      	ldr	r3, [pc, #444]	; (8005084 <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 8004ec6:	4a6c      	ldr	r2, [pc, #432]	; (8005078 <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004ec8:	21a5      	movs	r1, #165	; 0xa5
 8004eca:	486c      	ldr	r0, [pc, #432]	; (800507c <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004ecc:	f00a fd10 	bl	800f8f0 <__assert_func>
 8004ed0:	bf00      	nop
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8004ede:	f006 fc21 	bl	800b724 <_ZN8touchgfx11Application11getInstanceEv>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7ff fd0f 	bl	8004908 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8004eea:	6a3b      	ldr	r3, [r7, #32]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d008      	beq.n	8004f04 <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 8004ef2:	6a3b      	ldr	r3, [r7, #32]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	6a3b      	ldr	r3, [r7, #32]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	330c      	adds	r3, #12
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4610      	mov	r0, r2
 8004f02:	4798      	blx	r3
    if (*currentTrans)
 8004f04:	6a3b      	ldr	r3, [r7, #32]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d007      	beq.n	8004f1c <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 8004f0c:	6a3b      	ldr	r3, [r7, #32]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	6a3b      	ldr	r3, [r7, #32]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4610      	mov	r0, r2
 8004f1a:	4798      	blx	r3
    if (*currentScreen)
 8004f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d008      	beq.n	8004f36 <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 8004f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	3314      	adds	r3, #20
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4610      	mov	r0, r2
 8004f34:	4798      	blx	r3
    if (*currentPresenter)
 8004f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d008      	beq.n	8004f50 <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	3304      	adds	r3, #4
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4610      	mov	r0, r2
 8004f4e:	4798      	blx	r3
    if (*currentScreen)
 8004f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d007      	beq.n	8004f68 <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 8004f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4610      	mov	r0, r2
 8004f66:	4798      	blx	r3
    if (*currentPresenter)
 8004f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d008      	beq.n	8004f82 <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 8004f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	3308      	adds	r3, #8
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4610      	mov	r0, r2
 8004f80:	4798      	blx	r3
}
 8004f82:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	2100      	movs	r1, #0
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 f87c 	bl	8005088 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8004f90:	4603      	mov	r3, r0
 8004f92:	4619      	mov	r1, r3
 8004f94:	200c      	movs	r0, #12
 8004f96:	f7ff fc21 	bl	80047dc <_ZnwjPv>
 8004f9a:	4604      	mov	r4, r0
 8004f9c:	4620      	mov	r0, r4
 8004f9e:	f7ff ff45 	bl	8004e2c <_ZN8touchgfx12NoTransitionC1Ev>
 8004fa2:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	2100      	movs	r1, #0
 8004faa:	4618      	mov	r0, r3
 8004fac:	f000 f87f 	bl	80050ae <_ZN8touchgfx17AbstractPartition2atI14MainScreenViewEERT_t>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	f44f 70e2 	mov.w	r0, #452	; 0x1c4
 8004fb8:	f7ff fc10 	bl	80047dc <_ZnwjPv>
 8004fbc:	4604      	mov	r4, r0
 8004fbe:	4620      	mov	r0, r4
 8004fc0:	f001 fe0c 	bl	8006bdc <_ZN14MainScreenViewC1Ev>
 8004fc4:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	2100      	movs	r1, #0
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f000 f881 	bl	80050d4 <_ZN8touchgfx17AbstractPartition2atI19MainScreenPresenterEERT_t>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	2010      	movs	r0, #16
 8004fd8:	f7ff fc00 	bl	80047dc <_ZnwjPv>
 8004fdc:	4604      	mov	r4, r0
 8004fde:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fe0:	4620      	mov	r0, r4
 8004fe2:	f001 fd35 	bl	8006a50 <_ZN19MainScreenPresenterC1ER14MainScreenView>
 8004fe6:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fec:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ff2:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ff8:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8004ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d002      	beq.n	8005006 <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 8005000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005002:	3304      	adds	r3, #4
 8005004:	e000      	b.n	8005008 <_ZN8touchgfx14makeTransitionI14MainScreenView19MainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 8005006:	2300      	movs	r3, #0
 8005008:	4619      	mov	r1, r3
 800500a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800500c:	f7ff fda4 	bl	8004b58 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8005010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005012:	3304      	adds	r3, #4
 8005014:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005016:	4618      	mov	r0, r3
 8005018:	f7ff fe11 	bl	8004c3e <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800501c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005020:	4618      	mov	r0, r3
 8005022:	f000 f86a 	bl	80050fa <_ZN8touchgfx4ViewI19MainScreenPresenterE4bindERS1_>
 8005026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005028:	61fb      	str	r3, [r7, #28]
 800502a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800502c:	61bb      	str	r3, [r7, #24]
 800502e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005030:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	330c      	adds	r3, #12
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	69f8      	ldr	r0, [r7, #28]
 800503c:	4798      	blx	r3
    newPresenter->activate();
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	69b8      	ldr	r0, [r7, #24]
 8005046:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8005048:	6979      	ldr	r1, [r7, #20]
 800504a:	69f8      	ldr	r0, [r7, #28]
 800504c:	f007 fffa 	bl	800d044 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	3310      	adds	r3, #16
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	6978      	ldr	r0, [r7, #20]
 800505a:	4798      	blx	r3
    newTransition->invalidate();
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	3314      	adds	r3, #20
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6978      	ldr	r0, [r7, #20]
 8005066:	4798      	blx	r3
}
 8005068:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800506a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800506c:	4618      	mov	r0, r3
 800506e:	373c      	adds	r7, #60	; 0x3c
 8005070:	46bd      	mov	sp, r7
 8005072:	bd90      	pop	{r4, r7, pc}
 8005074:	08010a9c 	.word	0x08010a9c
 8005078:	08010b2c 	.word	0x08010b2c
 800507c:	08010c38 	.word	0x08010c38
 8005080:	08010c7c 	.word	0x08010c7c
 8005084:	08010d20 	.word	0x08010d20

08005088 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	460b      	mov	r3, r1
 8005092:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	3324      	adds	r3, #36	; 0x24
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	887a      	ldrh	r2, [r7, #2]
 800509e:	4611      	mov	r1, r2
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	4798      	blx	r3
 80050a4:	4603      	mov	r3, r0
    }
 80050a6:	4618      	mov	r0, r3
 80050a8:	3708      	adds	r7, #8
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <_ZN8touchgfx17AbstractPartition2atI14MainScreenViewEERT_t>:
    T& at(const uint16_t index)
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b082      	sub	sp, #8
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
 80050b6:	460b      	mov	r3, r1
 80050b8:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	3324      	adds	r3, #36	; 0x24
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	887a      	ldrh	r2, [r7, #2]
 80050c4:	4611      	mov	r1, r2
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	4798      	blx	r3
 80050ca:	4603      	mov	r3, r0
    }
 80050cc:	4618      	mov	r0, r3
 80050ce:	3708      	adds	r7, #8
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <_ZN8touchgfx17AbstractPartition2atI19MainScreenPresenterEERT_t>:
    T& at(const uint16_t index)
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	460b      	mov	r3, r1
 80050de:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	3324      	adds	r3, #36	; 0x24
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	887a      	ldrh	r2, [r7, #2]
 80050ea:	4611      	mov	r1, r2
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	4798      	blx	r3
 80050f0:	4603      	mov	r3, r0
    }
 80050f2:	4618      	mov	r0, r3
 80050f4:	3708      	adds	r7, #8
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <_ZN8touchgfx4ViewI19MainScreenPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 80050fa:	b480      	push	{r7}
 80050fc:	b083      	sub	sp, #12
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
 8005102:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	683a      	ldr	r2, [r7, #0]
 8005108:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800510a:	bf00      	nop
 800510c:	370c      	adds	r7, #12
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
	...

08005118 <_ZN8touchgfx12NoTransitionD1Ev>:
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	4a05      	ldr	r2, [pc, #20]	; (8005138 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	601a      	str	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4618      	mov	r0, r3
 800512a:	f7ff fc3d 	bl	80049a8 <_ZN8touchgfx10TransitionD1Ev>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4618      	mov	r0, r3
 8005132:	3708      	adds	r7, #8
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	08011ad8 	.word	0x08011ad8

0800513c <_ZN8touchgfx12NoTransitionD0Ev>:
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f7ff ffe7 	bl	8005118 <_ZN8touchgfx12NoTransitionD1Ev>
 800514a:	210c      	movs	r1, #12
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f00a fba1 	bl	800f894 <_ZdlPvj>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4618      	mov	r0, r3
 8005156:	3708      	adds	r7, #8
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	4a05      	ldr	r2, [pc, #20]	; (800517c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	601a      	str	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4618      	mov	r0, r3
 800516e:	f7ff fbd9 	bl	8004924 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4618      	mov	r0, r3
 8005176:	3708      	adds	r7, #8
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	08011b48 	.word	0x08011b48

08005180 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f7ff ffe7 	bl	800515c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800518e:	2110      	movs	r1, #16
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f00a fb7f 	bl	800f894 <_ZdlPvj>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4618      	mov	r0, r3
 800519a:	3708      	adds	r7, #8
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	68d2      	ldr	r2, [r2, #12]
 80051b0:	1052      	asrs	r2, r2, #1
 80051b2:	1899      	adds	r1, r3, r2
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	f003 0301 	and.w	r3, r3, #1
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d102      	bne.n	80051c6 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	e00a      	b.n	80051dc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	68d2      	ldr	r2, [r2, #12]
 80051ce:	1052      	asrs	r2, r2, #1
 80051d0:	4413      	add	r3, r2
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	6892      	ldr	r2, [r2, #8]
 80051d8:	4413      	add	r3, r2
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4608      	mov	r0, r1
 80051de:	4798      	blx	r3
    }
 80051e0:	bf00      	nop
 80051e2:	3708      	adds	r7, #8
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d010      	beq.n	800521a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d107      	bne.n	8005210 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	2b00      	cmp	r3, #0
 800520a:	d101      	bne.n	8005210 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800520c:	2301      	movs	r3, #1
 800520e:	e000      	b.n	8005212 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8005210:	2300      	movs	r3, #0
 8005212:	2b01      	cmp	r3, #1
 8005214:	d001      	beq.n	800521a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8005216:	2301      	movs	r3, #1
 8005218:	e000      	b.n	800521c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800521a:	2300      	movs	r3, #0
    }
 800521c:	4618      	mov	r0, r3
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFromRGB
     */
    colortype(uint32_t col)
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
        : color(col)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	683a      	ldr	r2, [r7, #0]
 8005236:	601a      	str	r2, [r3, #0]
    {
    }
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4618      	mov	r0, r3
 800523c:	370c      	adds	r7, #12
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr

08005246 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 8005246:	b480      	push	{r7}
 8005248:	b083      	sub	sp, #12
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	801a      	strh	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	805a      	strh	r2, [r3, #2]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	809a      	strh	r2, [r3, #4]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	80da      	strh	r2, [r3, #6]
    {
    }
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4618      	mov	r0, r3
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 800527c:	4a14      	ldr	r2, [pc, #80]	; (80052d0 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	601a      	str	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	3304      	adds	r3, #4
 8005286:	4618      	mov	r0, r3
 8005288:	f7ff ffdd 	bl	8005246 <_ZN8touchgfx4RectC1Ev>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	330c      	adds	r3, #12
 8005290:	4618      	mov	r0, r3
 8005292:	f7ff ffd8 	bl	8005246 <_ZN8touchgfx4RectC1Ev>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	615a      	str	r2, [r3, #20]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	619a      	str	r2, [r3, #24]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	61da      	str	r2, [r3, #28]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	841a      	strh	r2, [r3, #32]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	845a      	strh	r2, [r3, #34]	; 0x22
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4618      	mov	r0, r3
 80052c8:	3708      	adds	r7, #8
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	08012870 	.word	0x08012870

080052d4 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
    {
 80052dc:	4a04      	ldr	r2, [pc, #16]	; (80052f0 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	601a      	str	r2, [r3, #0]
    }
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4618      	mov	r0, r3
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr
 80052f0:	08012870 	.word	0x08012870

080052f4 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
    }
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f7ff ffe9 	bl	80052d4 <_ZN8touchgfx8DrawableD1Ev>
 8005302:	2128      	movs	r1, #40	; 0x28
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f00a fac5 	bl	800f894 <_ZdlPvj>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4618      	mov	r0, r3
 800530e:	3708      	adds	r7, #8
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005322:	2b00      	cmp	r3, #0
 8005324:	d005      	beq.n	8005332 <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	3314      	adds	r3, #20
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	4798      	blx	r3
        }
    }
 8005332:	bf00      	nop
 8005334:	3708      	adds	r7, #8
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 800533a:	b480      	push	{r7}
 800533c:	b083      	sub	sp, #12
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8005342:	2300      	movs	r3, #0
    }
 8005344:	4618      	mov	r0, r3
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	4608      	mov	r0, r1
 800535a:	4611      	mov	r1, r2
 800535c:	461a      	mov	r2, r3
 800535e:	4603      	mov	r3, r0
 8005360:	817b      	strh	r3, [r7, #10]
 8005362:	460b      	mov	r3, r1
 8005364:	813b      	strh	r3, [r7, #8]
 8005366:	4613      	mov	r3, r2
 8005368:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800536a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800536e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005372:	4619      	mov	r1, r3
 8005374:	68f8      	ldr	r0, [r7, #12]
 8005376:	f000 f82a 	bl	80053ce <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 800537a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800537e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005382:	4619      	mov	r1, r3
 8005384:	68f8      	ldr	r0, [r7, #12]
 8005386:	f000 f87e 	bl	8005486 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 800538a:	bf00      	nop
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 8005392:	b480      	push	{r7}
 8005394:	b083      	sub	sp, #12
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
 800539a:	460b      	mov	r3, r1
 800539c:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	887a      	ldrh	r2, [r7, #2]
 80053a2:	809a      	strh	r2, [r3, #4]
    }
 80053a4:	bf00      	nop
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	460b      	mov	r3, r1
 80053ba:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	887a      	ldrh	r2, [r7, #2]
 80053c0:	80da      	strh	r2, [r3, #6]
    }
 80053c2:	bf00      	nop
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b082      	sub	sp, #8
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
 80053d6:	460b      	mov	r3, r1
 80053d8:	807b      	strh	r3, [r7, #2]
 80053da:	4613      	mov	r3, r2
 80053dc:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	3330      	adds	r3, #48	; 0x30
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80053ea:	4611      	mov	r1, r2
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	4798      	blx	r3
        setY(y);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	3334      	adds	r3, #52	; 0x34
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f9b7 2000 	ldrsh.w	r2, [r7]
 80053fc:	4611      	mov	r1, r2
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	4798      	blx	r3
    }
 8005402:	bf00      	nop
 8005404:	3708      	adds	r7, #8
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800540a:	b480      	push	{r7}
 800540c:	b083      	sub	sp, #12
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
 8005412:	460b      	mov	r3, r1
 8005414:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	887a      	ldrh	r2, [r7, #2]
 800541a:	811a      	strh	r2, [r3, #8]
    }
 800541c:	bf00      	nop
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	460b      	mov	r3, r1
 8005432:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	887a      	ldrh	r2, [r7, #2]
 8005438:	815a      	strh	r2, [r3, #10]
    }
 800543a:	bf00      	nop
 800543c:	370c      	adds	r7, #12
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr

08005446 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 8005446:	b480      	push	{r7}
 8005448:	b083      	sub	sp, #12
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
    {
    }
 800544e:	bf00      	nop
 8005450:	370c      	adds	r7, #12
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr

0800545a <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800545a:	b480      	push	{r7}
 800545c:	b083      	sub	sp, #12
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
 8005462:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8005464:	bf00      	nop
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800547a:	bf00      	nop
 800547c:	370c      	adds	r7, #12
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr

08005486 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 8005486:	b580      	push	{r7, lr}
 8005488:	b082      	sub	sp, #8
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
 800548e:	460b      	mov	r3, r1
 8005490:	807b      	strh	r3, [r7, #2]
 8005492:	4613      	mov	r3, r2
 8005494:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	3338      	adds	r3, #56	; 0x38
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80054a2:	4611      	mov	r1, r2
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	4798      	blx	r3
        setHeight(height);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	333c      	adds	r3, #60	; 0x3c
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f9b7 2000 	ldrsh.w	r2, [r7]
 80054b4:	4611      	mov	r1, r2
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	4798      	blx	r3
    }
 80054ba:	bf00      	nop
 80054bc:	3708      	adds	r7, #8
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 80054c2:	b480      	push	{r7}
 80054c4:	b083      	sub	sp, #12
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
 80054ca:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
    {
    }
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
    {
        return visible;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 80054fa:	4618      	mov	r0, r3
 80054fc:	370c      	adds	r7, #12
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr

08005506 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8005506:	b480      	push	{r7}
 8005508:	b083      	sub	sp, #12
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 8005514:	4618      	mov	r0, r3
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	460b      	mov	r3, r1
 800552a:	807b      	strh	r3, [r7, #2]
 800552c:	4613      	mov	r3, r2
 800552e:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	3354      	adds	r3, #84	; 0x54
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	8879      	ldrh	r1, [r7, #2]
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8005540:	b292      	uxth	r2, r2
 8005542:	1a8a      	subs	r2, r1, r2
 8005544:	b292      	uxth	r2, r2
 8005546:	b210      	sxth	r0, r2
 8005548:	8839      	ldrh	r1, [r7, #0]
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8005550:	b292      	uxth	r2, r2
 8005552:	1a8a      	subs	r2, r1, r2
 8005554:	b292      	uxth	r2, r2
 8005556:	b212      	sxth	r2, r2
 8005558:	4601      	mov	r1, r0
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	4798      	blx	r3
    }
 800555e:	bf00      	nop
 8005560:	3708      	adds	r7, #8
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8005566:	b480      	push	{r7}
 8005568:	b083      	sub	sp, #12
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005574:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800557c:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005584:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8005586:	bf00      	nop
 8005588:	370c      	adds	r7, #12
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr

08005592 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8005592:	b580      	push	{r7, lr}
 8005594:	b084      	sub	sp, #16
 8005596:	af00      	add	r7, sp, #0
 8005598:	60f8      	str	r0, [r7, #12]
 800559a:	60b9      	str	r1, [r7, #8]
 800559c:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 800559e:	68f8      	ldr	r0, [r7, #12]
 80055a0:	f7ff ffe1 	bl	8005566 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	601a      	str	r2, [r3, #0]
    }
 80055b2:	bf00      	nop
 80055b4:	3710      	adds	r7, #16
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
	...

080055bc <_ZN8touchgfx9ContainerC1Ev>:
 * @see Drawable
 */
class Container : public Drawable
{
public:
    Container()
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
        : Drawable(),
          firstChild(0)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7ff fe54 	bl	8005274 <_ZN8touchgfx8DrawableC1Ev>
 80055cc:	4a05      	ldr	r2, [pc, #20]	; (80055e4 <_ZN8touchgfx9ContainerC1Ev+0x28>)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	601a      	str	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	629a      	str	r2, [r3, #40]	; 0x28
    {
    }
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4618      	mov	r0, r3
 80055dc:	3708      	adds	r7, #8
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	0801245c 	.word	0x0801245c

080055e8 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @return Pointer to the first drawable added to this container. If nothing has been
     *         added return zero.
     *
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
    {
        return firstChild;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 80055f4:	4618      	mov	r0, r3
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	607b      	str	r3, [r7, #4]
 800560a:	460b      	mov	r3, r1
 800560c:	817b      	strh	r3, [r7, #10]
 800560e:	4613      	mov	r3, r2
 8005610:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	4618      	mov	r0, r3
 8005616:	f7ff ff69 	bl	80054ec <_ZNK8touchgfx8Drawable9isVisibleEv>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d008      	beq.n	8005632 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	4618      	mov	r0, r3
 8005624:	f7ff ff6f 	bl	8005506 <_ZNK8touchgfx8Drawable11isTouchableEv>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d001      	beq.n	8005632 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800562e:	2301      	movs	r3, #1
 8005630:	e000      	b.n	8005634 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8005632:	2300      	movs	r3, #0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d002      	beq.n	800563e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	601a      	str	r2, [r3, #0]
        }
    }
 800563e:	bf00      	nop
 8005640:	3710      	adds	r7, #16
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
	...

08005648 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4618      	mov	r0, r3
 8005654:	f7ff fe0e 	bl	8005274 <_ZN8touchgfx8DrawableC1Ev>
 8005658:	4a03      	ldr	r2, [pc, #12]	; (8005668 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	601a      	str	r2, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4618      	mov	r0, r3
 8005662:	3708      	adds	r7, #8
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	08011ca4 	.word	0x08011ca4

0800566c <_ZN8touchgfx6WidgetD1Ev>:
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	4a05      	ldr	r2, [pc, #20]	; (800568c <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	601a      	str	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4618      	mov	r0, r3
 800567e:	f7ff fe29 	bl	80052d4 <_ZN8touchgfx8DrawableD1Ev>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4618      	mov	r0, r3
 8005686:	3708      	adds	r7, #8
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	08011ca4 	.word	0x08011ca4

08005690 <_ZN8touchgfx6WidgetD0Ev>:
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f7ff ffe7 	bl	800566c <_ZN8touchgfx6WidgetD1Ev>
 800569e:	2128      	movs	r1, #40	; 0x28
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f00a f8f7 	bl	800f894 <_ZdlPvj>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4618      	mov	r0, r3
 80056aa:	3708      	adds	r7, #8
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4618      	mov	r0, r3
 80056bc:	2326      	movs	r3, #38	; 0x26
 80056be:	461a      	mov	r2, r3
 80056c0:	2100      	movs	r1, #0
 80056c2:	f00a f993 	bl	800f9ec <memset>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7ff ffbd 	bl	8005648 <_ZN8touchgfx6WidgetC1Ev>
 80056ce:	4a09      	ldr	r2, [pc, #36]	; (80056f4 <_ZN8touchgfx3BoxC1Ev+0x44>)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	601a      	str	r2, [r3, #0]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	22ff      	movs	r2, #255	; 0xff
 80056d8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	3328      	adds	r3, #40	; 0x28
 80056e0:	2100      	movs	r1, #0
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7ff fda0 	bl	8005228 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4618      	mov	r0, r3
 80056ec:	3708      	adds	r7, #8
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	080126d4 	.word	0x080126d4

080056f8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	683a      	ldr	r2, [r7, #0]
 8005706:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <_ZN8touchgfx9ContainerD1Ev>:
class Container : public Drawable
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	4a05      	ldr	r2, [pc, #20]	; (8005734 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	601a      	str	r2, [r3, #0]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4618      	mov	r0, r3
 8005726:	f7ff fdd5 	bl	80052d4 <_ZN8touchgfx8DrawableD1Ev>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4618      	mov	r0, r3
 800572e:	3708      	adds	r7, #8
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	0801245c 	.word	0x0801245c

08005738 <_ZN8touchgfx9ContainerD0Ev>:
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f7ff ffe7 	bl	8005714 <_ZN8touchgfx9ContainerD1Ev>
 8005746:	212c      	movs	r1, #44	; 0x2c
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f00a f8a3 	bl	800f894 <_ZdlPvj>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4618      	mov	r0, r3
 8005752:	3708      	adds	r7, #8
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <_ZN14BackgroundBaseC1Ev>:
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/containers/BackgroundBase.hpp>
#include <touchgfx/Color.hpp>

BackgroundBase::BackgroundBase()
 8005758:	b590      	push	{r4, r7, lr}
 800575a:	b087      	sub	sp, #28
 800575c:	af02      	add	r7, sp, #8
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4618      	mov	r0, r3
 8005764:	f7ff ff2a 	bl	80055bc <_ZN8touchgfx9ContainerC1Ev>
 8005768:	4a22      	ldr	r2, [pc, #136]	; (80057f4 <_ZN14BackgroundBaseC1Ev+0x9c>)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	601a      	str	r2, [r3, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	332c      	adds	r3, #44	; 0x2c
 8005772:	4618      	mov	r0, r3
 8005774:	f7ff ff9c 	bl	80056b0 <_ZN8touchgfx3BoxC1Ev>
{
    setWidth(128);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2180      	movs	r1, #128	; 0x80
 800577c:	4618      	mov	r0, r3
 800577e:	f7ff fe44 	bl	800540a <_ZN8touchgfx8Drawable8setWidthEs>
    setHeight(64);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2140      	movs	r1, #64	; 0x40
 8005786:	4618      	mov	r0, r3
 8005788:	f7ff fe4e 	bl	8005428 <_ZN8touchgfx8Drawable9setHeightEs>
    BackGround.setPosition(0, 0, 128, 64);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8005792:	2340      	movs	r3, #64	; 0x40
 8005794:	9300      	str	r3, [sp, #0]
 8005796:	2380      	movs	r3, #128	; 0x80
 8005798:	2200      	movs	r2, #0
 800579a:	2100      	movs	r1, #0
 800579c:	f7ff fdd8 	bl	8005350 <_ZN8touchgfx8Drawable11setPositionEssss>
    BackGround.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80057a6:	2300      	movs	r3, #0
 80057a8:	73fb      	strb	r3, [r7, #15]
 80057aa:	2300      	movs	r3, #0
 80057ac:	73bb      	strb	r3, [r7, #14]
 80057ae:	2300      	movs	r3, #0
 80057b0:	737b      	strb	r3, [r7, #13]
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80057b2:	7bfb      	ldrb	r3, [r7, #15]
 80057b4:	041b      	lsls	r3, r3, #16
 80057b6:	461a      	mov	r2, r3
 80057b8:	7bbb      	ldrb	r3, [r7, #14]
 80057ba:	021b      	lsls	r3, r3, #8
 80057bc:	431a      	orrs	r2, r3
 80057be:	7b7b      	ldrb	r3, [r7, #13]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80057c6:	f107 0308 	add.w	r3, r7, #8
 80057ca:	4611      	mov	r1, r2
 80057cc:	4618      	mov	r0, r3
 80057ce:	f7ff fd2b 	bl	8005228 <_ZN8touchgfx9colortypeC1Em>
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	4619      	mov	r1, r3
 80057d6:	4620      	mov	r0, r4
 80057d8:	f7ff ff8e 	bl	80056f8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(BackGround);
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	332c      	adds	r3, #44	; 0x2c
 80057e2:	4619      	mov	r1, r3
 80057e4:	4610      	mov	r0, r2
 80057e6:	f002 fd57 	bl	8008298 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4618      	mov	r0, r3
 80057ee:	3714      	adds	r7, #20
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd90      	pop	{r4, r7, pc}
 80057f4:	08011c10 	.word	0x08011c10

080057f8 <_ZN14BackgroundBaseD1Ev>:

BackgroundBase::~BackgroundBase()
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	4a08      	ldr	r2, [pc, #32]	; (8005824 <_ZN14BackgroundBaseD1Ev+0x2c>)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	601a      	str	r2, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	332c      	adds	r3, #44	; 0x2c
 800580a:	4618      	mov	r0, r3
 800580c:	f000 f826 	bl	800585c <_ZN8touchgfx3BoxD1Ev>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4618      	mov	r0, r3
 8005814:	f7ff ff7e 	bl	8005714 <_ZN8touchgfx9ContainerD1Ev>
{

}
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4618      	mov	r0, r3
 800581c:	3708      	adds	r7, #8
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	08011c10 	.word	0x08011c10

08005828 <_ZN14BackgroundBaseD0Ev>:
BackgroundBase::~BackgroundBase()
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
}
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f7ff ffe1 	bl	80057f8 <_ZN14BackgroundBaseD1Ev>
 8005836:	2158      	movs	r1, #88	; 0x58
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f00a f82b 	bl	800f894 <_ZdlPvj>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4618      	mov	r0, r3
 8005842:	3708      	adds	r7, #8
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <_ZN14BackgroundBase10initializeEv>:

void BackgroundBase::initialize()
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]

}
 8005850:	bf00      	nop
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	4a05      	ldr	r2, [pc, #20]	; (800587c <_ZN8touchgfx3BoxD1Ev+0x20>)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	601a      	str	r2, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4618      	mov	r0, r3
 800586e:	f7ff fefd 	bl	800566c <_ZN8touchgfx6WidgetD1Ev>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4618      	mov	r0, r3
 8005876:	3708      	adds	r7, #8
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}
 800587c:	080126d4 	.word	0x080126d4

08005880 <_ZN8touchgfx3BoxD0Ev>:
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f7ff ffe7 	bl	800585c <_ZN8touchgfx3BoxD1Ev>
 800588e:	212c      	movs	r1, #44	; 0x2c
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f009 ffff 	bl	800f894 <_ZdlPvj>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4618      	mov	r0, r3
 800589a:	3708      	adds	r7, #8
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <_ZN10TopBarBaseC1Ev>:
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/containers/TopBarBase.hpp>
#include <touchgfx/Color.hpp>

TopBarBase::TopBarBase()
 80058a0:	b590      	push	{r4, r7, lr}
 80058a2:	b087      	sub	sp, #28
 80058a4:	af02      	add	r7, sp, #8
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7ff fe86 	bl	80055bc <_ZN8touchgfx9ContainerC1Ev>
 80058b0:	4a22      	ldr	r2, [pc, #136]	; (800593c <_ZN10TopBarBaseC1Ev+0x9c>)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	601a      	str	r2, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	332c      	adds	r3, #44	; 0x2c
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7ff fef8 	bl	80056b0 <_ZN8touchgfx3BoxC1Ev>
{
    setWidth(128);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2180      	movs	r1, #128	; 0x80
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7ff fda0 	bl	800540a <_ZN8touchgfx8Drawable8setWidthEs>
    setHeight(16);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2110      	movs	r1, #16
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7ff fdaa 	bl	8005428 <_ZN8touchgfx8Drawable9setHeightEs>
    TopBar.setPosition(0, 0, 128, 16);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 80058da:	2310      	movs	r3, #16
 80058dc:	9300      	str	r3, [sp, #0]
 80058de:	2380      	movs	r3, #128	; 0x80
 80058e0:	2200      	movs	r2, #0
 80058e2:	2100      	movs	r1, #0
 80058e4:	f7ff fd34 	bl	8005350 <_ZN8touchgfx8Drawable11setPositionEssss>
    TopBar.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80058ee:	23ff      	movs	r3, #255	; 0xff
 80058f0:	73fb      	strb	r3, [r7, #15]
 80058f2:	23ff      	movs	r3, #255	; 0xff
 80058f4:	73bb      	strb	r3, [r7, #14]
 80058f6:	23ff      	movs	r3, #255	; 0xff
 80058f8:	737b      	strb	r3, [r7, #13]
 80058fa:	7bfb      	ldrb	r3, [r7, #15]
 80058fc:	041b      	lsls	r3, r3, #16
 80058fe:	461a      	mov	r2, r3
 8005900:	7bbb      	ldrb	r3, [r7, #14]
 8005902:	021b      	lsls	r3, r3, #8
 8005904:	431a      	orrs	r2, r3
 8005906:	7b7b      	ldrb	r3, [r7, #13]
 8005908:	4313      	orrs	r3, r2
 800590a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800590e:	f107 0308 	add.w	r3, r7, #8
 8005912:	4611      	mov	r1, r2
 8005914:	4618      	mov	r0, r3
 8005916:	f7ff fc87 	bl	8005228 <_ZN8touchgfx9colortypeC1Em>
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	4619      	mov	r1, r3
 800591e:	4620      	mov	r0, r4
 8005920:	f7ff feea 	bl	80056f8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(TopBar);
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	332c      	adds	r3, #44	; 0x2c
 800592a:	4619      	mov	r1, r3
 800592c:	4610      	mov	r0, r2
 800592e:	f002 fcb3 	bl	8008298 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4618      	mov	r0, r3
 8005936:	3714      	adds	r7, #20
 8005938:	46bd      	mov	sp, r7
 800593a:	bd90      	pop	{r4, r7, pc}
 800593c:	08011d0c 	.word	0x08011d0c

08005940 <_ZN10TopBarBaseD1Ev>:

TopBarBase::~TopBarBase()
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	4a08      	ldr	r2, [pc, #32]	; (800596c <_ZN10TopBarBaseD1Ev+0x2c>)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	601a      	str	r2, [r3, #0]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	332c      	adds	r3, #44	; 0x2c
 8005952:	4618      	mov	r0, r3
 8005954:	f7ff ff82 	bl	800585c <_ZN8touchgfx3BoxD1Ev>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4618      	mov	r0, r3
 800595c:	f7ff feda 	bl	8005714 <_ZN8touchgfx9ContainerD1Ev>
{

}
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4618      	mov	r0, r3
 8005964:	3708      	adds	r7, #8
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	08011d0c 	.word	0x08011d0c

08005970 <_ZN10TopBarBaseD0Ev>:
TopBarBase::~TopBarBase()
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
}
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f7ff ffe1 	bl	8005940 <_ZN10TopBarBaseD1Ev>
 800597e:	2158      	movs	r1, #88	; 0x58
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f009 ff87 	bl	800f894 <_ZdlPvj>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4618      	mov	r0, r3
 800598a:	3708      	adds	r7, #8
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <_ZN10TopBarBase10initializeEv>:

void TopBarBase::initialize()
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]

}
 8005998:	bf00      	nop
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <_ZN8touchgfx4RectC1Essss>:
     * @param  rectX      The x coordinate.
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
 80059a4:	b480      	push	{r7}
 80059a6:	b085      	sub	sp, #20
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	4608      	mov	r0, r1
 80059ae:	4611      	mov	r1, r2
 80059b0:	461a      	mov	r2, r3
 80059b2:	4603      	mov	r3, r0
 80059b4:	817b      	strh	r3, [r7, #10]
 80059b6:	460b      	mov	r3, r1
 80059b8:	813b      	strh	r3, [r7, #8]
 80059ba:	4613      	mov	r3, r2
 80059bc:	80fb      	strh	r3, [r7, #6]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	897a      	ldrh	r2, [r7, #10]
 80059c2:	801a      	strh	r2, [r3, #0]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	893a      	ldrh	r2, [r7, #8]
 80059c8:	805a      	strh	r2, [r3, #2]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	88fa      	ldrh	r2, [r7, #6]
 80059ce:	809a      	strh	r2, [r3, #4]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	8b3a      	ldrh	r2, [r7, #24]
 80059d4:	80da      	strh	r2, [r3, #6]
    {
    }
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	4618      	mov	r0, r3
 80059da:	3714      	adds	r7, #20
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
    {
 80059ec:	4a06      	ldr	r2, [pc, #24]	; (8005a08 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	601a      	str	r2, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	3304      	adds	r3, #4
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7ff fe8c 	bl	8005714 <_ZN8touchgfx9ContainerD1Ev>
    }
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4618      	mov	r0, r3
 8005a00:	3708      	adds	r7, #8
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	08012974 	.word	0x08012974

08005a0c <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
    }
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f7ff ffe5 	bl	80059e4 <_ZN8touchgfx6ScreenD1Ev>
 8005a1a:	213c      	movs	r1, #60	; 0x3c
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f009 ff39 	bl	800f894 <_ZdlPvj>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4618      	mov	r0, r3
 8005a26:	3708      	adds	r7, #8
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
    {
    }
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
    {
    }
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
    {
    }
 8005a5c:	bf00      	nop
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
    {
    }
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	460b      	mov	r3, r1
 8005a86:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 8005a88:	bf00      	nop
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	3304      	adds	r3, #4
 8005aa2:	6839      	ldr	r1, [r7, #0]
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f002 fbf7 	bl	8008298 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8005aaa:	bf00      	nop
 8005aac:	3708      	adds	r7, #8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
	...

08005ab4 <_ZN10BackgroundD1Ev>:

class Background : public BackgroundBase
{
public:
    Background();
    virtual ~Background() {}
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	4a05      	ldr	r2, [pc, #20]	; (8005ad4 <_ZN10BackgroundD1Ev+0x20>)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	601a      	str	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f7ff fe97 	bl	80057f8 <_ZN14BackgroundBaseD1Ev>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4618      	mov	r0, r3
 8005ace:	3708      	adds	r7, #8
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	08011f54 	.word	0x08011f54

08005ad8 <_ZN10BackgroundD0Ev>:
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f7ff ffe7 	bl	8005ab4 <_ZN10BackgroundD1Ev>
 8005ae6:	2158      	movs	r1, #88	; 0x58
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f009 fed3 	bl	800f894 <_ZdlPvj>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4618      	mov	r0, r3
 8005af2:	3708      	adds	r7, #8
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <_ZN6TopBarD1Ev>:

class TopBar : public TopBarBase
{
public:
    TopBar();
    virtual ~TopBar() {}
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	4a05      	ldr	r2, [pc, #20]	; (8005b18 <_ZN6TopBarD1Ev+0x20>)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	601a      	str	r2, [r3, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f7ff ff19 	bl	8005940 <_ZN10TopBarBaseD1Ev>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4618      	mov	r0, r3
 8005b12:	3708      	adds	r7, #8
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	08011fe8 	.word	0x08011fe8

08005b1c <_ZN6TopBarD0Ev>:
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f7ff ffe7 	bl	8005af8 <_ZN6TopBarD1Ev>
 8005b2a:	2158      	movs	r1, #88	; 0x58
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f009 feb1 	bl	800f894 <_ZdlPvj>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4618      	mov	r0, r3
 8005b36:	3708      	adds	r7, #8
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <_ZN8touchgfx9TypedTextC1Et>:
    TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	460b      	mov	r3, r1
 8005b46:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 8005b48:	4a06      	ldr	r2, [pc, #24]	; (8005b64 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	601a      	str	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	887a      	ldrh	r2, [r7, #2]
 8005b52:	809a      	strh	r2, [r3, #4]
    }
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4618      	mov	r0, r3
 8005b58:	370c      	adds	r7, #12
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	08011a68 	.word	0x08011a68

08005b68 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4618      	mov	r0, r3
 8005b74:	2326      	movs	r3, #38	; 0x26
 8005b76:	461a      	mov	r2, r3
 8005b78:	2100      	movs	r1, #0
 8005b7a:	f009 ff37 	bl	800f9ec <memset>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4618      	mov	r0, r3
 8005b82:	f7ff fd61 	bl	8005648 <_ZN8touchgfx6WidgetC1Ev>
 8005b86:	4a16      	ldr	r2, [pc, #88]	; (8005be0 <_ZN8touchgfx8TextAreaC1Ev+0x78>)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	601a      	str	r2, [r3, #0]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	3328      	adds	r3, #40	; 0x28
 8005b90:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005b94:	4618      	mov	r0, r3
 8005b96:	f7ff ffd1 	bl	8005b3c <_ZN8touchgfx9TypedTextC1Et>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	3330      	adds	r3, #48	; 0x30
 8005b9e:	2100      	movs	r1, #0
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7ff fb41 	bl	8005228 <_ZN8touchgfx9colortypeC1Em>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	869a      	strh	r2, [r3, #52]	; 0x34
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	22ff      	movs	r2, #255	; 0xff
 8005bb0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	333c      	adds	r3, #60	; 0x3c
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f000 f8f2 	bl	8005dba <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    {
    }
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3708      	adds	r7, #8
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	08012644 	.word	0x08012644

08005be4 <_ZN8touchgfx8TextArea8setWidthEs>:

    virtual void setWidth(int16_t width)
 8005be4:	b590      	push	{r4, r7, lr}
 8005be6:	b087      	sub	sp, #28
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6178      	str	r0, [r7, #20]
 8005bec:	460b      	mov	r3, r1
 8005bee:	827b      	strh	r3, [r7, #18]
    {
        Widget::setWidth(width);
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8005bf6:	4611      	mov	r1, r2
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f7ff fc06 	bl	800540a <_ZN8touchgfx8Drawable8setWidthEs>
        boundingArea = calculateBoundingArea();
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	3384      	adds	r3, #132	; 0x84
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	697c      	ldr	r4, [r7, #20]
 8005c08:	463a      	mov	r2, r7
 8005c0a:	6979      	ldr	r1, [r7, #20]
 8005c0c:	4610      	mov	r0, r2
 8005c0e:	4798      	blx	r3
 8005c10:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8005c14:	463a      	mov	r2, r7
 8005c16:	ca07      	ldmia	r2, {r0, r1, r2}
 8005c18:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8005c1c:	bf00      	nop
 8005c1e:	371c      	adds	r7, #28
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd90      	pop	{r4, r7, pc}

08005c24 <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 8005c24:	b590      	push	{r4, r7, lr}
 8005c26:	b087      	sub	sp, #28
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6178      	str	r0, [r7, #20]
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	827b      	strh	r3, [r7, #18]
    {
        Widget::setHeight(height);
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8005c36:	4611      	mov	r1, r2
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f7ff fbf5 	bl	8005428 <_ZN8touchgfx8Drawable9setHeightEs>
        boundingArea = calculateBoundingArea();
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	3384      	adds	r3, #132	; 0x84
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	697c      	ldr	r4, [r7, #20]
 8005c48:	463a      	mov	r2, r7
 8005c4a:	6979      	ldr	r1, [r7, #20]
 8005c4c:	4610      	mov	r0, r2
 8005c4e:	4798      	blx	r3
 8005c50:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8005c54:	463a      	mov	r2, r7
 8005c56:	ca07      	ldmia	r2, {r0, r1, r2}
 8005c58:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8005c5c:	bf00      	nop
 8005c5e:	371c      	adds	r7, #28
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd90      	pop	{r4, r7, pc}

08005c64 <_ZNK8touchgfx8TextArea12getSolidRectEv>:

    virtual Rect getSolidRect() const
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
    {
        return Rect();
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f7ff fae9 	bl	8005246 <_ZN8touchgfx4RectC1Ev>
    }
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	3708      	adds	r7, #8
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <_ZN8touchgfx8TextArea8setAlphaEh>:
    }

    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	460b      	mov	r3, r1
 8005c86:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	78fa      	ldrb	r2, [r7, #3]
 8005c8c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    }
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 8005c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c9e:	b085      	sub	sp, #20
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8005ca8:	687e      	ldr	r6, [r7, #4]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	3334      	adds	r3, #52	; 0x34
 8005cb0:	681c      	ldr	r4, [r3, #0]
 8005cb2:	887d      	ldrh	r5, [r7, #2]
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 f869 	bl	8005d8c <_ZNK8touchgfx8TextArea12getTypedTextEv>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	60fb      	str	r3, [r7, #12]
     *
     * @return The font.
     */
    FORCE_INLINE_FUNCTION const Font* getFont() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8005cbe:	4b1d      	ldr	r3, [pc, #116]	; (8005d34 <_ZN8touchgfx8TextArea12setBaselineYEs+0x98>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d105      	bne.n	8005cd2 <_ZN8touchgfx8TextArea12setBaselineYEs+0x36>
 8005cc6:	4b1c      	ldr	r3, [pc, #112]	; (8005d38 <_ZN8touchgfx8TextArea12setBaselineYEs+0x9c>)
 8005cc8:	4a1c      	ldr	r2, [pc, #112]	; (8005d3c <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 8005cca:	216c      	movs	r1, #108	; 0x6c
 8005ccc:	481c      	ldr	r0, [pc, #112]	; (8005d40 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa4>)
 8005cce:	f009 fe0f 	bl	800f8f0 <__assert_func>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	60bb      	str	r3, [r7, #8]
        return typedTextId < numberOfTypedTexts;
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	889a      	ldrh	r2, [r3, #4]
 8005cda:	4b1a      	ldr	r3, [pc, #104]	; (8005d44 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa8>)
 8005cdc:	881b      	ldrh	r3, [r3, #0]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	bf34      	ite	cc
 8005ce2:	2301      	movcc	r3, #1
 8005ce4:	2300      	movcs	r3, #0
 8005ce6:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d105      	bne.n	8005cf8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>
 8005cec:	4b16      	ldr	r3, [pc, #88]	; (8005d48 <_ZN8touchgfx8TextArea12setBaselineYEs+0xac>)
 8005cee:	4a13      	ldr	r2, [pc, #76]	; (8005d3c <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 8005cf0:	216d      	movs	r1, #109	; 0x6d
 8005cf2:	4813      	ldr	r0, [pc, #76]	; (8005d40 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa4>)
 8005cf4:	f009 fdfc 	bl	800f8f0 <__assert_func>
 8005cf8:	bf00      	nop
        return fonts[typedTexts[typedTextId].fontIdx];
 8005cfa:	4b14      	ldr	r3, [pc, #80]	; (8005d4c <_ZN8touchgfx8TextArea12setBaselineYEs+0xb0>)
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	4b0d      	ldr	r3, [pc, #52]	; (8005d34 <_ZN8touchgfx8TextArea12setBaselineYEs+0x98>)
 8005d00:	6819      	ldr	r1, [r3, #0]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	889b      	ldrh	r3, [r3, #4]
 8005d06:	005b      	lsls	r3, r3, #1
 8005d08:	440b      	add	r3, r1
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	4413      	add	r3, r2
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	3230      	adds	r2, #48	; 0x30
 8005d16:	6812      	ldr	r2, [r2, #0]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	4790      	blx	r2
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	1aeb      	subs	r3, r5, r3
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	b21b      	sxth	r3, r3
 8005d24:	4619      	mov	r1, r3
 8005d26:	4630      	mov	r0, r6
 8005d28:	47a0      	blx	r4
    }
 8005d2a:	bf00      	nop
 8005d2c:	3714      	adds	r7, #20
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d32:	bf00      	nop
 8005d34:	20001324 	.word	0x20001324
 8005d38:	08010dc4 	.word	0x08010dc4
 8005d3c:	08010e08 	.word	0x08010e08
 8005d40:	08010e44 	.word	0x08010e44
 8005d44:	20001328 	.word	0x20001328
 8005d48:	08010e88 	.word	0x08010e88
 8005d4c:	2000132c 	.word	0x2000132c

08005d50 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     * @param  x         The x coordinate of the TextArea.
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	460b      	mov	r3, r1
 8005d5a:	807b      	strh	r3, [r7, #2]
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	3330      	adds	r3, #48	; 0x30
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8005d6e:	4610      	mov	r0, r2
 8005d70:	4798      	blx	r3
        setBaselineY(baselineY);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	3364      	adds	r3, #100	; 0x64
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005d7e:	4611      	mov	r1, r2
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	4798      	blx	r3
    }
 8005d84:	bf00      	nop
 8005d86:	3708      	adds	r7, #8
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <_ZNK8touchgfx8TextArea12getTypedTextEv>:
    /**
     * Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    const TypedText& getTypedText() const
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	3328      	adds	r3, #40	; 0x28
    }
 8005d98:	4618      	mov	r0, r3
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     *
     * @return A pointer to the second wildcard, if this text area has two wildcards, otherwise 0.
     *
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8005dac:	2300      	movs	r3, #0
    }
 8005dae:	4618      	mov	r0, r3
 8005db0:	370c      	adds	r7, #12
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr

08005dba <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>:
        }

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
 8005dba:	b580      	push	{r7, lr}
 8005dbc:	b084      	sub	sp, #16
 8005dbe:	af02      	add	r7, sp, #8
 8005dc0:	6078      	str	r0, [r7, #4]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
              text(0)
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8005dc8:	9300      	str	r3, [sp, #0]
 8005dca:	f04f 33ff 	mov.w	r3, #4294967295
 8005dce:	2200      	movs	r2, #0
 8005dd0:	2100      	movs	r1, #0
 8005dd2:	f7ff fde7 	bl	80059a4 <_ZN8touchgfx4RectC1Essss>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	609a      	str	r2, [r3, #8]
        {
        }
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4618      	mov	r0, r3
 8005de0:	3708      	adds	r7, #8
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
	...

08005de8 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	4a08      	ldr	r2, [pc, #32]	; (8005e14 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	601a      	str	r2, [r3, #0]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	3328      	adds	r3, #40	; 0x28
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f7fe faae 	bl	800435c <_ZN8touchgfx9TypedTextD1Ev>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4618      	mov	r0, r3
 8005e04:	f7ff fc32 	bl	800566c <_ZN8touchgfx6WidgetD1Ev>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3708      	adds	r7, #8
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	08012644 	.word	0x08012644

08005e18 <_ZN8touchgfx8TextAreaD0Ev>:
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f7ff ffe1 	bl	8005de8 <_ZN8touchgfx8TextAreaD1Ev>
 8005e26:	2148      	movs	r1, #72	; 0x48
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f009 fd33 	bl	800f894 <_ZdlPvj>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4618      	mov	r0, r3
 8005e32:	3708      	adds	r7, #8
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
 *
 */
class TextAreaWithWildcardBase : public TextArea
{
public:
    TextAreaWithWildcardBase()
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
        : TextArea()
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7ff fe90 	bl	8005b68 <_ZN8touchgfx8TextAreaC1Ev>
 8005e48:	4a03      	ldr	r2, [pc, #12]	; (8005e58 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	601a      	str	r2, [r3, #0]
    {
    }
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4618      	mov	r0, r3
 8005e52:	3708      	adds	r7, #8
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	0801273c 	.word	0x0801273c

08005e5c <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:

    virtual void draw(const Rect& area) const;

    virtual void invalidateContent() const
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b082      	sub	sp, #8
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
    {
        Widget::invalidateContent();
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7ff fa54 	bl	8005314 <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 8005e6c:	bf00      	nop
 8005e6e:	3708      	adds	r7, #8
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

protected:
    virtual TextArea::BoundingArea calculateBoundingArea() const
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
    {
        return TextArea::BoundingArea();
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f7ff ff9b 	bl	8005dba <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    }
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	3708      	adds	r7, #8
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	4a05      	ldr	r2, [pc, #20]	; (8005eac <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	601a      	str	r2, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f7ff ffa3 	bl	8005de8 <_ZN8touchgfx8TextAreaD1Ev>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3708      	adds	r7, #8
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	0801273c 	.word	0x0801273c

08005eb0 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f7ff ffe7 	bl	8005e8c <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 8005ebe:	2148      	movs	r1, #72	; 0x48
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f009 fce7 	bl	800f894 <_ZdlPvj>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3708      	adds	r7, #8
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
{
public:
    TextAreaWithOneWildcard()
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
        : TextAreaWithWildcardBase(), wc1(0)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4618      	mov	r0, r3
 8005edc:	f7ff ffac 	bl	8005e38 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 8005ee0:	4a05      	ldr	r2, [pc, #20]	; (8005ef8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	601a      	str	r2, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	649a      	str	r2, [r3, #72]	; 0x48
    {
    }
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3708      	adds	r7, #8
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	08011e08 	.word	0x08011e08

08005efc <_ZN8touchgfx23TextAreaWithOneWildcard12setWildcard1EPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard1(const Unicode::UnicodeChar* value)
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
    {
        wc1 = value;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	683a      	ldr	r2, [r7, #0]
 8005f0a:	649a      	str	r2, [r3, #72]	; 0x48
    }
 8005f0c:	bf00      	nop
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:

    virtual const Unicode::UnicodeChar* getWildcard1() const
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
    {
        return wc1;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    }
 8005f24:	4618      	mov	r0, r3
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
    {
        setWildcard1(value);
 8005f3a:	6839      	ldr	r1, [r7, #0]
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f7ff ffdd 	bl	8005efc <_ZN8touchgfx23TextAreaWithOneWildcard12setWildcard1EPKt>
    }
 8005f42:	bf00      	nop
 8005f44:	3708      	adds	r7, #8
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
	...

08005f4c <_ZN8touchgfx4ViewI19MainScreenPresenterED1Ev>:
class View : public Screen
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	4a05      	ldr	r2, [pc, #20]	; (8005f6c <_ZN8touchgfx4ViewI19MainScreenPresenterED1Ev+0x20>)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	601a      	str	r2, [r3, #0]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f7ff fd41 	bl	80059e4 <_ZN8touchgfx6ScreenD1Ev>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4618      	mov	r0, r3
 8005f66:	3708      	adds	r7, #8
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	08011dd4 	.word	0x08011dd4

08005f70 <_ZN8touchgfx4ViewI19MainScreenPresenterED0Ev>:
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b082      	sub	sp, #8
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f7ff ffe7 	bl	8005f4c <_ZN8touchgfx4ViewI19MainScreenPresenterED1Ev>
 8005f7e:	2140      	movs	r1, #64	; 0x40
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f009 fc87 	bl	800f894 <_ZdlPvj>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3708      	adds	r7, #8
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <_ZN18MainScreenViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/mainscreen_screen/MainScreenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

MainScreenViewBase::MainScreenViewBase()
 8005f90:	b590      	push	{r4, r7, lr}
 8005f92:	b09f      	sub	sp, #124	; 0x7c
 8005f94:	af02      	add	r7, sp, #8
 8005f96:	6178      	str	r0, [r7, #20]
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f000 f9ec 	bl	8006378 <_ZN8touchgfx4ViewI19MainScreenPresenterEC1Ev>
 8005fa0:	4ac3      	ldr	r2, [pc, #780]	; (80062b0 <_ZN18MainScreenViewBaseC1Ev+0x320>)
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	601a      	str	r2, [r3, #0]
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	3340      	adds	r3, #64	; 0x40
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7ff fb80 	bl	80056b0 <_ZN8touchgfx3BoxC1Ev>
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	336c      	adds	r3, #108	; 0x6c
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f000 fc63 	bl	8006880 <_ZN10BackgroundC1Ev>
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	33c4      	adds	r3, #196	; 0xc4
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f000 fc7c 	bl	80068bc <_ZN6TopBarC1Ev>
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7ff fdcc 	bl	8005b68 <_ZN8touchgfx8TextAreaC1Ev>
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7ff ff7a 	bl	8005ed0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
{
    __background.setPosition(0, 0, 128, 64);
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8005fe2:	2340      	movs	r3, #64	; 0x40
 8005fe4:	9300      	str	r3, [sp, #0]
 8005fe6:	2380      	movs	r3, #128	; 0x80
 8005fe8:	2200      	movs	r2, #0
 8005fea:	2100      	movs	r1, #0
 8005fec:	f7ff f9b0 	bl	8005350 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006002:	2300      	movs	r3, #0
 8006004:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8006008:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800600c:	041b      	lsls	r3, r3, #16
 800600e:	461a      	mov	r2, r3
 8006010:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006014:	021b      	lsls	r3, r3, #8
 8006016:	431a      	orrs	r2, r3
 8006018:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800601c:	4313      	orrs	r3, r2
 800601e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006022:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006026:	4611      	mov	r1, r2
 8006028:	4618      	mov	r0, r3
 800602a:	f7ff f8fd 	bl	8005228 <_ZN8touchgfx9colortypeC1Em>
 800602e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006030:	4619      	mov	r1, r3
 8006032:	4620      	mov	r0, r4
 8006034:	f7ff fb60 	bl	80056f8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 8006038:	697a      	ldr	r2, [r7, #20]
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	3340      	adds	r3, #64	; 0x40
 800603e:	4619      	mov	r1, r3
 8006040:	4610      	mov	r0, r2
 8006042:	f7ff fd27 	bl	8005a94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    background1.setXY(0, 0);
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	336c      	adds	r3, #108	; 0x6c
 800604a:	2200      	movs	r2, #0
 800604c:	2100      	movs	r1, #0
 800604e:	4618      	mov	r0, r3
 8006050:	f7ff f9bd 	bl	80053ce <_ZN8touchgfx8Drawable5setXYEss>
    add(background1);
 8006054:	697a      	ldr	r2, [r7, #20]
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	336c      	adds	r3, #108	; 0x6c
 800605a:	4619      	mov	r1, r3
 800605c:	4610      	mov	r0, r2
 800605e:	f7ff fd19 	bl	8005a94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    topBar1.setXY(0, 0);
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	33c4      	adds	r3, #196	; 0xc4
 8006066:	2200      	movs	r2, #0
 8006068:	2100      	movs	r1, #0
 800606a:	4618      	mov	r0, r3
 800606c:	f7ff f9af 	bl	80053ce <_ZN8touchgfx8Drawable5setXYEss>
    add(topBar1);
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	33c4      	adds	r3, #196	; 0xc4
 8006076:	4619      	mov	r1, r3
 8006078:	4610      	mov	r0, r2
 800607a:	f7ff fd0b 	bl	8005a94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    Tittle.setPosition(0, 1, 128, 15);
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	f503 708e 	add.w	r0, r3, #284	; 0x11c
 8006084:	230f      	movs	r3, #15
 8006086:	9300      	str	r3, [sp, #0]
 8006088:	2380      	movs	r3, #128	; 0x80
 800608a:	2201      	movs	r2, #1
 800608c:	2100      	movs	r1, #0
 800608e:	f7ff f95f 	bl	8005350 <_ZN8touchgfx8Drawable11setPositionEssss>
    Tittle.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	f503 748e 	add.w	r4, r3, #284	; 0x11c
 8006098:	2300      	movs	r3, #0
 800609a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800609e:	2300      	movs	r3, #0
 80060a0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80060a4:	2300      	movs	r3, #0
 80060a6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 80060aa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80060ae:	041b      	lsls	r3, r3, #16
 80060b0:	461a      	mov	r2, r3
 80060b2:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80060b6:	021b      	lsls	r3, r3, #8
 80060b8:	431a      	orrs	r2, r3
 80060ba:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80060be:	4313      	orrs	r3, r2
 80060c0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80060c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80060c8:	4611      	mov	r1, r2
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7ff f8ac 	bl	8005228 <_ZN8touchgfx9colortypeC1Em>
 80060d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060d2:	653c      	str	r4, [r7, #80]	; 0x50
 80060d4:	623b      	str	r3, [r7, #32]
        color = newColor;
 80060d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060d8:	6a3a      	ldr	r2, [r7, #32]
 80060da:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80060dc:	bf00      	nop
    Tittle.setLinespacing(0);
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80060e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80060e6:	2300      	movs	r3, #0
 80060e8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
        linespace = space;
 80060ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060ee:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80060f2:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 80060f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	3384      	adds	r3, #132	; 0x84
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80060fe:	463a      	mov	r2, r7
 8006100:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006102:	4610      	mov	r0, r2
 8006104:	4798      	blx	r3
 8006106:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800610a:	463a      	mov	r2, r7
 800610c:	ca07      	ldmia	r2, {r0, r1, r2}
 800610e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8006112:	bf00      	nop
    Tittle.setTypedText(touchgfx::TypedText(T___SINGLEUSE_6PS8));
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	f503 748e 	add.w	r4, r3, #284	; 0x11c
 800611a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800611e:	2102      	movs	r1, #2
 8006120:	4618      	mov	r0, r3
 8006122:	f7ff fd0b 	bl	8005b3c <_ZN8touchgfx9TypedTextC1Et>
 8006126:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800612a:	4619      	mov	r1, r3
 800612c:	4620      	mov	r0, r4
 800612e:	f003 fd93 	bl	8009c58 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8006132:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006136:	4618      	mov	r0, r3
 8006138:	f7fe f910 	bl	800435c <_ZN8touchgfx9TypedTextD1Ev>
    add(Tittle);
 800613c:	697a      	ldr	r2, [r7, #20]
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006144:	4619      	mov	r1, r3
 8006146:	4610      	mov	r0, r2
 8006148:	f7ff fca4 	bl	8005a94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    FPS.setPosition(0, 16, 128, 48);
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	f503 70b2 	add.w	r0, r3, #356	; 0x164
 8006152:	2330      	movs	r3, #48	; 0x30
 8006154:	9300      	str	r3, [sp, #0]
 8006156:	2380      	movs	r3, #128	; 0x80
 8006158:	2210      	movs	r2, #16
 800615a:	2100      	movs	r1, #0
 800615c:	f7ff f8f8 	bl	8005350 <_ZN8touchgfx8Drawable11setPositionEssss>
    FPS.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	f503 74b2 	add.w	r4, r3, #356	; 0x164
 8006166:	23ff      	movs	r3, #255	; 0xff
 8006168:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800616c:	23ff      	movs	r3, #255	; 0xff
 800616e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8006172:	23ff      	movs	r3, #255	; 0xff
 8006174:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 8006178:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800617c:	041b      	lsls	r3, r3, #16
 800617e:	461a      	mov	r2, r3
 8006180:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8006184:	021b      	lsls	r3, r3, #8
 8006186:	431a      	orrs	r2, r3
 8006188:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800618c:	4313      	orrs	r3, r2
 800618e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006192:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006196:	4611      	mov	r1, r2
 8006198:	4618      	mov	r0, r3
 800619a:	f7ff f845 	bl	8005228 <_ZN8touchgfx9colortypeC1Em>
 800619e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061a0:	663c      	str	r4, [r7, #96]	; 0x60
 80061a2:	61fb      	str	r3, [r7, #28]
        color = newColor;
 80061a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061a6:	69fa      	ldr	r2, [r7, #28]
 80061a8:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80061aa:	bf00      	nop
    FPS.setLinespacing(0);
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80061b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80061b4:	2300      	movs	r3, #0
 80061b6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        linespace = space;
 80061ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061bc:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80061c0:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 80061c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	3384      	adds	r3, #132	; 0x84
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 80061cc:	463a      	mov	r2, r7
 80061ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80061d0:	4610      	mov	r0, r2
 80061d2:	4798      	blx	r3
 80061d4:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 80061d8:	463a      	mov	r2, r7
 80061da:	ca07      	ldmia	r2, {r0, r1, r2}
 80061dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 80061e0:	bf00      	nop
    Unicode::snprintf(FPSBuffer, FPS_SIZE, "%s", touchgfx::TypedText(T_FPSWILDCARD).getText());
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	f503 74d8 	add.w	r4, r3, #432	; 0x1b0
 80061e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80061ec:	2100      	movs	r1, #0
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7ff fca4 	bl	8005b3c <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80061f4:	4b2f      	ldr	r3, [pc, #188]	; (80062b4 <_ZN18MainScreenViewBaseC1Ev+0x324>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d105      	bne.n	8006208 <_ZN18MainScreenViewBaseC1Ev+0x278>
 80061fc:	4b2e      	ldr	r3, [pc, #184]	; (80062b8 <_ZN18MainScreenViewBaseC1Ev+0x328>)
 80061fe:	4a2f      	ldr	r2, [pc, #188]	; (80062bc <_ZN18MainScreenViewBaseC1Ev+0x32c>)
 8006200:	2160      	movs	r1, #96	; 0x60
 8006202:	482f      	ldr	r0, [pc, #188]	; (80062c0 <_ZN18MainScreenViewBaseC1Ev+0x330>)
 8006204:	f009 fb74 	bl	800f8f0 <__assert_func>
 8006208:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800620c:	66fb      	str	r3, [r7, #108]	; 0x6c
        return typedTextId < numberOfTypedTexts;
 800620e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006210:	889a      	ldrh	r2, [r3, #4]
 8006212:	4b2c      	ldr	r3, [pc, #176]	; (80062c4 <_ZN18MainScreenViewBaseC1Ev+0x334>)
 8006214:	881b      	ldrh	r3, [r3, #0]
 8006216:	429a      	cmp	r2, r3
 8006218:	bf34      	ite	cc
 800621a:	2301      	movcc	r3, #1
 800621c:	2300      	movcs	r3, #0
 800621e:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8006220:	2b00      	cmp	r3, #0
 8006222:	d105      	bne.n	8006230 <_ZN18MainScreenViewBaseC1Ev+0x2a0>
 8006224:	4b28      	ldr	r3, [pc, #160]	; (80062c8 <_ZN18MainScreenViewBaseC1Ev+0x338>)
 8006226:	4a25      	ldr	r2, [pc, #148]	; (80062bc <_ZN18MainScreenViewBaseC1Ev+0x32c>)
 8006228:	2161      	movs	r1, #97	; 0x61
 800622a:	4825      	ldr	r0, [pc, #148]	; (80062c0 <_ZN18MainScreenViewBaseC1Ev+0x330>)
 800622c:	f009 fb60 	bl	800f8f0 <__assert_func>
 8006230:	bf00      	nop
        return texts->getText(typedTextId);
 8006232:	4b26      	ldr	r3, [pc, #152]	; (80062cc <_ZN18MainScreenViewBaseC1Ev+0x33c>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8006238:	4611      	mov	r1, r2
 800623a:	4618      	mov	r0, r3
 800623c:	f000 fa78 	bl	8006730 <_ZNK8touchgfx5Texts7getTextEt>
 8006240:	4603      	mov	r3, r0
 8006242:	bf00      	nop
 8006244:	4a22      	ldr	r2, [pc, #136]	; (80062d0 <_ZN18MainScreenViewBaseC1Ev+0x340>)
 8006246:	2104      	movs	r1, #4
 8006248:	4620      	mov	r0, r4
 800624a:	f008 f9d9 	bl	800e600 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800624e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006252:	4618      	mov	r0, r3
 8006254:	f7fe f882 	bl	800435c <_ZN8touchgfx9TypedTextD1Ev>
    FPS.setWildcard(FPSBuffer);
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	f503 72b2 	add.w	r2, r3, #356	; 0x164
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8006264:	4619      	mov	r1, r3
 8006266:	4610      	mov	r0, r2
 8006268:	f7ff fe62 	bl	8005f30 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    FPS.setTypedText(touchgfx::TypedText(T___SINGLEUSE_WK2R));
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	f503 74b2 	add.w	r4, r3, #356	; 0x164
 8006272:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006276:	2101      	movs	r1, #1
 8006278:	4618      	mov	r0, r3
 800627a:	f7ff fc5f 	bl	8005b3c <_ZN8touchgfx9TypedTextC1Et>
 800627e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006282:	4619      	mov	r1, r3
 8006284:	4620      	mov	r0, r4
 8006286:	f003 fce7 	bl	8009c58 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800628a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800628e:	4618      	mov	r0, r3
 8006290:	f7fe f864 	bl	800435c <_ZN8touchgfx9TypedTextD1Ev>
    add(FPS);
 8006294:	697a      	ldr	r2, [r7, #20]
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800629c:	4619      	mov	r1, r3
 800629e:	4610      	mov	r0, r2
 80062a0:	f7ff fbf8 	bl	8005a94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	4618      	mov	r0, r3
 80062a8:	3774      	adds	r7, #116	; 0x74
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd90      	pop	{r4, r7, pc}
 80062ae:	bf00      	nop
 80062b0:	08011da0 	.word	0x08011da0
 80062b4:	20001324 	.word	0x20001324
 80062b8:	08010dc4 	.word	0x08010dc4
 80062bc:	08010ec8 	.word	0x08010ec8
 80062c0:	08010e44 	.word	0x08010e44
 80062c4:	20001328 	.word	0x20001328
 80062c8:	08010e88 	.word	0x08010e88
 80062cc:	20001330 	.word	0x20001330
 80062d0:	08010f00 	.word	0x08010f00

080062d4 <_ZN18MainScreenViewBaseD1Ev>:

MainScreenViewBase::~MainScreenViewBase()
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b082      	sub	sp, #8
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	4a13      	ldr	r2, [pc, #76]	; (800632c <_ZN18MainScreenViewBaseD1Ev+0x58>)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	601a      	str	r2, [r3, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80062e8:	4618      	mov	r0, r3
 80062ea:	f000 f85b 	bl	80063a4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80062f4:	4618      	mov	r0, r3
 80062f6:	f7ff fd77 	bl	8005de8 <_ZN8touchgfx8TextAreaD1Ev>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	33c4      	adds	r3, #196	; 0xc4
 80062fe:	4618      	mov	r0, r3
 8006300:	f7ff fbfa 	bl	8005af8 <_ZN6TopBarD1Ev>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	336c      	adds	r3, #108	; 0x6c
 8006308:	4618      	mov	r0, r3
 800630a:	f7ff fbd3 	bl	8005ab4 <_ZN10BackgroundD1Ev>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	3340      	adds	r3, #64	; 0x40
 8006312:	4618      	mov	r0, r3
 8006314:	f7ff faa2 	bl	800585c <_ZN8touchgfx3BoxD1Ev>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4618      	mov	r0, r3
 800631c:	f7ff fe16 	bl	8005f4c <_ZN8touchgfx4ViewI19MainScreenPresenterED1Ev>
{

}
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4618      	mov	r0, r3
 8006324:	3708      	adds	r7, #8
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	08011da0 	.word	0x08011da0

08006330 <_ZN18MainScreenViewBaseD0Ev>:
MainScreenViewBase::~MainScreenViewBase()
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
}
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f7ff ffcb 	bl	80062d4 <_ZN18MainScreenViewBaseD1Ev>
 800633e:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f009 faa6 	bl	800f894 <_ZdlPvj>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4618      	mov	r0, r3
 800634c:	3708      	adds	r7, #8
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <_ZN18MainScreenViewBase11setupScreenEv>:

void MainScreenViewBase::setupScreen()
{
 8006352:	b580      	push	{r7, lr}
 8006354:	b082      	sub	sp, #8
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
    background1.initialize();
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	336c      	adds	r3, #108	; 0x6c
 800635e:	4618      	mov	r0, r3
 8006360:	f000 faa0 	bl	80068a4 <_ZN10Background10initializeEv>
    topBar1.initialize();
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	33c4      	adds	r3, #196	; 0xc4
 8006368:	4618      	mov	r0, r3
 800636a:	f000 fab9 	bl	80068e0 <_ZN6TopBar10initializeEv>
}
 800636e:	bf00      	nop
 8006370:	3708      	adds	r7, #8
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
	...

08006378 <_ZN8touchgfx4ViewI19MainScreenPresenterEC1Ev>:
    View()
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4618      	mov	r0, r3
 8006384:	f006 fcb2 	bl	800ccec <_ZN8touchgfx6ScreenC1Ev>
 8006388:	4a05      	ldr	r2, [pc, #20]	; (80063a0 <_ZN8touchgfx4ViewI19MainScreenPresenterEC1Ev+0x28>)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	601a      	str	r2, [r3, #0]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4618      	mov	r0, r3
 8006398:	3708      	adds	r7, #8
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	08011dd4 	.word	0x08011dd4

080063a4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	4a05      	ldr	r2, [pc, #20]	; (80063c4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	601a      	str	r2, [r3, #0]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4618      	mov	r0, r3
 80063b6:	f7ff fd69 	bl	8005e8c <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4618      	mov	r0, r3
 80063be:	3708      	adds	r7, #8
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	08011e08 	.word	0x08011e08

080063c8 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f7ff ffe7 	bl	80063a4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80063d6:	214c      	movs	r1, #76	; 0x4c
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f009 fa5b 	bl	800f894 <_ZdlPvj>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4618      	mov	r0, r3
 80063e2:	3708      	adds	r7, #8
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 80063e8:	b480      	push	{r7}
 80063ea:	af00      	add	r7, sp, #0
    return bitmap_database;
 80063ec:	4b02      	ldr	r3, [pc, #8]	; (80063f8 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr
 80063f8:	08011e90 	.word	0x08011e90

080063fc <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 80063fc:	b480      	push	{r7}
 80063fe:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8006400:	2301      	movs	r3, #1
}
 8006402:	4618      	mov	r0, r3
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 800640c:	b480      	push	{r7}
 800640e:	b085      	sub	sp, #20
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	460b      	mov	r3, r1
 8006416:	607a      	str	r2, [r7, #4]
 8006418:	817b      	strh	r3, [r7, #10]
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
 800641a:	2300      	movs	r3, #0
    }
 800641c:	4618      	mov	r0, r3
 800641e:	3714      	adds	r7, #20
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8006430:	2300      	movs	r3, #0
    }
 8006432:	4618      	mov	r0, r3
 8006434:	370c      	adds	r7, #12
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr

0800643e <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800643e:	b480      	push	{r7}
 8006440:	b083      	sub	sp, #12
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8006446:	2300      	movs	r3, #0
    }
 8006448:	4618      	mov	r0, r3
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8006454:	b480      	push	{r7}
 8006456:	b085      	sub	sp, #20
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	4613      	mov	r3, r2
 8006460:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 8006462:	4a07      	ldr	r2, [pc, #28]	; (8006480 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6013      	str	r3, [r2, #0]
        fonts = f;
 8006468:	4a06      	ldr	r2, [pc, #24]	; (8006484 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 800646e:	4a06      	ldr	r2, [pc, #24]	; (8006488 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8006470:	88fb      	ldrh	r3, [r7, #6]
 8006472:	8013      	strh	r3, [r2, #0]
    }
 8006474:	bf00      	nop
 8006476:	3714      	adds	r7, #20
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr
 8006480:	20001324 	.word	0x20001324
 8006484:	2000132c 	.word	0x2000132c
 8006488:	20001328 	.word	0x20001328

0800648c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800648c:	b40e      	push	{r1, r2, r3}
 800648e:	b580      	push	{r7, lr}
 8006490:	b085      	sub	sp, #20
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8006496:	f107 0320 	add.w	r3, r7, #32
 800649a:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	69fa      	ldr	r2, [r7, #28]
 80064a0:	2100      	movs	r1, #0
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f006 f858 	bl	800c558 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80064a8:	4603      	mov	r3, r0
 80064aa:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80064ac:	89fb      	ldrh	r3, [r7, #14]
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3714      	adds	r7, #20
 80064b2:	46bd      	mov	sp, r7
 80064b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064b8:	b003      	add	sp, #12
 80064ba:	4770      	bx	lr

080064bc <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80064bc:	b40c      	push	{r2, r3}
 80064be:	b580      	push	{r7, lr}
 80064c0:	b084      	sub	sp, #16
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
 80064c6:	460b      	mov	r3, r1
 80064c8:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 80064ca:	f107 031c 	add.w	r3, r7, #28
 80064ce:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 80064d0:	78f9      	ldrb	r1, [r7, #3]
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	69ba      	ldr	r2, [r7, #24]
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f006 f83e 	bl	800c558 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80064dc:	4603      	mov	r3, r0
 80064de:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80064e0:	89fb      	ldrh	r3, [r7, #14]
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3710      	adds	r7, #16
 80064e6:	46bd      	mov	sp, r7
 80064e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064ec:	b002      	add	sp, #8
 80064ee:	4770      	bx	lr

080064f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b08a      	sub	sp, #40	; 0x28
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	460b      	mov	r3, r1
 80064fa:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006500:	2b00      	cmp	r3, #0
 8006502:	d016      	beq.n	8006532 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	3322      	adds	r3, #34	; 0x22
 8006508:	627b      	str	r3, [r7, #36]	; 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800650a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650c:	8adb      	ldrh	r3, [r3, #22]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d105      	bne.n	800651e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8006512:	4b43      	ldr	r3, [pc, #268]	; (8006620 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8006514:	4a43      	ldr	r2, [pc, #268]	; (8006624 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8006516:	21c5      	movs	r1, #197	; 0xc5
 8006518:	4843      	ldr	r0, [pc, #268]	; (8006628 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800651a:	f009 f9e9 	bl	800f8f0 <__assert_func>
            return buffer[pos];
 800651e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006520:	8a9b      	ldrh	r3, [r3, #20]
 8006522:	461a      	mov	r2, r3
 8006524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006526:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d001      	beq.n	8006532 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800652e:	2301      	movs	r3, #1
 8006530:	e000      	b.n	8006534 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8006532:	2300      	movs	r3, #0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d06a      	beq.n	800660e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f007 fab2 	bl	800daa2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	3322      	adds	r3, #34	; 0x22
 8006542:	623b      	str	r3, [r7, #32]
 8006544:	2301      	movs	r3, #1
 8006546:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8006548:	6a3b      	ldr	r3, [r7, #32]
 800654a:	8adb      	ldrh	r3, [r3, #22]
 800654c:	8bfa      	ldrh	r2, [r7, #30]
 800654e:	429a      	cmp	r2, r3
 8006550:	d305      	bcc.n	800655e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8006552:	4b36      	ldr	r3, [pc, #216]	; (800662c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8006554:	4a36      	ldr	r2, [pc, #216]	; (8006630 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8006556:	21cb      	movs	r1, #203	; 0xcb
 8006558:	4833      	ldr	r0, [pc, #204]	; (8006628 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800655a:	f009 f9c9 	bl	800f8f0 <__assert_func>
            const uint16_t index = pos + offset;
 800655e:	6a3b      	ldr	r3, [r7, #32]
 8006560:	8a9a      	ldrh	r2, [r3, #20]
 8006562:	8bfb      	ldrh	r3, [r7, #30]
 8006564:	4413      	add	r3, r2
 8006566:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8006568:	8bbb      	ldrh	r3, [r7, #28]
 800656a:	2b09      	cmp	r3, #9
 800656c:	d801      	bhi.n	8006572 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 800656e:	8bbb      	ldrh	r3, [r7, #28]
 8006570:	e001      	b.n	8006576 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8006572:	8bbb      	ldrh	r3, [r7, #28]
 8006574:	3b0a      	subs	r3, #10
 8006576:	6a3a      	ldr	r2, [r7, #32]
 8006578:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800657c:	f640 123f 	movw	r2, #2367	; 0x93f
 8006580:	4293      	cmp	r3, r2
 8006582:	bf0c      	ite	eq
 8006584:	2301      	moveq	r3, #1
 8006586:	2300      	movne	r3, #0
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2b00      	cmp	r3, #0
 800658c:	d03f      	beq.n	800660e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	3322      	adds	r3, #34	; 0x22
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	3222      	adds	r2, #34	; 0x22
 8006596:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8006598:	68ba      	ldr	r2, [r7, #8]
 800659a:	8ad2      	ldrh	r2, [r2, #22]
 800659c:	2a00      	cmp	r2, #0
 800659e:	d105      	bne.n	80065ac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 80065a0:	4b1f      	ldr	r3, [pc, #124]	; (8006620 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 80065a2:	4a20      	ldr	r2, [pc, #128]	; (8006624 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 80065a4:	21c5      	movs	r1, #197	; 0xc5
 80065a6:	4820      	ldr	r0, [pc, #128]	; (8006628 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80065a8:	f009 f9a2 	bl	800f8f0 <__assert_func>
            return buffer[pos];
 80065ac:	68ba      	ldr	r2, [r7, #8]
 80065ae:	8a92      	ldrh	r2, [r2, #20]
 80065b0:	4611      	mov	r1, r2
 80065b2:	68ba      	ldr	r2, [r7, #8]
 80065b4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80065b8:	613b      	str	r3, [r7, #16]
 80065ba:	4613      	mov	r3, r2
 80065bc:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	8adb      	ldrh	r3, [r3, #22]
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d806      	bhi.n	80065d4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 80065c6:	4b1b      	ldr	r3, [pc, #108]	; (8006634 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 80065c8:	4a1b      	ldr	r2, [pc, #108]	; (8006638 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 80065ca:	f44f 718e 	mov.w	r1, #284	; 0x11c
 80065ce:	4816      	ldr	r0, [pc, #88]	; (8006628 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80065d0:	f009 f98e 	bl	800f8f0 <__assert_func>
            const uint16_t index = pos + 1;
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	8a9b      	ldrh	r3, [r3, #20]
 80065d8:	3301      	adds	r3, #1
 80065da:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 80065dc:	89bb      	ldrh	r3, [r7, #12]
 80065de:	2b09      	cmp	r3, #9
 80065e0:	d801      	bhi.n	80065e6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 80065e2:	89bb      	ldrh	r3, [r7, #12]
 80065e4:	e000      	b.n	80065e8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 80065e6:	2300      	movs	r3, #0
 80065e8:	693a      	ldr	r2, [r7, #16]
 80065ea:	89f9      	ldrh	r1, [r7, #14]
 80065ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 80065f0:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	3322      	adds	r3, #34	; 0x22
 80065f6:	61bb      	str	r3, [r7, #24]
 80065f8:	f640 133f 	movw	r3, #2367	; 0x93f
 80065fc:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	8a9b      	ldrh	r3, [r3, #20]
 8006602:	4619      	mov	r1, r3
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	8afa      	ldrh	r2, [r7, #22]
 8006608:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 800660c:	bf00      	nop
        }
    }
    return getNextChar();
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f007 f94a 	bl	800d8a8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8006614:	4603      	mov	r3, r0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3728      	adds	r7, #40	; 0x28
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	08010f04 	.word	0x08010f04
 8006624:	08010f10 	.word	0x08010f10
 8006628:	08010fbc 	.word	0x08010fbc
 800662c:	08011004 	.word	0x08011004
 8006630:	08011014 	.word	0x08011014
 8006634:	080110e8 	.word	0x080110e8
 8006638:	080110f4 	.word	0x080110f4

0800663c <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b082      	sub	sp, #8
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f007 f8f6 	bl	800d836 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 800664a:	bf00      	nop
 800664c:	3708      	adds	r7, #8
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}

08006652 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8006652:	b580      	push	{r7, lr}
 8006654:	b088      	sub	sp, #32
 8006656:	af02      	add	r7, sp, #8
 8006658:	60f8      	str	r0, [r7, #12]
 800665a:	1d38      	adds	r0, r7, #4
 800665c:	e880 0006 	stmia.w	r0, {r1, r2}
 8006660:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 8006662:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006666:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8006668:	1d39      	adds	r1, r7, #4
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	9301      	str	r3, [sp, #4]
 800666e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006670:	9300      	str	r3, [sp, #0]
 8006672:	6a3b      	ldr	r3, [r7, #32]
 8006674:	683a      	ldr	r2, [r7, #0]
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	f004 fc1c 	bl	800aeb4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 800667c:	bf00      	nop
 800667e:	3718      	adds	r7, #24
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8006684:	b590      	push	{r4, r7, lr}
 8006686:	b085      	sub	sp, #20
 8006688:	af00      	add	r7, sp, #0
 800668a:	4603      	mov	r3, r0
 800668c:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 800668e:	2300      	movs	r3, #0
 8006690:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8006692:	88fb      	ldrh	r3, [r7, #6]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d127      	bne.n	80066e8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8006698:	88fb      	ldrh	r3, [r7, #6]
 800669a:	4a1e      	ldr	r2, [pc, #120]	; (8006714 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800669c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d016      	beq.n	80066d2 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 80066a4:	88fb      	ldrh	r3, [r7, #6]
 80066a6:	4a1b      	ldr	r2, [pc, #108]	; (8006714 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80066a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066ac:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	68ba      	ldr	r2, [r7, #8]
 80066b4:	4413      	add	r3, r2
 80066b6:	4a18      	ldr	r2, [pc, #96]	; (8006718 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80066b8:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	68ba      	ldr	r2, [r7, #8]
 80066c0:	4413      	add	r3, r2
 80066c2:	4a16      	ldr	r2, [pc, #88]	; (800671c <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80066c4:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	68ba      	ldr	r2, [r7, #8]
 80066cc:	4413      	add	r3, r2
 80066ce:	60fb      	str	r3, [r7, #12]
 80066d0:	e00a      	b.n	80066e8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 80066d2:	4b11      	ldr	r3, [pc, #68]	; (8006718 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80066d4:	4a12      	ldr	r2, [pc, #72]	; (8006720 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 80066d6:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80066d8:	4a12      	ldr	r2, [pc, #72]	; (8006724 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 80066da:	4b10      	ldr	r3, [pc, #64]	; (800671c <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80066dc:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80066de:	88fb      	ldrh	r3, [r7, #6]
 80066e0:	4a11      	ldr	r2, [pc, #68]	; (8006728 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 80066e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066e6:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00d      	beq.n	800670a <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 80066ee:	4a0f      	ldr	r2, [pc, #60]	; (800672c <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 80066f0:	88fb      	ldrh	r3, [r7, #6]
 80066f2:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 80066f4:	f000 f83e 	bl	8006774 <_ZN17TypedTextDatabase8getFontsEv>
 80066f8:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 80066fa:	f000 f833 	bl	8006764 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 80066fe:	4603      	mov	r3, r0
 8006700:	461a      	mov	r2, r3
 8006702:	4621      	mov	r1, r4
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	f7ff fea5 	bl	8006454 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 800670a:	bf00      	nop
 800670c:	3714      	adds	r7, #20
 800670e:	46bd      	mov	sp, r7
 8006710:	bd90      	pop	{r4, r7, pc}
 8006712:	bf00      	nop
 8006714:	20000e60 	.word	0x20000e60
 8006718:	20000e68 	.word	0x20000e68
 800671c:	20000e6c 	.word	0x20000e6c
 8006720:	08013024 	.word	0x08013024
 8006724:	08013018 	.word	0x08013018
 8006728:	08013060 	.word	0x08013060
 800672c:	20000e64 	.word	0x20000e64

08006730 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	460b      	mov	r3, r1
 800673a:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 800673c:	4b07      	ldr	r3, [pc, #28]	; (800675c <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	4b07      	ldr	r3, [pc, #28]	; (8006760 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8006742:	6819      	ldr	r1, [r3, #0]
 8006744:	887b      	ldrh	r3, [r7, #2]
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	440b      	add	r3, r1
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	005b      	lsls	r3, r3, #1
 800674e:	4413      	add	r3, r2
}
 8006750:	4618      	mov	r0, r3
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr
 800675c:	20000e68 	.word	0x20000e68
 8006760:	20000e6c 	.word	0x20000e6c

08006764 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8006764:	b480      	push	{r7}
 8006766:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8006768:	2303      	movs	r3, #3
}
 800676a:	4618      	mov	r0, r3
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8006774:	b480      	push	{r7}
 8006776:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8006778:	4b02      	ldr	r3, [pc, #8]	; (8006784 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 800677a:	4618      	mov	r0, r3
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr
 8006784:	20000e70 	.word	0x20000e70

08006788 <_Z41__static_initialization_and_destruction_0ii>:
    case 3:
        touchgfx_fonts[3] = &(getFont_trebucbd_40_1bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d118      	bne.n	80067ca <_Z41__static_initialization_and_destruction_0ii+0x42>
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800679e:	4293      	cmp	r3, r2
 80067a0:	d113      	bne.n	80067ca <_Z41__static_initialization_and_destruction_0ii+0x42>
    &(getFont_ChicagoFLF_20_1bpp()),
 80067a2:	f7fd ff15 	bl	80045d0 <_Z26getFont_ChicagoFLF_20_1bppv>
 80067a6:	4603      	mov	r3, r0
};
 80067a8:	4a0a      	ldr	r2, [pc, #40]	; (80067d4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80067aa:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_1bpp()),
 80067ac:	f7fd ffc4 	bl	8004738 <_Z23getFont_verdana_40_1bppv>
 80067b0:	4603      	mov	r3, r0
};
 80067b2:	4a08      	ldr	r2, [pc, #32]	; (80067d4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80067b4:	6053      	str	r3, [r2, #4]
    &(getFont_ChicagoFLF_11_1bpp()),
 80067b6:	f7fd feb1 	bl	800451c <_Z26getFont_ChicagoFLF_11_1bppv>
 80067ba:	4603      	mov	r3, r0
};
 80067bc:	4a05      	ldr	r2, [pc, #20]	; (80067d4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80067be:	6093      	str	r3, [r2, #8]
    &(getFont_trebucbd_40_1bpp())
 80067c0:	f7fd ff60 	bl	8004684 <_Z24getFont_trebucbd_40_1bppv>
 80067c4:	4603      	mov	r3, r0
};
 80067c6:	4a03      	ldr	r2, [pc, #12]	; (80067d4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80067c8:	60d3      	str	r3, [r2, #12]
} // namespace TypedTextDatabase
 80067ca:	bf00      	nop
 80067cc:	3708      	adds	r7, #8
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	20000e70 	.word	0x20000e70

080067d8 <_GLOBAL__sub_I_touchgfx_fonts>:
 80067d8:	b580      	push	{r7, lr}
 80067da:	af00      	add	r7, sp, #0
 80067dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80067e0:	2001      	movs	r0, #1
 80067e2:	f7ff ffd1 	bl	8006788 <_Z41__static_initialization_and_destruction_0ii>
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	4a05      	ldr	r2, [pc, #20]	; (8006808 <_ZN19FrontendApplicationD1Ev+0x20>)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	601a      	str	r2, [r3, #0]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4618      	mov	r0, r3
 80067fa:	f7fe f9df 	bl	8004bbc <_ZN23FrontendApplicationBaseD1Ev>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4618      	mov	r0, r3
 8006802:	3708      	adds	r7, #8
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}
 8006808:	08011f08 	.word	0x08011f08

0800680c <_ZN19FrontendApplicationD0Ev>:
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f7ff ffe7 	bl	80067e8 <_ZN19FrontendApplicationD1Ev>
 800681a:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f009 f838 	bl	800f894 <_ZdlPvj>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4618      	mov	r0, r3
 8006828:	3708      	adds	r7, #8
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}

0800682e <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800682e:	b580      	push	{r7, lr}
 8006830:	b082      	sub	sp, #8
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800683c:	4618      	mov	r0, r3
 800683e:	f000 fa19 	bl	8006c74 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4618      	mov	r0, r3
 8006846:	f004 ffef 	bl	800b828 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 800684a:	bf00      	nop
 800684c:	3708      	adds	r7, #8
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
	...

08006854 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	68b9      	ldr	r1, [r7, #8]
 8006866:	4618      	mov	r0, r3
 8006868:	f7fe f9f8 	bl	8004c5c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800686c:	4a03      	ldr	r2, [pc, #12]	; (800687c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	601a      	str	r2, [r3, #0]
{

}
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	4618      	mov	r0, r3
 8006876:	3710      	adds	r7, #16
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}
 800687c:	08011f08 	.word	0x08011f08

08006880 <_ZN10BackgroundC1Ev>:
#include <gui/containers/Background.hpp>

Background::Background()
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4618      	mov	r0, r3
 800688c:	f7fe ff64 	bl	8005758 <_ZN14BackgroundBaseC1Ev>
 8006890:	4a03      	ldr	r2, [pc, #12]	; (80068a0 <_ZN10BackgroundC1Ev+0x20>)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	601a      	str	r2, [r3, #0]
{

}
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4618      	mov	r0, r3
 800689a:	3708      	adds	r7, #8
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	08011f54 	.word	0x08011f54

080068a4 <_ZN10Background10initializeEv>:

void Background::initialize()
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
    BackgroundBase::initialize();
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4618      	mov	r0, r3
 80068b0:	f7fe ffca 	bl	8005848 <_ZN14BackgroundBase10initializeEv>
}
 80068b4:	bf00      	nop
 80068b6:	3708      	adds	r7, #8
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <_ZN6TopBarC1Ev>:
#include <gui/containers/TopBar.hpp>

TopBar::TopBar()
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4618      	mov	r0, r3
 80068c8:	f7fe ffea 	bl	80058a0 <_ZN10TopBarBaseC1Ev>
 80068cc:	4a03      	ldr	r2, [pc, #12]	; (80068dc <_ZN6TopBarC1Ev+0x20>)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	601a      	str	r2, [r3, #0]
{

}
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4618      	mov	r0, r3
 80068d6:	3708      	adds	r7, #8
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	08011fe8 	.word	0x08011fe8

080068e0 <_ZN6TopBar10initializeEv>:

void TopBar::initialize()
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
    TopBarBase::initialize();
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7ff f850 	bl	8005990 <_ZN10TopBarBase10initializeEv>
}
 80068f0:	bf00      	nop
 80068f2:	3708      	adds	r7, #8
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
    {
    }
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
    {
    }
 8006914:	bf00      	nop
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
    {
 8006928:	4a04      	ldr	r2, [pc, #16]	; (800693c <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	601a      	str	r2, [r3, #0]
    }
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4618      	mov	r0, r3
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr
 800693c:	080120b4 	.word	0x080120b4

08006940 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
    }
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f7ff ffe9 	bl	8006920 <_ZN8touchgfx9PresenterD1Ev>
 800694e:	2104      	movs	r1, #4
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f008 ff9f 	bl	800f894 <_ZdlPvj>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4618      	mov	r0, r3
 800695a:	3708      	adds	r7, #8
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
    {
 8006968:	4a04      	ldr	r2, [pc, #16]	; (800697c <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	601a      	str	r2, [r3, #0]
    }
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4618      	mov	r0, r3
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr
 800697c:	080120b4 	.word	0x080120b4

08006980 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	4a06      	ldr	r2, [pc, #24]	; (80069a4 <_ZN13ModelListenerC1Ev+0x24>)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	601a      	str	r2, [r3, #0]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	605a      	str	r2, [r3, #4]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4618      	mov	r0, r3
 8006998:	370c      	adds	r7, #12
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	080120a4 	.word	0x080120a4

080069a8 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	4a04      	ldr	r2, [pc, #16]	; (80069c4 <_ZN13ModelListenerD1Ev+0x1c>)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	601a      	str	r2, [r3, #0]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4618      	mov	r0, r3
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr
 80069c4:	080120a4 	.word	0x080120a4

080069c8 <_ZN13ModelListenerD0Ev>:
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f7ff ffe9 	bl	80069a8 <_ZN13ModelListenerD1Ev>
 80069d6:	2108      	movs	r1, #8
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f008 ff5b 	bl	800f894 <_ZdlPvj>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4618      	mov	r0, r3
 80069e2:	3708      	adds	r7, #8
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <_ZN19MainScreenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MainScreenPresenter() {};
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	4a09      	ldr	r2, [pc, #36]	; (8006a18 <_ZN19MainScreenPresenterD1Ev+0x30>)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	601a      	str	r2, [r3, #0]
 80069f6:	4a09      	ldr	r2, [pc, #36]	; (8006a1c <_ZN19MainScreenPresenterD1Ev+0x34>)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	605a      	str	r2, [r3, #4]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	3304      	adds	r3, #4
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7ff ffd1 	bl	80069a8 <_ZN13ModelListenerD1Ev>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f7ff ff89 	bl	8006920 <_ZN8touchgfx9PresenterD1Ev>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4618      	mov	r0, r3
 8006a12:	3708      	adds	r7, #8
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	0801207c 	.word	0x0801207c
 8006a1c:	08012094 	.word	0x08012094

08006a20 <_ZThn4_N19MainScreenPresenterD1Ev>:
 8006a20:	f1a0 0004 	sub.w	r0, r0, #4
 8006a24:	e7e0      	b.n	80069e8 <_ZN19MainScreenPresenterD1Ev>
 8006a26:	bf00      	nop

08006a28 <_ZN19MainScreenPresenterD0Ev>:
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f7ff ffd9 	bl	80069e8 <_ZN19MainScreenPresenterD1Ev>
 8006a36:	2110      	movs	r1, #16
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f008 ff2b 	bl	800f894 <_ZdlPvj>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4618      	mov	r0, r3
 8006a42:	3708      	adds	r7, #8
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <_ZThn4_N19MainScreenPresenterD0Ev>:
 8006a48:	f1a0 0004 	sub.w	r0, r0, #4
 8006a4c:	e7ec      	b.n	8006a28 <_ZN19MainScreenPresenterD0Ev>
	...

08006a50 <_ZN19MainScreenPresenterC1ER14MainScreenView>:
#include <gui/mainscreen_screen/MainScreenView.hpp>
#include <gui/mainscreen_screen/MainScreenPresenter.hpp>

MainScreenPresenter::MainScreenPresenter(MainScreenView& v)
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b082      	sub	sp, #8
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
    : view(v)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f7ff ff7f 	bl	8006960 <_ZN8touchgfx9PresenterC1Ev>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	3304      	adds	r3, #4
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7ff ff8a 	bl	8006980 <_ZN13ModelListenerC1Ev>
 8006a6c:	4a06      	ldr	r2, [pc, #24]	; (8006a88 <_ZN19MainScreenPresenterC1ER14MainScreenView+0x38>)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	601a      	str	r2, [r3, #0]
 8006a72:	4a06      	ldr	r2, [pc, #24]	; (8006a8c <_ZN19MainScreenPresenterC1ER14MainScreenView+0x3c>)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	605a      	str	r2, [r3, #4]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	683a      	ldr	r2, [r7, #0]
 8006a7c:	60da      	str	r2, [r3, #12]
{

}
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4618      	mov	r0, r3
 8006a82:	3708      	adds	r7, #8
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	0801207c 	.word	0x0801207c
 8006a8c:	08012094 	.word	0x08012094

08006a90 <_ZN19MainScreenPresenter8activateEv>:

void MainScreenPresenter::activate()
{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]

}
 8006a98:	bf00      	nop
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <_ZN19MainScreenPresenter10deactivateEv>:

void MainScreenPresenter::deactivate()
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]

}
 8006aac:	bf00      	nop
 8006aae:	370c      	adds	r7, #12
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <_ZN14MainScreenViewD1Ev>:

class MainScreenView : public MainScreenViewBase
{
public:
    MainScreenView();
    virtual ~MainScreenView() {}
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	4a05      	ldr	r2, [pc, #20]	; (8006ad8 <_ZN14MainScreenViewD1Ev+0x20>)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	601a      	str	r2, [r3, #0]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f7ff fc03 	bl	80062d4 <_ZN18MainScreenViewBaseD1Ev>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3708      	adds	r7, #8
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	080120cc 	.word	0x080120cc

08006adc <_ZN14MainScreenViewD0Ev>:
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b082      	sub	sp, #8
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f7ff ffe7 	bl	8006ab8 <_ZN14MainScreenViewD1Ev>
 8006aea:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f008 fed0 	bl	800f894 <_ZdlPvj>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4618      	mov	r0, r3
 8006af8:	3708      	adds	r7, #8
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
	...

08006b00 <_ZN14MainScreenView15handleTickEventEv>:
    virtual void setupScreen();
    virtual void tearDownScreen();

    uint16_t tick = 0, FPScounter = 0, step = 1, prevTick = 0, currentTick = 0;

        virtual void handleTickEvent()
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b082      	sub	sp, #8
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
        {
           tick++;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8b3 31b8 	ldrh.w	r3, [r3, #440]	; 0x1b8
 8006b0e:	3301      	adds	r3, #1
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
           if(currentTick < prevTick){
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8b3 21c0 	ldrh.w	r2, [r3, #448]	; 0x1c0
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8b3 31be 	ldrh.w	r3, [r3, #446]	; 0x1be
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d20b      	bcs.n	8006b40 <_ZN14MainScreenView15handleTickEventEv+0x40>
        	   tick = 65535 - prevTick;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8b3 31be 	ldrh.w	r3, [r3, #446]	; 0x1be
 8006b2e:	43db      	mvns	r3, r3
 8006b30:	b29a      	uxth	r2, r3
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
        	   prevTick = 0;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f8a3 21be 	strh.w	r2, [r3, #446]	; 0x1be
           }
           currentTick = tick;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8b3 21b8 	ldrh.w	r2, [r3, #440]	; 0x1b8
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8a3 21c0 	strh.w	r2, [r3, #448]	; 0x1c0
           if(currentTick - prevTick >= 6){
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8b3 31c0 	ldrh.w	r3, [r3, #448]	; 0x1c0
 8006b52:	461a      	mov	r2, r3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8b3 31be 	ldrh.w	r3, [r3, #446]	; 0x1be
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	2b05      	cmp	r3, #5
 8006b5e:	dd26      	ble.n	8006bae <_ZN14MainScreenView15handleTickEventEv+0xae>
        	   FPScounter += step;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8b3 21ba 	ldrh.w	r2, [r3, #442]	; 0x1ba
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8b3 31bc 	ldrh.w	r3, [r3, #444]	; 0x1bc
 8006b6c:	4413      	add	r3, r2
 8006b6e:	b29a      	uxth	r2, r3
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8a3 21ba 	strh.w	r2, [r3, #442]	; 0x1ba
        	   step = (FPScounter < 1 || FPScounter > 254)? -step : step;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8b3 31ba 	ldrh.w	r3, [r3, #442]	; 0x1ba
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d004      	beq.n	8006b8a <_ZN14MainScreenView15handleTickEventEv+0x8a>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f8b3 31ba 	ldrh.w	r3, [r3, #442]	; 0x1ba
 8006b86:	2bfe      	cmp	r3, #254	; 0xfe
 8006b88:	d905      	bls.n	8006b96 <_ZN14MainScreenView15handleTickEventEv+0x96>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f8b3 31bc 	ldrh.w	r3, [r3, #444]	; 0x1bc
 8006b90:	425b      	negs	r3, r3
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	e002      	b.n	8006b9c <_ZN14MainScreenView15handleTickEventEv+0x9c>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8b3 31bc 	ldrh.w	r3, [r3, #444]	; 0x1bc
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	f8a2 31bc 	strh.w	r3, [r2, #444]	; 0x1bc
        	   prevTick = currentTick;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8b3 21c0 	ldrh.w	r2, [r3, #448]	; 0x1c0
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8a3 21be 	strh.w	r2, [r3, #446]	; 0x1be
           }

           Unicode::snprintf(FPSBuffer, FPS_SIZE, "%d", FPScounter);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8b3 31ba 	ldrh.w	r3, [r3, #442]	; 0x1ba
 8006bba:	4a07      	ldr	r2, [pc, #28]	; (8006bd8 <_ZN14MainScreenView15handleTickEventEv+0xd8>)
 8006bbc:	2104      	movs	r1, #4
 8006bbe:	f007 fd1f 	bl	800e600 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
           FPS.invalidate();
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f005 fdef 	bl	800c7ac <_ZNK8touchgfx8Drawable10invalidateEv>
        }
 8006bce:	bf00      	nop
 8006bd0:	3708      	adds	r7, #8
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	080111a8 	.word	0x080111a8

08006bdc <_ZN14MainScreenViewC1Ev>:
#include <gui/mainscreen_screen/MainScreenView.hpp>

MainScreenView::MainScreenView()
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7ff f9d2 	bl	8005f90 <_ZN18MainScreenViewBaseC1Ev>
 8006bec:	4a0d      	ldr	r2, [pc, #52]	; (8006c24 <_ZN14MainScreenViewC1Ev+0x48>)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	601a      	str	r2, [r3, #0]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f8a3 21ba 	strh.w	r2, [r3, #442]	; 0x1ba
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2201      	movs	r2, #1
 8006c06:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f8a3 21be 	strh.w	r2, [r3, #446]	; 0x1be
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f8a3 21c0 	strh.w	r2, [r3, #448]	; 0x1c0
{

}
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3708      	adds	r7, #8
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	080120cc 	.word	0x080120cc

08006c28 <_ZN14MainScreenView11setupScreenEv>:

void MainScreenView::setupScreen()
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
    MainScreenViewBase::setupScreen();
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4618      	mov	r0, r3
 8006c34:	f7ff fb8d 	bl	8006352 <_ZN18MainScreenViewBase11setupScreenEv>
}
 8006c38:	bf00      	nop
 8006c3a:	3708      	adds	r7, #8
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <_ZN14MainScreenView14tearDownScreenEv>:

void MainScreenView::tearDownScreen()
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
    MainScreenViewBase::tearDownScreen();
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f7fe ff02 	bl	8005a54 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8006c50:	bf00      	nop
 8006c52:	3708      	adds	r7, #8
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	601a      	str	r2, [r3, #0]
{

}
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4618      	mov	r0, r3
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <_ZN5Model4tickEv>:

void Model::tick()
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]

}
 8006c7c:	bf00      	nop
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
    {
 8006c90:	4a04      	ldr	r2, [pc, #16]	; (8006ca4 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	601a      	str	r2, [r3, #0]
    }
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	4618      	mov	r0, r3
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr
 8006ca4:	08012118 	.word	0x08012118

08006ca8 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
    }
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f7ff ffe9 	bl	8006c88 <_ZN8touchgfx15TouchControllerD1Ev>
 8006cb6:	2104      	movs	r1, #4
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f008 fdeb 	bl	800f894 <_ZdlPvj>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3708      	adds	r7, #8
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b085      	sub	sp, #20
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3714      	adds	r7, #20
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr
	...

08006cf8 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	4a05      	ldr	r2, [pc, #20]	; (8006d18 <_ZN20STM32TouchControllerD1Ev+0x20>)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	601a      	str	r2, [r3, #0]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f7ff ffbd 	bl	8006c88 <_ZN8touchgfx15TouchControllerD1Ev>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	4618      	mov	r0, r3
 8006d12:	3708      	adds	r7, #8
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	08012100 	.word	0x08012100

08006d1c <_ZN20STM32TouchControllerD0Ev>:
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f7ff ffe7 	bl	8006cf8 <_ZN20STM32TouchControllerD1Ev>
 8006d2a:	2104      	movs	r1, #4
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f008 fdb1 	bl	800f894 <_ZdlPvj>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4618      	mov	r0, r3
 8006d36:	3708      	adds	r7, #8
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	af00      	add	r7, sp, #0

}
 8006d40:	bf00      	nop
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr
	...

08006d4c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	4603      	mov	r3, r0
 8006d54:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8006d56:	79fb      	ldrb	r3, [r7, #7]
 8006d58:	2b03      	cmp	r3, #3
 8006d5a:	d80c      	bhi.n	8006d76 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 8006d5c:	a201      	add	r2, pc, #4	; (adr r2, 8006d64 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 8006d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d62:	bf00      	nop
 8006d64:	08006d75 	.word	0x08006d75
 8006d68:	08006d75 	.word	0x08006d75
 8006d6c:	08006d75 	.word	0x08006d75
 8006d70:	08006d75 	.word	0x08006d75
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
#endif
        break;
 8006d74:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
#endif
        break;
    }
}
 8006d76:	bf00      	nop
 8006d78:	370c      	adds	r7, #12
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop

08006d84 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8006d8e:	79fb      	ldrb	r3, [r7, #7]
 8006d90:	2b03      	cmp	r3, #3
 8006d92:	d80c      	bhi.n	8006dae <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 8006d94:	a201      	add	r2, pc, #4	; (adr r2, 8006d9c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 8006d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d9a:	bf00      	nop
 8006d9c:	08006dad 	.word	0x08006dad
 8006da0:	08006dad 	.word	0x08006dad
 8006da4:	08006dad 	.word	0x08006dad
 8006da8:	08006dad 	.word	0x08006dad
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
#endif
        break;
 8006dac:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
#endif
        break;
    }
}
 8006dae:	bf00      	nop
 8006db0:	370c      	adds	r7, #12
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr
 8006dba:	bf00      	nop

08006dbc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8006dc6:	79fb      	ldrb	r3, [r7, #7]
 8006dc8:	2b03      	cmp	r3, #3
 8006dca:	d80c      	bhi.n	8006de6 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 8006dcc:	a201      	add	r2, pc, #4	; (adr r2, 8006dd4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 8006dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd2:	bf00      	nop
 8006dd4:	08006de5 	.word	0x08006de5
 8006dd8:	08006de5 	.word	0x08006de5
 8006ddc:	08006de5 	.word	0x08006de5
 8006de0:	08006de5 	.word	0x08006de5
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 8006de4:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 8006de6:	bf00      	nop
 8006de8:	370c      	adds	r7, #12
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop

08006df4 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
    {
 8006dfc:	4a04      	ldr	r2, [pc, #16]	; (8006e10 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	601a      	str	r2, [r3, #0]
    }
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4618      	mov	r0, r3
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr
 8006e10:	080124f8 	.word	0x080124f8

08006e14 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b082      	sub	sp, #8
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
    }
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f7ff ffe9 	bl	8006df4 <_ZN8touchgfx3HALD1Ev>
 8006e22:	217c      	movs	r1, #124	; 0x7c
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f008 fd35 	bl	800f894 <_ZdlPvj>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3708      	adds	r7, #8
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @param  orientation The desired display orientation.
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	70fb      	strb	r3, [r7, #3]
    {
        requestedOrientation = orientation;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	78fa      	ldrb	r2, [r7, #3]
 8006e44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8006e50:	bf00      	nop
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
     * @param   width   The width of the framebuffer.
     * @param   height  The height of the framebuffer.
     *
     * @see touchgfx_generic_init
     */
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	460b      	mov	r3, r1
 8006e66:	807b      	strh	r3, [r7, #2]
 8006e68:	4613      	mov	r3, r2
 8006e6a:	803b      	strh	r3, [r7, #0]
    {
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8006e6c:	4b0c      	ldr	r3, [pc, #48]	; (8006ea0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 8006e6e:	881b      	ldrh	r3, [r3, #0]
 8006e70:	887a      	ldrh	r2, [r7, #2]
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d304      	bcc.n	8006e80 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 8006e76:	4b0b      	ldr	r3, [pc, #44]	; (8006ea4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 8006e78:	881b      	ldrh	r3, [r3, #0]
 8006e7a:	883a      	ldrh	r2, [r7, #0]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d205      	bcs.n	8006e8c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 8006e80:	4b09      	ldr	r3, [pc, #36]	; (8006ea8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 8006e82:	4a0a      	ldr	r2, [pc, #40]	; (8006eac <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 8006e84:	219e      	movs	r1, #158	; 0x9e
 8006e86:	480a      	ldr	r0, [pc, #40]	; (8006eb0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 8006e88:	f008 fd32 	bl	800f8f0 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8006e8c:	4a09      	ldr	r2, [pc, #36]	; (8006eb4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 8006e8e:	887b      	ldrh	r3, [r7, #2]
 8006e90:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 8006e92:	4a09      	ldr	r2, [pc, #36]	; (8006eb8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8006e94:	883b      	ldrh	r3, [r7, #0]
 8006e96:	8013      	strh	r3, [r2, #0]
    }
 8006e98:	bf00      	nop
 8006e9a:	3708      	adds	r7, #8
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	200012c8 	.word	0x200012c8
 8006ea4:	200012ca 	.word	0x200012ca
 8006ea8:	080111ac 	.word	0x080111ac
 8006eac:	08011210 	.word	0x08011210
 8006eb0:	08011254 	.word	0x08011254
 8006eb4:	200012ce 	.word	0x200012ce
 8006eb8:	200012d0 	.word	0x200012d0

08006ebc <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d009      	beq.n	8006ee2 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	685a      	ldr	r2, [r3, #4]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4610      	mov	r0, r2
 8006edc:	4798      	blx	r3
 8006ede:	4603      	mov	r3, r0
 8006ee0:	e000      	b.n	8006ee4 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 8006ee2:	2300      	movs	r3, #0
    }
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3708      	adds	r7, #8
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <_ZN8touchgfx3HAL5vSyncEv>:
    /**
     * Called by the VSync interrupt.
     *
     * Called by the VSync interrupt for counting of LCD refreshes.
     */
    void vSync()
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
    {
        vSyncCnt++;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8006efa:	3301      	adds	r3, #1
 8006efc:	b2da      	uxtb	r2, r3
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8006f04:	bf00      	nop
 8006f06:	370c      	adds	r7, #12
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b082      	sub	sp, #8
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f002 f9e1 	bl	80092e0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	33ac      	adds	r3, #172	; 0xac
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	4798      	blx	r3
    }
 8006f2a:	bf00      	nop
 8006f2c:	3708      	adds	r7, #8
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8006f32:	b480      	push	{r7}
 8006f34:	b083      	sub	sp, #12
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
 8006f3a:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 8006f3c:	2300      	movs	r3, #0
    }
 8006f3e:	4618      	mov	r0, r3
 8006f40:	370c      	adds	r7, #12
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr
	...

08006f4c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	60f8      	str	r0, [r7, #12]
 8006f54:	60b9      	str	r1, [r7, #8]
 8006f56:	607a      	str	r2, [r7, #4]
 8006f58:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d106      	bne.n	8006f6e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8006f60:	4b0f      	ldr	r3, [pc, #60]	; (8006fa0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 8006f62:	4a10      	ldr	r2, [pc, #64]	; (8006fa4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 8006f64:	f240 21d2 	movw	r1, #722	; 0x2d2
 8006f68:	480f      	ldr	r0, [pc, #60]	; (8006fa8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8006f6a:	f008 fcc1 	bl	800f8f0 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	68ba      	ldr	r2, [r7, #8]
 8006f72:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	bf14      	ite	ne
 8006f80:	2301      	movne	r3, #1
 8006f82:	2300      	moveq	r3, #0
 8006f84:	b2da      	uxtb	r2, r3
 8006f86:	4b09      	ldr	r3, [pc, #36]	; (8006fac <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8006f88:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	338c      	adds	r3, #140	; 0x8c
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	6839      	ldr	r1, [r7, #0]
 8006f94:	68f8      	ldr	r0, [r7, #12]
 8006f96:	4798      	blx	r3
    }
 8006f98:	bf00      	nop
 8006f9a:	3710      	adds	r7, #16
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}
 8006fa0:	08011298 	.word	0x08011298
 8006fa4:	080112d0 	.word	0x080112d0
 8006fa8:	08011254 	.word	0x08011254
 8006fac:	200012d2 	.word	0x200012d2

08006fb0 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	683a      	ldr	r2, [r7, #0]
 8006fbe:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	bf14      	ite	ne
 8006fc6:	2301      	movne	r3, #1
 8006fc8:	2300      	moveq	r3, #0
 8006fca:	b2da      	uxtb	r2, r3
 8006fcc:	4b03      	ldr	r3, [pc, #12]	; (8006fdc <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 8006fce:	701a      	strb	r2, [r3, #0]
    }
 8006fd0:	bf00      	nop
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr
 8006fdc:	200012d3 	.word	0x200012d3

08006fe0 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8006fe8:	2300      	movs	r3, #0
    }
 8006fea:	4618      	mov	r0, r3
 8006fec:	370c      	adds	r7, #12
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr

08006ff6 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	b082      	sub	sp, #8
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
 8006ffe:	460b      	mov	r3, r1
 8007000:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007006:	2b00      	cmp	r3, #0
 8007008:	d004      	beq.n	8007014 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800700e:	887a      	ldrh	r2, [r7, #2]
 8007010:	4610      	mov	r0, r2
 8007012:	4798      	blx	r3
        }
    }
 8007014:	bf00      	nop
 8007016:	3708      	adds	r7, #8
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 8007024:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 8007028:	4618      	mov	r0, r3
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8007034:	b580      	push	{r7, lr}
 8007036:	b082      	sub	sp, #8
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	685a      	ldr	r2, [r3, #4]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	3318      	adds	r3, #24
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4610      	mov	r0, r2
 800704c:	4798      	blx	r3
 800704e:	4603      	mov	r3, r0
    }
 8007050:	4618      	mov	r0, r3
 8007052:	3708      	adds	r7, #8
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
    /**
     * Gets client framebuffer.
     *
     * @return The address of the framebuffer currently used by the framework to draw in.
     */
    uint16_t* getClientFrameBuffer()
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
    {
        if (USE_DOUBLE_BUFFERING && getTFTFrameBuffer() == frameBuffer0)
 8007060:	4b0e      	ldr	r3, [pc, #56]	; (800709c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x44>)
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00c      	beq.n	8007082 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x2a>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	3330      	adds	r3, #48	; 0x30
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	4798      	blx	r3
 8007074:	4602      	mov	r2, r0
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800707a:	429a      	cmp	r2, r3
 800707c:	d101      	bne.n	8007082 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x2a>
 800707e:	2301      	movs	r3, #1
 8007080:	e000      	b.n	8007084 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x2c>
 8007082:	2300      	movs	r3, #0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d002      	beq.n	800708e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x36>
        {
            return frameBuffer1;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800708c:	e001      	b.n	8007092 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x3a>
        }
        return frameBuffer0;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    }
 8007092:	4618      	mov	r0, r3
 8007094:	3708      	adds	r7, #8
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	200012d2 	.word	0x200012d2

080070a0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 80070a0:	b480      	push	{r7}
 80070a2:	b085      	sub	sp, #20
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d011      	beq.n	80070dc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 80070b8:	4b14      	ldr	r3, [pc, #80]	; (800710c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d11e      	bne.n	80070fe <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 80070c0:	4b13      	ldr	r3, [pc, #76]	; (8007110 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80070c2:	881b      	ldrh	r3, [r3, #0]
 80070c4:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80070c6:	4b13      	ldr	r3, [pc, #76]	; (8007114 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80070c8:	881a      	ldrh	r2, [r3, #0]
 80070ca:	4b11      	ldr	r3, [pc, #68]	; (8007110 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80070cc:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 80070ce:	4a11      	ldr	r2, [pc, #68]	; (8007114 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80070d0:	89bb      	ldrh	r3, [r7, #12]
 80070d2:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 80070d4:	4b0d      	ldr	r3, [pc, #52]	; (800710c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80070d6:	2201      	movs	r2, #1
 80070d8:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 80070da:	e010      	b.n	80070fe <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 80070dc:	4b0b      	ldr	r3, [pc, #44]	; (800710c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d00c      	beq.n	80070fe <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 80070e4:	4b0a      	ldr	r3, [pc, #40]	; (8007110 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80070e6:	881b      	ldrh	r3, [r3, #0]
 80070e8:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80070ea:	4b0a      	ldr	r3, [pc, #40]	; (8007114 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80070ec:	881a      	ldrh	r2, [r3, #0]
 80070ee:	4b08      	ldr	r3, [pc, #32]	; (8007110 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80070f0:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 80070f2:	4a08      	ldr	r2, [pc, #32]	; (8007114 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80070f4:	89fb      	ldrh	r3, [r7, #14]
 80070f6:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 80070f8:	4b04      	ldr	r3, [pc, #16]	; (800710c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80070fa:	2200      	movs	r2, #0
 80070fc:	701a      	strb	r2, [r3, #0]
    }
 80070fe:	bf00      	nop
 8007100:	3714      	adds	r7, #20
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr
 800710a:	bf00      	nop
 800710c:	200012cc 	.word	0x200012cc
 8007110:	200012ca 	.word	0x200012ca
 8007114:	200012c8 	.word	0x200012c8

08007118 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Invalidate D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
 8007118:	b480      	push	{r7}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
    {
    }
 8007120:	bf00      	nop
 8007122:	370c      	adds	r7, #12
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Flush D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
 800712c:	b480      	push	{r7}
 800712e:	b083      	sub	sp, #12
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
    {
    }
 8007134:	bf00      	nop
 8007136:	370c      	adds	r7, #12
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8007140:	b580      	push	{r7, lr}
 8007142:	b082      	sub	sp, #8
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	4618      	mov	r0, r3
 800714c:	f001 fb32 	bl	80087b4 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8007150:	bf00      	nop
 8007152:	3708      	adds	r7, #8
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	4a05      	ldr	r2, [pc, #20]	; (8007178 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	601a      	str	r2, [r3, #0]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4618      	mov	r0, r3
 800716a:	f7ff fe43 	bl	8006df4 <_ZN8touchgfx3HALD1Ev>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4618      	mov	r0, r3
 8007172:	3708      	adds	r7, #8
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}
 8007178:	08012350 	.word	0x08012350

0800717c <_ZN20TouchGFXGeneratedHALD0Ev>:
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f7ff ffe7 	bl	8007158 <_ZN20TouchGFXGeneratedHALD1Ev>
 800718a:	217c      	movs	r1, #124	; 0x7c
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f008 fb81 	bl	800f894 <_ZdlPvj>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4618      	mov	r0, r3
 8007196:	3708      	adds	r7, #8
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7ff ffca 	bl	8007140 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 80071ac:	bf00      	nop
 80071ae:	3708      	adds	r7, #8
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <_ZN11TouchGFXHAL10initializeEv>:
#include <touchgfx/hal/OSWrappers.hpp>

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b082      	sub	sp, #8
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4618      	mov	r0, r3
 80071c0:	f000 ff86 	bl	80080d0 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 80071c4:	bf00      	nop
 80071c6:	3708      	adds	r7, #8
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4618      	mov	r0, r3
 80071d8:	f000 ffee 	bl	80081b8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 80071dc:	4603      	mov	r3, r0
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3708      	adds	r7, #8
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}

080071e6 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 80071e6:	b580      	push	{r7, lr}
 80071e8:	b082      	sub	sp, #8
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
 80071ee:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6839      	ldr	r1, [r7, #0]
 80071f4:	4618      	mov	r0, r3
 80071f6:	f000 ffed 	bl	80081d4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 80071fa:	bf00      	nop
 80071fc:	3708      	adds	r7, #8
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}

08007202 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8007202:	b580      	push	{r7, lr}
 8007204:	b086      	sub	sp, #24
 8007206:	af02      	add	r7, sp, #8
 8007208:	6078      	str	r0, [r7, #4]
 800720a:	6039      	str	r1, [r7, #0]
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    //TouchGFXGeneratedHAL::flushFrameBuffer(rect);
	const unsigned char* bitmap = (const unsigned char*) getClientFrameBuffer();
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	4618      	mov	r0, r3
 8007210:	f7ff ff22 	bl	8007058 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8007214:	60f8      	str	r0, [r7, #12]
	ssd1306_Fill(Black);
 8007216:	2000      	movs	r0, #0
 8007218:	f7f9 fcb2 	bl	8000b80 <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0, bitmap, 128, 64, White);
 800721c:	2301      	movs	r3, #1
 800721e:	9301      	str	r3, [sp, #4]
 8007220:	2340      	movs	r3, #64	; 0x40
 8007222:	9300      	str	r3, [sp, #0]
 8007224:	2380      	movs	r3, #128	; 0x80
 8007226:	68fa      	ldr	r2, [r7, #12]
 8007228:	2100      	movs	r1, #0
 800722a:	2000      	movs	r0, #0
 800722c:	f7f9 fe0e 	bl	8000e4c <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8007230:	f7f9 fcca 	bl	8000bc8 <ssd1306_UpdateScreen>
}
 8007234:	bf00      	nop
 8007236:	3710      	adds	r7, #16
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	60b9      	str	r1, [r7, #8]
 8007246:	607a      	str	r2, [r7, #4]
 8007248:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 800724a:	68f8      	ldr	r0, [r7, #12]
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	68b9      	ldr	r1, [r7, #8]
 8007252:	f000 ffd8 	bl	8008206 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8007256:	4603      	mov	r3, r0
}
 8007258:	4618      	mov	r0, r3
 800725a:	3710      	adds	r7, #16
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	4618      	mov	r0, r3
 800726c:	f000 ff60 	bl	8008130 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8007270:	bf00      	nop
 8007272:	3708      	adds	r7, #8
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4618      	mov	r0, r3
 8007284:	f000 ff5e 	bl	8008144 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8007288:	bf00      	nop
 800728a:	3708      	adds	r7, #8
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	4618      	mov	r0, r3
 800729c:	f000 ff5c 	bl	8008158 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 80072a0:	bf00      	nop
 80072a2:	3708      	adds	r7, #8
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4618      	mov	r0, r3
 80072b4:	f000 ff5a 	bl	800816c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 80072b8:	bf00      	nop
 80072ba:	3708      	adds	r7, #8
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
    return TouchGFXGeneratedHAL::beginFrame();
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4618      	mov	r0, r3
 80072cc:	f000 ff58 	bl	8008180 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 80072d0:	4603      	mov	r3, r0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3708      	adds	r7, #8
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}

080072da <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 80072da:	b580      	push	{r7, lr}
 80072dc:	b082      	sub	sp, #8
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
    TouchGFXGeneratedHAL::endFrame();
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4618      	mov	r0, r3
 80072e6:	f000 ff58 	bl	800819a <_ZN20TouchGFXGeneratedHAL8endFrameEv>
}
 80072ea:	bf00      	nop
 80072ec:	3708      	adds	r7, #8
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <touchgfxSignalVSync>:

extern "C"

void touchgfxSignalVSync(void){
 80072f2:	b580      	push	{r7, lr}
 80072f4:	af00      	add	r7, sp, #0
	touchgfx::HAL::getInstance()-> vSync();
 80072f6:	f7fd fb35 	bl	8004964 <_ZN8touchgfx3HAL11getInstanceEv>
 80072fa:	4603      	mov	r3, r0
 80072fc:	4618      	mov	r0, r3
 80072fe:	f7ff fdf5 	bl	8006eec <_ZN8touchgfx3HAL5vSyncEv>
	touchgfx::OSWrappers::signalVSync();
 8007302:	f000 f871 	bl	80073e8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
}
 8007306:	bf00      	nop
 8007308:	bd80      	pop	{r7, pc}
	...

0800730c <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	4a05      	ldr	r2, [pc, #20]	; (800732c <_ZN11TouchGFXHALD1Ev+0x20>)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	601a      	str	r2, [r3, #0]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	4618      	mov	r0, r3
 800731e:	f7ff ff1b 	bl	8007158 <_ZN20TouchGFXGeneratedHALD1Ev>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4618      	mov	r0, r3
 8007326:	3708      	adds	r7, #8
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}
 800732c:	08012130 	.word	0x08012130

08007330 <_ZN11TouchGFXHALD0Ev>:
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f7ff ffe7 	bl	800730c <_ZN11TouchGFXHALD1Ev>
 800733e:	217c      	movs	r1, #124	; 0x7c
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f008 faa7 	bl	800f894 <_ZdlPvj>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	4618      	mov	r0, r3
 800734a:	3708      	adds	r7, #8
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8007350:	b480      	push	{r7}
 8007352:	af00      	add	r7, sp, #0
    fb_sem = 0;
 8007354:	4b05      	ldr	r3, [pc, #20]	; (800736c <_ZN8touchgfx10OSWrappers10initializeEv+0x1c>)
 8007356:	2200      	movs	r2, #0
 8007358:	601a      	str	r2, [r3, #0]
    vsync_sem = 0;
 800735a:	4b05      	ldr	r3, [pc, #20]	; (8007370 <_ZN8touchgfx10OSWrappers10initializeEv+0x20>)
 800735c:	2200      	movs	r2, #0
 800735e:	601a      	str	r2, [r3, #0]
}
 8007360:	bf00      	nop
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr
 800736a:	bf00      	nop
 800736c:	20000e80 	.word	0x20000e80
 8007370:	20000e84 	.word	0x20000e84

08007374 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8007374:	b480      	push	{r7}
 8007376:	af00      	add	r7, sp, #0
    while(fb_sem);
 8007378:	4b08      	ldr	r3, [pc, #32]	; (800739c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x28>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2b00      	cmp	r3, #0
 800737e:	bf14      	ite	ne
 8007380:	2301      	movne	r3, #1
 8007382:	2300      	moveq	r3, #0
 8007384:	b2db      	uxtb	r3, r3
 8007386:	2b00      	cmp	r3, #0
 8007388:	d000      	beq.n	800738c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>
 800738a:	e7f5      	b.n	8007378 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x4>
    fb_sem = 1;
 800738c:	4b03      	ldr	r3, [pc, #12]	; (800739c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x28>)
 800738e:	2201      	movs	r2, #1
 8007390:	601a      	str	r2, [r3, #0]
}
 8007392:	bf00      	nop
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr
 800739c:	20000e80 	.word	0x20000e80

080073a0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 80073a0:	b480      	push	{r7}
 80073a2:	af00      	add	r7, sp, #0
    fb_sem = 0;
 80073a4:	4b03      	ldr	r3, [pc, #12]	; (80073b4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 80073a6:	2200      	movs	r2, #0
 80073a8:	601a      	str	r2, [r3, #0]
}
 80073aa:	bf00      	nop
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr
 80073b4:	20000e80 	.word	0x20000e80

080073b8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 80073b8:	b480      	push	{r7}
 80073ba:	af00      	add	r7, sp, #0
    fb_sem = 1;
 80073bc:	4b03      	ldr	r3, [pc, #12]	; (80073cc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 80073be:	2201      	movs	r2, #1
 80073c0:	601a      	str	r2, [r3, #0]
}
 80073c2:	bf00      	nop
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr
 80073cc:	20000e80 	.word	0x20000e80

080073d0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 80073d0:	b480      	push	{r7}
 80073d2:	af00      	add	r7, sp, #0
    fb_sem = 0;
 80073d4:	4b03      	ldr	r3, [pc, #12]	; (80073e4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 80073d6:	2200      	movs	r2, #0
 80073d8:	601a      	str	r2, [r3, #0]
}
 80073da:	bf00      	nop
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr
 80073e4:	20000e80 	.word	0x20000e80

080073e8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 80073e8:	b480      	push	{r7}
 80073ea:	af00      	add	r7, sp, #0
    vsync_sem = 1;
 80073ec:	4b03      	ldr	r3, [pc, #12]	; (80073fc <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 80073ee:	2201      	movs	r2, #1
 80073f0:	601a      	str	r2, [r3, #0]
}
 80073f2:	bf00      	nop
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr
 80073fc:	20000e84 	.word	0x20000e84

08007400 <_ZN8touchgfx10OSWrappers19signalRenderingDoneEv>:
/*
  * Signal that the rendering of the frame has completed. Used by
  * some systems to avoid using any previous vsync.
  */
void OSWrappers::signalRenderingDone()
{
 8007400:	b480      	push	{r7}
 8007402:	af00      	add	r7, sp, #0
    vsync_sem = 0;
 8007404:	4b03      	ldr	r3, [pc, #12]	; (8007414 <_ZN8touchgfx10OSWrappers19signalRenderingDoneEv+0x14>)
 8007406:	2200      	movs	r2, #0
 8007408:	601a      	str	r2, [r3, #0]
}
 800740a:	bf00      	nop
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr
 8007414:	20000e84 	.word	0x20000e84

08007418 <_ZN8touchgfx10OSWrappers16isVSyncAvailableEv>:
 * @note signalRenderingDone is typically used together with this function.
 *
 * @return True if VSync occurred.
 */
bool OSWrappers::isVSyncAvailable()
{
 8007418:	b480      	push	{r7}
 800741a:	af00      	add	r7, sp, #0
    return vsync_sem;
 800741c:	4b05      	ldr	r3, [pc, #20]	; (8007434 <_ZN8touchgfx10OSWrappers16isVSyncAvailableEv+0x1c>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2b00      	cmp	r3, #0
 8007422:	bf14      	ite	ne
 8007424:	2301      	movne	r3, #1
 8007426:	2300      	moveq	r3, #0
 8007428:	b2db      	uxtb	r3, r3
}
 800742a:	4618      	mov	r0, r3
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr
 8007434:	20000e84 	.word	0x20000e84

08007438 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
/*
 * This function check if a VSYNC has occured.
 * If VSYNC has occured, signal TouchGFX to start a rendering
 */
void OSWrappers::waitForVSync()
{
 8007438:	b580      	push	{r7, lr}
 800743a:	af00      	add	r7, sp, #0
    if(vsync_sem)
 800743c:	4b0a      	ldr	r3, [pc, #40]	; (8007468 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x30>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2b00      	cmp	r3, #0
 8007442:	bf14      	ite	ne
 8007444:	2301      	movne	r3, #1
 8007446:	2300      	moveq	r3, #0
 8007448:	b2db      	uxtb	r3, r3
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00a      	beq.n	8007464 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>
    {
        vsync_sem = 0;
 800744e:	4b06      	ldr	r3, [pc, #24]	; (8007468 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x30>)
 8007450:	2200      	movs	r2, #0
 8007452:	601a      	str	r2, [r3, #0]
        HAL::getInstance()->backPorchExited();
 8007454:	f7fd fa86 	bl	8004964 <_ZN8touchgfx3HAL11getInstanceEv>
 8007458:	4603      	mov	r3, r0
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	3270      	adds	r2, #112	; 0x70
 800745e:	6812      	ldr	r2, [r2, #0]
 8007460:	4618      	mov	r0, r3
 8007462:	4790      	blx	r2
    }
}
 8007464:	bf00      	nop
 8007466:	bd80      	pop	{r7, pc}
 8007468:	20000e84 	.word	0x20000e84

0800746c <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
        : color(0)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	601a      	str	r2, [r3, #0]
    }
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4618      	mov	r0, r3
 800747e:	370c      	adds	r7, #12
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
    {
 8007490:	4a04      	ldr	r2, [pc, #16]	; (80074a4 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	601a      	str	r2, [r3, #0]
    }
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4618      	mov	r0, r3
 800749a:	370c      	adds	r7, #12
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr
 80074a4:	08012258 	.word	0x08012258

080074a8 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
    }
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f7ff ffe9 	bl	8007488 <_ZN8touchgfx9DMA_QueueD1Ev>
 80074b6:	2104      	movs	r1, #4
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f008 f9eb 	bl	800f894 <_ZdlPvj>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4618      	mov	r0, r3
 80074c2:	3708      	adds	r7, #8
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <_ZN8touchgfx13DMA_Interface10initializeEv>:
    {
        waitForFrameBufferSemaphore();
    }

    /** Perform initialization. Does nothing in this base class. */
    virtual void initialize()
 80074c8:	b480      	push	{r7}
 80074ca:	b083      	sub	sp, #12
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
    {
    }
 80074d0:	bf00      	nop
 80074d2:	370c      	adds	r7, #12
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA_Interface implementation. As
     * default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType()
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 80074e4:	2300      	movs	r3, #0
    }
 80074e6:	4618      	mov	r0, r3
 80074e8:	370c      	adds	r7, #12
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr
	...

080074f4 <_ZN8touchgfx13DMA_InterfaceD1Ev>:

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
    {
 80074fc:	4a04      	ldr	r2, [pc, #16]	; (8007510 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	601a      	str	r2, [r3, #0]
    }
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4618      	mov	r0, r3
 8007506:	370c      	adds	r7, #12
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr
 8007510:	080125d0 	.word	0x080125d0

08007514 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
    }
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f7ff ffe9 	bl	80074f4 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8007522:	210c      	movs	r1, #12
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f008 f9b5 	bl	800f894 <_ZdlPvj>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4618      	mov	r0, r3
 800752e:	3708      	adds	r7, #8
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8007534:	b480      	push	{r7}
 8007536:	b083      	sub	sp, #12
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 800753e:	4a09      	ldr	r2, [pc, #36]	; (8007564 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	601a      	str	r2, [r3, #0]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	683a      	ldr	r2, [r7, #0]
 8007548:	605a      	str	r2, [r3, #4]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	721a      	strb	r2, [r3, #8]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	725a      	strb	r2, [r3, #9]
    {
    }
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	4618      	mov	r0, r3
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr
 8007564:	080125d0 	.word	0x080125d0

08007568 <_ZN8STM32DMA18signalDMAInterruptEv>:
    /**
     * @fn virtual void STM32DMA::signalDMAInterrupt();
     *
     * @brief Does nothing.
     */
    virtual void signalDMAInterrupt()
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
    {
    }
 8007570:	bf00      	nop
 8007572:	370c      	adds	r7, #12
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <_ZN8STM32DMA5flushEv>:
     * @fn virtual void STM32DMA::flush();
     *
     * @brief Block until all DMA transfers are complete. Since this particular DMA does not do
     * anything, return immediately.
     */
    virtual void flush()
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
    {
    }
 8007584:	bf00      	nop
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	330c      	adds	r3, #12
 800759c:	4618      	mov	r0, r3
 800759e:	f7ff ff65 	bl	800746c <_ZN8touchgfx9colortypeC1Ev>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4618      	mov	r0, r3
 80075a6:	3708      	adds	r7, #8
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <_ZN8STM32DMAC1Ev>:
  */

#include <STM32DMA.hpp>
#include <assert.h>

STM32DMA::STM32DMA()
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
    : DMA_Interface(q), q(&b, 1)
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	330c      	adds	r3, #12
 80075ba:	4619      	mov	r1, r3
 80075bc:	4610      	mov	r0, r2
 80075be:	f7ff ffb9 	bl	8007534 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 80075c2:	4a0b      	ldr	r2, [pc, #44]	; (80075f0 <_ZN8STM32DMAC1Ev+0x44>)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	601a      	str	r2, [r3, #0]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f103 000c 	add.w	r0, r3, #12
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	3320      	adds	r3, #32
 80075d2:	2201      	movs	r2, #1
 80075d4:	4619      	mov	r1, r3
 80075d6:	f001 ffbd 	bl	8009554 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	3320      	adds	r3, #32
 80075de:	4618      	mov	r0, r3
 80075e0:	f7ff ffd6 	bl	8007590 <_ZN8touchgfx6BlitOpC1Ev>
{
}
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	4618      	mov	r0, r3
 80075e8:	3708      	adds	r7, #8
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
 80075ee:	bf00      	nop
 80075f0:	08012208 	.word	0x08012208

080075f4 <_ZN8STM32DMA11getBlitCapsEv>:

touchgfx::BlitOperations STM32DMA::getBlitCaps()
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
    return static_cast<touchgfx::BlitOperations>(0);
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	370c      	adds	r7, #12
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr
	...

0800760c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32DMA::setupDataCopy(const touchgfx::BlitOp& blitOp)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b082      	sub	sp, #8
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
    assert(0 && "DMA operation not supported");
 8007616:	4b03      	ldr	r3, [pc, #12]	; (8007624 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18>)
 8007618:	4a03      	ldr	r2, [pc, #12]	; (8007628 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c>)
 800761a:	2122      	movs	r1, #34	; 0x22
 800761c:	4803      	ldr	r0, [pc, #12]	; (800762c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20>)
 800761e:	f008 f967 	bl	800f8f0 <__assert_func>
 8007622:	bf00      	nop
 8007624:	08011320 	.word	0x08011320
 8007628:	08011344 	.word	0x08011344
 800762c:	08011384 	.word	0x08011384

08007630 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
}

void STM32DMA::setupDataFill(const touchgfx::BlitOp& blitOp)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
    assert(0 && "DMA operation not supported");
 800763a:	4b03      	ldr	r3, [pc, #12]	; (8007648 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x18>)
 800763c:	4a03      	ldr	r2, [pc, #12]	; (800764c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1c>)
 800763e:	2127      	movs	r1, #39	; 0x27
 8007640:	4803      	ldr	r0, [pc, #12]	; (8007650 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x20>)
 8007642:	f008 f955 	bl	800f8f0 <__assert_func>
 8007646:	bf00      	nop
 8007648:	08011320 	.word	0x08011320
 800764c:	080113b0 	.word	0x080113b0
 8007650:	08011384 	.word	0x08011384

08007654 <_ZN8STM32DMAD1Ev>:
class STM32DMA : public touchgfx::DMA_Interface
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	4a08      	ldr	r2, [pc, #32]	; (8007680 <_ZN8STM32DMAD1Ev+0x2c>)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	601a      	str	r2, [r3, #0]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	330c      	adds	r3, #12
 8007666:	4618      	mov	r0, r3
 8007668:	f000 f81c 	bl	80076a4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	4618      	mov	r0, r3
 8007670:	f7ff ff40 	bl	80074f4 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4618      	mov	r0, r3
 8007678:	3708      	adds	r7, #8
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	08012208 	.word	0x08012208

08007684 <_ZN8STM32DMAD0Ev>:
 8007684:	b580      	push	{r7, lr}
 8007686:	b082      	sub	sp, #8
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f7ff ffe1 	bl	8007654 <_ZN8STM32DMAD1Ev>
 8007692:	2144      	movs	r1, #68	; 0x44
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f008 f8fd 	bl	800f894 <_ZdlPvj>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	4618      	mov	r0, r3
 800769e:	3708      	adds	r7, #8
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b082      	sub	sp, #8
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	4a05      	ldr	r2, [pc, #20]	; (80076c4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	601a      	str	r2, [r3, #0]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4618      	mov	r0, r3
 80076b6:	f7ff fee7 	bl	8007488 <_ZN8touchgfx9DMA_QueueD1Ev>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4618      	mov	r0, r3
 80076be:	3708      	adds	r7, #8
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	08012620 	.word	0x08012620

080076c8 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f7ff ffe7 	bl	80076a4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80076d6:	2114      	movs	r1, #20
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f008 f8db 	bl	800f894 <_ZdlPvj>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4618      	mov	r0, r3
 80076e2:	3708      	adds	r7, #8
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 80076f0:	4a04      	ldr	r2, [pc, #16]	; (8007704 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6013      	str	r3, [r2, #0]
    }
 80076f6:	bf00      	nop
 80076f8:	370c      	adds	r7, #12
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	20001330 	.word	0x20001330

08007708 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8007708:	b480      	push	{r7}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	607a      	str	r2, [r7, #4]
 8007714:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8007716:	4a0b      	ldr	r2, [pc, #44]	; (8007744 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	601a      	str	r2, [r3, #0]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	68ba      	ldr	r2, [r7, #8]
 8007720:	605a      	str	r2, [r3, #4]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	609a      	str	r2, [r3, #8]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	683a      	ldr	r2, [r7, #0]
 800772c:	60da      	str	r2, [r3, #12]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	69ba      	ldr	r2, [r7, #24]
 8007732:	611a      	str	r2, [r3, #16]
    {
    }
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	4618      	mov	r0, r3
 8007738:	3714      	adds	r7, #20
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr
 8007742:	bf00      	nop
 8007744:	08012340 	.word	0x08012340

08007748 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
    {
 8007750:	4a04      	ldr	r2, [pc, #16]	; (8007764 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	601a      	str	r2, [r3, #0]
    }
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4618      	mov	r0, r3
 800775a:	370c      	adds	r7, #12
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr
 8007764:	08012340 	.word	0x08012340

08007768 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
    }
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f7ff ffe9 	bl	8007748 <_ZN8touchgfx7MVPHeapD1Ev>
 8007776:	2114      	movs	r1, #20
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f008 f88b 	bl	800f894 <_ZdlPvj>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	4618      	mov	r0, r3
 8007782:	3708      	adds	r7, #8
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <_ZN8touchgfx3LCDC1Ev>:
 */
class LCD
{
public:
    /** Initializes a new instance of the LCD class. */
    LCD()
 8007788:	b480      	push	{r7}
 800778a:	b083      	sub	sp, #12
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
        : textureMapperClass(0)
 8007790:	4a06      	ldr	r2, [pc, #24]	; (80077ac <_ZN8touchgfx3LCDC1Ev+0x24>)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	601a      	str	r2, [r3, #0]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	605a      	str	r2, [r3, #4]
    {
    }
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	4618      	mov	r0, r3
 80077a0:	370c      	adds	r7, #12
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr
 80077aa:	bf00      	nop
 80077ac:	080127cc 	.word	0x080127cc

080077b0 <_ZN8touchgfx3LCDD1Ev>:

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 80077b0:	b480      	push	{r7}
 80077b2:	b083      	sub	sp, #12
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
    {
 80077b8:	4a04      	ldr	r2, [pc, #16]	; (80077cc <_ZN8touchgfx3LCDD1Ev+0x1c>)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	601a      	str	r2, [r3, #0]
    }
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	4618      	mov	r0, r3
 80077c2:	370c      	adds	r7, #12
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr
 80077cc:	080127cc 	.word	0x080127cc

080077d0 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
    }
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f7ff ffe9 	bl	80077b0 <_ZN8touchgfx3LCDD1Ev>
 80077de:	2108      	movs	r1, #8
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f008 f857 	bl	800f894 <_ZdlPvj>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	4618      	mov	r0, r3
 80077ea:	3708      	adds	r7, #8
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 80077f0:	b480      	push	{r7}
 80077f2:	b083      	sub	sp, #12
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	801a      	strh	r2, [r3, #0]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	805a      	strh	r2, [r3, #2]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	809a      	strh	r2, [r3, #4]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	80da      	strh	r2, [r3, #6]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	811a      	strh	r2, [r3, #8]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2200      	movs	r2, #0
 800781a:	815a      	strh	r2, [r3, #10]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	819a      	strh	r2, [r3, #12]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	739a      	strb	r2, [r3, #14]
        {
        }
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	4618      	mov	r0, r3
 800782c:	370c      	adds	r7, #12
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr

08007836 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8007836:	b580      	push	{r7, lr}
 8007838:	b082      	sub	sp, #8
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	4618      	mov	r0, r3
 8007842:	f7ff ffd5 	bl	80077f0 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	611a      	str	r2, [r3, #16]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	829a      	strh	r2, [r3, #20]
    {
    }
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4618      	mov	r0, r3
 8007856:	3708      	adds	r7, #8
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	607a      	str	r2, [r7, #4]
 8007868:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 800786a:	4a55      	ldr	r2, [pc, #340]	; (80079c0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	601a      	str	r2, [r3, #0]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	68ba      	ldr	r2, [r7, #8]
 8007874:	605a      	str	r2, [r3, #4]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	609a      	str	r2, [r3, #8]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	683a      	ldr	r2, [r7, #0]
 8007880:	60da      	str	r2, [r3, #12]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2200      	movs	r2, #0
 8007886:	611a      	str	r2, [r3, #16]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2200      	movs	r2, #0
 800788c:	615a      	str	r2, [r3, #20]
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2200      	movs	r2, #0
 8007892:	619a      	str	r2, [r3, #24]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	331c      	adds	r3, #28
 8007898:	4618      	mov	r0, r3
 800789a:	f7ff ffcc 	bl	8007836 <_ZN8touchgfx8GesturesC1Ev>
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2200      	movs	r2, #0
 80078a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2200      	movs	r2, #0
 80078aa:	639a      	str	r2, [r3, #56]	; 0x38
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2200      	movs	r2, #0
 80078b0:	63da      	str	r2, [r3, #60]	; 0x3c
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2200      	movs	r2, #0
 80078b6:	641a      	str	r2, [r3, #64]	; 0x40
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2200      	movs	r2, #0
 80078bc:	645a      	str	r2, [r3, #68]	; 0x44
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2201      	movs	r2, #1
 80078ca:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2200      	movs	r2, #0
 80078d2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2200      	movs	r2, #0
 80078da:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2200      	movs	r2, #0
 80078e2:	64da      	str	r2, [r3, #76]	; 0x4c
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	3350      	adds	r3, #80	; 0x50
 80078e8:	4618      	mov	r0, r3
 80078ea:	f7fd fcac 	bl	8005246 <_ZN8touchgfx4RectC1Ev>
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2200      	movs	r2, #0
 80078f2:	659a      	str	r2, [r3, #88]	; 0x58
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2200      	movs	r2, #0
 80078f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2200      	movs	r2, #0
 80078fe:	661a      	str	r2, [r3, #96]	; 0x60
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2201      	movs	r2, #1
 8007904:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2200      	movs	r2, #0
 800790c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2200      	movs	r2, #0
 8007914:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2201      	movs	r2, #1
 800791c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2200      	movs	r2, #0
 8007924:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2200      	movs	r2, #0
 800792c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2200      	movs	r2, #0
 8007934:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2200      	movs	r2, #0
 800793c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2200      	movs	r2, #0
 8007944:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2200      	movs	r2, #0
 800794c:	671a      	str	r2, [r3, #112]	; 0x70
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2200      	movs	r2, #0
 8007952:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2200      	movs	r2, #0
 800795a:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2200      	movs	r2, #0
 8007962:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2201      	movs	r2, #1
 800796a:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2201      	movs	r2, #1
 8007972:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 8007976:	4a13      	ldr	r2, [pc, #76]	; (80079c4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 800797c:	4a12      	ldr	r2, [pc, #72]	; (80079c8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 800797e:	8b3b      	ldrh	r3, [r7, #24]
 8007980:	8013      	strh	r3, [r2, #0]
 8007982:	4b11      	ldr	r3, [pc, #68]	; (80079c8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8007984:	881a      	ldrh	r2, [r3, #0]
 8007986:	4b11      	ldr	r3, [pc, #68]	; (80079cc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8007988:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800798a:	4a11      	ldr	r2, [pc, #68]	; (80079d0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 800798c:	8bbb      	ldrh	r3, [r7, #28]
 800798e:	8013      	strh	r3, [r2, #0]
 8007990:	4b0f      	ldr	r3, [pc, #60]	; (80079d0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8007992:	881a      	ldrh	r2, [r3, #0]
 8007994:	4b0f      	ldr	r3, [pc, #60]	; (80079d4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8007996:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8007998:	4b0f      	ldr	r3, [pc, #60]	; (80079d8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 800799a:	2200      	movs	r2, #0
 800799c:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800799e:	8b3a      	ldrh	r2, [r7, #24]
 80079a0:	8bbb      	ldrh	r3, [r7, #28]
 80079a2:	429a      	cmp	r2, r3
 80079a4:	bf34      	ite	cc
 80079a6:	2301      	movcc	r3, #1
 80079a8:	2300      	movcs	r3, #0
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	461a      	mov	r2, r3
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	4618      	mov	r0, r3
 80079b8:	3710      	adds	r7, #16
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	080124f8 	.word	0x080124f8
 80079c4:	200012d4 	.word	0x200012d4
 80079c8:	200012c8 	.word	0x200012c8
 80079cc:	200012ce 	.word	0x200012ce
 80079d0:	200012ca 	.word	0x200012ca
 80079d4:	200012d0 	.word	0x200012d0
 80079d8:	200012cc 	.word	0x200012cc

080079dc <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
    {
        app.gotoMainScreenScreenNoTransition();
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	4618      	mov	r0, r3
 80079ea:	f7fd f98d 	bl	8004d08 <_ZN23FrontendApplicationBase32gotoMainScreenScreenNoTransitionEv>
    }
 80079ee:	bf00      	nop
 80079f0:	3708      	adds	r7, #8
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
	...

080079f8 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b086      	sub	sp, #24
 80079fc:	af02      	add	r7, sp, #8
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	60b9      	str	r1, [r7, #8]
 8007a02:	607a      	str	r2, [r7, #4]
 8007a04:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8007a06:	68f8      	ldr	r0, [r7, #12]
 8007a08:	69bb      	ldr	r3, [r7, #24]
 8007a0a:	9300      	str	r3, [sp, #0]
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	68b9      	ldr	r1, [r7, #8]
 8007a12:	f7ff fe79 	bl	8007708 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8007a16:	4a04      	ldr	r2, [pc, #16]	; (8007a28 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	601a      	str	r2, [r3, #0]
    {

    }
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3710      	adds	r7, #16
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	0801232c 	.word	0x0801232c

08007a2c <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	4801      	ldr	r0, [pc, #4]	; (8007a38 <__tcf_0+0xc>)
 8007a32:	f000 f97d 	bl	8007d30 <_ZN12FrontendHeapD1Ev>
 8007a36:	bd80      	pop	{r7, pc}
 8007a38:	20000e88 	.word	0x20000e88

08007a3c <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8007a40:	4b12      	ldr	r3, [pc, #72]	; (8007a8c <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	f3bf 8f5b 	dmb	ish
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	f003 0301 	and.w	r3, r3, #1
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	bf0c      	ite	eq
 8007a52:	2301      	moveq	r3, #1
 8007a54:	2300      	movne	r3, #0
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d013      	beq.n	8007a84 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8007a5c:	480b      	ldr	r0, [pc, #44]	; (8007a8c <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8007a5e:	f007 ff1b 	bl	800f898 <__cxa_guard_acquire>
 8007a62:	4603      	mov	r3, r0
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	bf14      	ite	ne
 8007a68:	2301      	movne	r3, #1
 8007a6a:	2300      	moveq	r3, #0
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d008      	beq.n	8007a84 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8007a72:	4807      	ldr	r0, [pc, #28]	; (8007a90 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8007a74:	f000 f868 	bl	8007b48 <_ZN12FrontendHeapC1Ev>
 8007a78:	4806      	ldr	r0, [pc, #24]	; (8007a94 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 8007a7a:	f007 ff57 	bl	800f92c <atexit>
 8007a7e:	4803      	ldr	r0, [pc, #12]	; (8007a8c <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8007a80:	f007 ff16 	bl	800f8b0 <__cxa_guard_release>
        return instance;
 8007a84:	4b02      	ldr	r3, [pc, #8]	; (8007a90 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 8007a86:	4618      	mov	r0, r3
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	200011f4 	.word	0x200011f4
 8007a90:	20000e88 	.word	0x20000e88
 8007a94:	08007a2d 	.word	0x08007a2d

08007a98 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	4a05      	ldr	r2, [pc, #20]	; (8007ab8 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	601a      	str	r2, [r3, #0]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f7ff fe4d 	bl	8007748 <_ZN8touchgfx7MVPHeapD1Ev>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3708      	adds	r7, #8
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	0801232c 	.word	0x0801232c

08007abc <_ZN16FrontendHeapBaseD0Ev>:
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b082      	sub	sp, #8
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f7ff ffe7 	bl	8007a98 <_ZN16FrontendHeapBaseD1Ev>
 8007aca:	2114      	movs	r1, #20
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f007 fee1 	bl	800f894 <_ZdlPvj>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3708      	adds	r7, #8
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <_ZN8touchgfx9PartitionINS_4meta8TypeListI19MainScreenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b082      	sub	sp, #8
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f000 fbc4 	bl	8008274 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8007aec:	4a03      	ldr	r2, [pc, #12]	; (8007afc <_ZN8touchgfx9PartitionINS_4meta8TypeListI19MainScreenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	601a      	str	r2, [r3, #0]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	4618      	mov	r0, r3
 8007af6:	3708      	adds	r7, #8
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}
 8007afc:	080122f8 	.word	0x080122f8

08007b00 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14MainScreenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f000 fbb2 	bl	8008274 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8007b10:	4a03      	ldr	r2, [pc, #12]	; (8007b20 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14MainScreenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	601a      	str	r2, [r3, #0]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3708      	adds	r7, #8
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}
 8007b20:	080122c4 	.word	0x080122c4

08007b24 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f000 fba0 	bl	8008274 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8007b34:	4a03      	ldr	r2, [pc, #12]	; (8007b44 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	601a      	str	r2, [r3, #0]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3708      	adds	r7, #8
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	08012290 	.word	0x08012290

08007b48 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8007b48:	b590      	push	{r4, r7, lr}
 8007b4a:	b085      	sub	sp, #20
 8007b4c:	af02      	add	r7, sp, #8
 8007b4e:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f103 0114 	add.w	r1, r3, #20
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f503 74fc 	add.w	r4, r3, #504	; 0x1f8
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f503 7304 	add.w	r3, r3, #528	; 0x210
                     app(model, *this)
 8007b6a:	9300      	str	r3, [sp, #0]
 8007b6c:	4623      	mov	r3, r4
 8007b6e:	f7ff ff43 	bl	80079f8 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8007b72:	4a18      	ldr	r2, [pc, #96]	; (8007bd4 <_ZN12FrontendHeapC1Ev+0x8c>)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	601a      	str	r2, [r3, #0]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	3314      	adds	r3, #20
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f7ff ffad 	bl	8007adc <_ZN8touchgfx9PartitionINS_4meta8TypeListI19MainScreenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	332c      	adds	r3, #44	; 0x2c
 8007b86:	4618      	mov	r0, r3
 8007b88:	f7ff ffba 	bl	8007b00 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14MainScreenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007b92:	4618      	mov	r0, r3
 8007b94:	f7ff ffc6 	bl	8007b24 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7ff f85a 	bl	8006c58 <_ZN5ModelC1Ev>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f503 7004 	add.w	r0, r3, #528	; 0x210
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	f7fe fe4e 	bl	8006854 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	4610      	mov	r0, r2
 8007bc4:	f7ff ff0a 	bl	80079dc <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	4618      	mov	r0, r3
 8007bcc:	370c      	adds	r7, #12
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd90      	pop	{r4, r7, pc}
 8007bd2:	bf00      	nop
 8007bd4:	0801227c 	.word	0x0801227c

08007bd8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b086      	sub	sp, #24
 8007bdc:	af02      	add	r7, sp, #8
 8007bde:	60f8      	str	r0, [r7, #12]
 8007be0:	60b9      	str	r1, [r7, #8]
 8007be2:	607a      	str	r2, [r7, #4]
 8007be4:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8007be6:	68f8      	ldr	r0, [r7, #12]
 8007be8:	8bbb      	ldrh	r3, [r7, #28]
 8007bea:	9301      	str	r3, [sp, #4]
 8007bec:	8b3b      	ldrh	r3, [r7, #24]
 8007bee:	9300      	str	r3, [sp, #0]
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	68b9      	ldr	r1, [r7, #8]
 8007bf6:	f7ff fe31 	bl	800785c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8007bfa:	4a04      	ldr	r2, [pc, #16]	; (8007c0c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	601a      	str	r2, [r3, #0]
    }
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	4618      	mov	r0, r3
 8007c04:	3710      	adds	r7, #16
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	08012350 	.word	0x08012350

08007c10 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b086      	sub	sp, #24
 8007c14:	af02      	add	r7, sp, #8
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	607a      	str	r2, [r7, #4]
 8007c1c:	603b      	str	r3, [r7, #0]
 8007c1e:	68f8      	ldr	r0, [r7, #12]
 8007c20:	8bbb      	ldrh	r3, [r7, #28]
 8007c22:	9301      	str	r3, [sp, #4]
 8007c24:	8b3b      	ldrh	r3, [r7, #24]
 8007c26:	9300      	str	r3, [sp, #0]
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	68b9      	ldr	r1, [r7, #8]
 8007c2e:	f7ff ffd3 	bl	8007bd8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8007c32:	4a04      	ldr	r2, [pc, #16]	; (8007c44 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	601a      	str	r2, [r3, #0]
    }
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3710      	adds	r7, #16
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
 8007c42:	bf00      	nop
 8007c44:	08012130 	.word	0x08012130

08007c48 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8007c48:	b480      	push	{r7}
 8007c4a:	b083      	sub	sp, #12
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	4a04      	ldr	r2, [pc, #16]	; (8007c64 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	601a      	str	r2, [r3, #0]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4618      	mov	r0, r3
 8007c5a:	370c      	adds	r7, #12
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr
 8007c64:	08012118 	.word	0x08012118

08007c68 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7ff ffe8 	bl	8007c48 <_ZN8touchgfx15TouchControllerC1Ev>
 8007c78:	4a03      	ldr	r2, [pc, #12]	; (8007c88 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	601a      	str	r2, [r3, #0]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	4618      	mov	r0, r3
 8007c82:	3708      	adds	r7, #8
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	08012100 	.word	0x08012100

08007c8c <_ZN8touchgfx7LCD1bppC1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD1bpp : public LCD
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7ff fd76 	bl	8007788 <_ZN8touchgfx3LCDC1Ev>
 8007c9c:	4a03      	ldr	r2, [pc, #12]	; (8007cac <_ZN8touchgfx7LCD1bppC1Ev+0x20>)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	601a      	str	r2, [r3, #0]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3708      	adds	r7, #8
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}
 8007cac:	080129a8 	.word	0x080129a8

08007cb0 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 128, 64);

void touchgfx_init()
{
 8007cb0:	b590      	push	{r4, r7, lr}
 8007cb2:	b085      	sub	sp, #20
 8007cb4:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8007cb6:	f7fe fb97 	bl	80063e8 <_ZN14BitmapDatabase11getInstanceEv>
 8007cba:	4604      	mov	r4, r0
 8007cbc:	f7fe fb9e 	bl	80063fc <_ZN14BitmapDatabase15getInstanceSizeEv>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	9300      	str	r3, [sp, #0]
 8007cc8:	2300      	movs	r3, #0
 8007cca:	2200      	movs	r2, #0
 8007ccc:	4620      	mov	r0, r4
 8007cce:	f006 fd3d 	bl	800e74c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 8007cd2:	4809      	ldr	r0, [pc, #36]	; (8007cf8 <touchgfx_init+0x48>)
 8007cd4:	f7ff fd08 	bl	80076e8 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8007cd8:	2000      	movs	r0, #0
 8007cda:	f7fe fcd3 	bl	8006684 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8007cde:	4807      	ldr	r0, [pc, #28]	; (8007cfc <touchgfx_init+0x4c>)
 8007ce0:	f006 fc9c 	bl	800e61c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8007ce4:	f7ff feaa 	bl	8007a3c <_ZN12FrontendHeap11getInstanceEv>
 8007ce8:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8007cea:	4805      	ldr	r0, [pc, #20]	; (8007d00 <touchgfx_init+0x50>)
 8007cec:	f7ff fa62 	bl	80071b4 <_ZN11TouchGFXHAL10initializeEv>
}
 8007cf0:	bf00      	nop
 8007cf2:	370c      	adds	r7, #12
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd90      	pop	{r4, r7, pc}
 8007cf8:	20001248 	.word	0x20001248
 8007cfc:	20000014 	.word	0x20000014
 8007d00:	2000124c 	.word	0x2000124c

08007d04 <touchgfx_components_init>:

void touchgfx_components_init()
{
 8007d04:	b480      	push	{r7}
 8007d06:	af00      	add	r7, sp, #0
}
 8007d08:	bf00      	nop
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr
	...

08007d14 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	af00      	add	r7, sp, #0
    /*
     * Main event loop will check for VSYNC signal, and then process next frame.
     *
     * Note This function returns immediately if there is no VSYNC signal.
     */
     if (OSWrappers::isVSyncAvailable())
 8007d18:	f7ff fb7e 	bl	8007418 <_ZN8touchgfx10OSWrappers16isVSyncAvailableEv>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d002      	beq.n	8007d28 <touchgfx_taskEntry+0x14>
     {
         hal.backPorchExited();
 8007d22:	4802      	ldr	r0, [pc, #8]	; (8007d2c <touchgfx_taskEntry+0x18>)
 8007d24:	f7ff f8f4 	bl	8006f10 <_ZN8touchgfx3HAL15backPorchExitedEv>
     }
}
 8007d28:	bf00      	nop
 8007d2a:	bd80      	pop	{r7, pc}
 8007d2c:	2000124c 	.word	0x2000124c

08007d30 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	4a10      	ldr	r2, [pc, #64]	; (8007d7c <_ZN12FrontendHeapD1Ev+0x4c>)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	601a      	str	r2, [r3, #0]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007d44:	4618      	mov	r0, r3
 8007d46:	f7fe fd4f 	bl	80067e8 <_ZN19FrontendApplicationD1Ev>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007d50:	4618      	mov	r0, r3
 8007d52:	f000 f827 	bl	8007da4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	332c      	adds	r3, #44	; 0x2c
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f000 f844 	bl	8007de8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14MainScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	3314      	adds	r3, #20
 8007d64:	4618      	mov	r0, r3
 8007d66:	f000 f863 	bl	8007e30 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19MainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f7ff fe93 	bl	8007a98 <_ZN16FrontendHeapBaseD1Ev>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	4618      	mov	r0, r3
 8007d76:	3708      	adds	r7, #8
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}
 8007d7c:	0801227c 	.word	0x0801227c

08007d80 <_ZN12FrontendHeapD0Ev>:
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b082      	sub	sp, #8
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f7ff ffd1 	bl	8007d30 <_ZN12FrontendHeapD1Ev>
 8007d8e:	f44f 715b 	mov.w	r1, #876	; 0x36c
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f007 fd7e 	bl	800f894 <_ZdlPvj>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3708      	adds	r7, #8
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
	...

08007da4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b082      	sub	sp, #8
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	4a05      	ldr	r2, [pc, #20]	; (8007dc4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	601a      	str	r2, [r3, #0]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4618      	mov	r0, r3
 8007db6:	f000 fa5b 	bl	8008270 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3708      	adds	r7, #8
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}
 8007dc4:	08012290 	.word	0x08012290

08007dc8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f7ff ffe7 	bl	8007da4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8007dd6:	2114      	movs	r1, #20
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f007 fd5b 	bl	800f894 <_ZdlPvj>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	4618      	mov	r0, r3
 8007de2:	3708      	adds	r7, #8
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14MainScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b082      	sub	sp, #8
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	4a05      	ldr	r2, [pc, #20]	; (8007e08 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14MainScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	601a      	str	r2, [r3, #0]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f000 fa39 	bl	8008270 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	4618      	mov	r0, r3
 8007e02:	3708      	adds	r7, #8
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}
 8007e08:	080122c4 	.word	0x080122c4

08007e0c <_ZN8touchgfx9PartitionINS_4meta8TypeListI14MainScreenViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f7ff ffe7 	bl	8007de8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14MainScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8007e1a:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f007 fd38 	bl	800f894 <_ZdlPvj>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	4618      	mov	r0, r3
 8007e28:	3708      	adds	r7, #8
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
	...

08007e30 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19MainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	4a05      	ldr	r2, [pc, #20]	; (8007e50 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19MainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	601a      	str	r2, [r3, #0]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4618      	mov	r0, r3
 8007e42:	f000 fa15 	bl	8008270 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3708      	adds	r7, #8
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}
 8007e50:	080122f8 	.word	0x080122f8

08007e54 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19MainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b082      	sub	sp, #8
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f7ff ffe7 	bl	8007e30 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19MainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8007e62:	2118      	movs	r1, #24
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f007 fd15 	bl	800f894 <_ZdlPvj>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3708      	adds	r7, #8
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <_ZN8touchgfx7LCD1bppD1Ev>:
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	4a05      	ldr	r2, [pc, #20]	; (8007e94 <_ZN8touchgfx7LCD1bppD1Ev+0x20>)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	601a      	str	r2, [r3, #0]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4618      	mov	r0, r3
 8007e86:	f7ff fc93 	bl	80077b0 <_ZN8touchgfx3LCDD1Ev>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3708      	adds	r7, #8
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	080129a8 	.word	0x080129a8

08007e98 <_ZN8touchgfx7LCD1bppD0Ev>:
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b082      	sub	sp, #8
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f7ff ffe7 	bl	8007e74 <_ZN8touchgfx7LCD1bppD1Ev>
 8007ea6:	2108      	movs	r1, #8
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f007 fcf3 	bl	800f894 <_ZdlPvj>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3708      	adds	r7, #8
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <_Z41__static_initialization_and_destruction_0ii>:
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b084      	sub	sp, #16
 8007ebc:	af02      	add	r7, sp, #8
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d117      	bne.n	8007ef8 <_Z41__static_initialization_and_destruction_0ii+0x40>
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d112      	bne.n	8007ef8 <_Z41__static_initialization_and_destruction_0ii+0x40>
static STM32TouchController tc;
 8007ed2:	4817      	ldr	r0, [pc, #92]	; (8007f30 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8007ed4:	f7ff fec8 	bl	8007c68 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 8007ed8:	4816      	ldr	r0, [pc, #88]	; (8007f34 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8007eda:	f7ff fb67 	bl	80075ac <_ZN8STM32DMAC1Ev>
static LCD1bpp display;
 8007ede:	4816      	ldr	r0, [pc, #88]	; (8007f38 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8007ee0:	f7ff fed4 	bl	8007c8c <_ZN8touchgfx7LCD1bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 128, 64);
 8007ee4:	2340      	movs	r3, #64	; 0x40
 8007ee6:	9301      	str	r3, [sp, #4]
 8007ee8:	2380      	movs	r3, #128	; 0x80
 8007eea:	9300      	str	r3, [sp, #0]
 8007eec:	4b10      	ldr	r3, [pc, #64]	; (8007f30 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8007eee:	4a12      	ldr	r2, [pc, #72]	; (8007f38 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8007ef0:	4910      	ldr	r1, [pc, #64]	; (8007f34 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8007ef2:	4812      	ldr	r0, [pc, #72]	; (8007f3c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8007ef4:	f7ff fe8c 	bl	8007c10 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d113      	bne.n	8007f26 <_Z41__static_initialization_and_destruction_0ii+0x6e>
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d10e      	bne.n	8007f26 <_Z41__static_initialization_and_destruction_0ii+0x6e>
 8007f08:	480c      	ldr	r0, [pc, #48]	; (8007f3c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8007f0a:	f7ff f9ff 	bl	800730c <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8007f0e:	480c      	ldr	r0, [pc, #48]	; (8007f40 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8007f10:	f7fc f930 	bl	8004174 <_ZN23ApplicationFontProviderD1Ev>
static LCD1bpp display;
 8007f14:	4808      	ldr	r0, [pc, #32]	; (8007f38 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8007f16:	f7ff ffad 	bl	8007e74 <_ZN8touchgfx7LCD1bppD1Ev>
static STM32DMA dma;
 8007f1a:	4806      	ldr	r0, [pc, #24]	; (8007f34 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8007f1c:	f7ff fb9a 	bl	8007654 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 8007f20:	4803      	ldr	r0, [pc, #12]	; (8007f30 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8007f22:	f7fe fee9 	bl	8006cf8 <_ZN20STM32TouchControllerD1Ev>
}
 8007f26:	bf00      	nop
 8007f28:	3708      	adds	r7, #8
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	bf00      	nop
 8007f30:	200011f8 	.word	0x200011f8
 8007f34:	200011fc 	.word	0x200011fc
 8007f38:	20001240 	.word	0x20001240
 8007f3c:	2000124c 	.word	0x2000124c
 8007f40:	20000014 	.word	0x20000014

08007f44 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8007f4c:	2301      	movs	r3, #1
    }
 8007f4e:	4618      	mov	r0, r3
 8007f50:	370c      	adds	r7, #12
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr

08007f5a <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8007f5a:	b480      	push	{r7}
 8007f5c:	b083      	sub	sp, #12
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8007f62:	230c      	movs	r3, #12
    }
 8007f64:	4618      	mov	r0, r3
 8007f66:	370c      	adds	r7, #12
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr

08007f70 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	460b      	mov	r3, r1
 8007f7a:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8007f7c:	887a      	ldrh	r2, [r7, #2]
 8007f7e:	4613      	mov	r3, r2
 8007f80:	005b      	lsls	r3, r3, #1
 8007f82:	4413      	add	r3, r2
 8007f84:	009b      	lsls	r3, r3, #2
 8007f86:	3308      	adds	r3, #8
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	4413      	add	r3, r2
    }
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	370c      	adds	r7, #12
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr

08007f98 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8007fa4:	887a      	ldrh	r2, [r7, #2]
 8007fa6:	4613      	mov	r3, r2
 8007fa8:	005b      	lsls	r3, r3, #1
 8007faa:	4413      	add	r3, r2
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	3308      	adds	r3, #8
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	4413      	add	r3, r2
    }
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	370c      	adds	r7, #12
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr

08007fc0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI14MainScreenViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8007fc0:	b480      	push	{r7}
 8007fc2:	b083      	sub	sp, #12
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8007fc8:	2301      	movs	r3, #1
    }
 8007fca:	4618      	mov	r0, r3
 8007fcc:	370c      	adds	r7, #12
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr

08007fd6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14MainScreenViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8007fd6:	b480      	push	{r7}
 8007fd8:	b083      	sub	sp, #12
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8007fde:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
    }
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	370c      	adds	r7, #12
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr

08007fee <_ZN8touchgfx9PartitionINS_4meta8TypeListI14MainScreenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8007fee:	b480      	push	{r7}
 8007ff0:	b083      	sub	sp, #12
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
 8007ff6:	460b      	mov	r3, r1
 8007ff8:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8007ffa:	887b      	ldrh	r3, [r7, #2]
 8007ffc:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
 8008000:	fb02 f303 	mul.w	r3, r2, r3
 8008004:	3308      	adds	r3, #8
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	4413      	add	r3, r2
    }
 800800a:	4618      	mov	r0, r3
 800800c:	370c      	adds	r7, #12
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	4770      	bx	lr

08008016 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI14MainScreenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8008016:	b480      	push	{r7}
 8008018:	b083      	sub	sp, #12
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
 800801e:	460b      	mov	r3, r1
 8008020:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8008022:	887b      	ldrh	r3, [r7, #2]
 8008024:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
 8008028:	fb02 f303 	mul.w	r3, r2, r3
 800802c:	3308      	adds	r3, #8
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	4413      	add	r3, r2
    }
 8008032:	4618      	mov	r0, r3
 8008034:	370c      	adds	r7, #12
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr

0800803e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI19MainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800803e:	b480      	push	{r7}
 8008040:	b083      	sub	sp, #12
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8008046:	2301      	movs	r3, #1
    }
 8008048:	4618      	mov	r0, r3
 800804a:	370c      	adds	r7, #12
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr

08008054 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19MainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8008054:	b480      	push	{r7}
 8008056:	b083      	sub	sp, #12
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 800805c:	2310      	movs	r3, #16
    }
 800805e:	4618      	mov	r0, r3
 8008060:	370c      	adds	r7, #12
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr

0800806a <_ZN8touchgfx9PartitionINS_4meta8TypeListI19MainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 800806a:	b480      	push	{r7}
 800806c:	b083      	sub	sp, #12
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
 8008072:	460b      	mov	r3, r1
 8008074:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8008076:	887b      	ldrh	r3, [r7, #2]
 8008078:	011b      	lsls	r3, r3, #4
 800807a:	3308      	adds	r3, #8
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	4413      	add	r3, r2
    }
 8008080:	4618      	mov	r0, r3
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI19MainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	460b      	mov	r3, r1
 8008096:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8008098:	887b      	ldrh	r3, [r7, #2]
 800809a:	011b      	lsls	r3, r3, #4
 800809c:	3308      	adds	r3, #8
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	4413      	add	r3, r2
    }
 80080a2:	4618      	mov	r0, r3
 80080a4:	370c      	adds	r7, #12
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr

080080ae <_GLOBAL__sub_I_touchgfx_init>:
 80080ae:	b580      	push	{r7, lr}
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80080b6:	2001      	movs	r0, #1
 80080b8:	f7ff fefe 	bl	8007eb8 <_Z41__static_initialization_and_destruction_0ii>
 80080bc:	bd80      	pop	{r7, pc}

080080be <_GLOBAL__sub_D_touchgfx_init>:
 80080be:	b580      	push	{r7, lr}
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80080c6:	2000      	movs	r0, #0
 80080c8:	f7ff fef6 	bl	8007eb8 <_Z41__static_initialization_and_destruction_0ii>
 80080cc:	bd80      	pop	{r7, pc}
	...

080080d0 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    LOCATION_PRAGMA_NOLOAD("TouchGFX_Framebuffer")
    uint32_t frameBuf[(((128 + 7) / 8) * 64 + 3) / 4 * 2] LOCATION_ATTRIBUTE_NOLOAD("TouchGFX_Framebuffer");
}

void TouchGFXGeneratedHAL::initialize()
{
 80080d0:	b5b0      	push	{r4, r5, r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	4618      	mov	r0, r3
 80080dc:	f000 fbbf 	bl	800885e <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80080e0:	687d      	ldr	r5, [r7, #4]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	3364      	adds	r3, #100	; 0x64
 80080e8:	681c      	ldr	r4, [r3, #0]
 80080ea:	f003 fb1b 	bl	800b724 <_ZN8touchgfx11Application11getInstanceEv>
 80080ee:	4603      	mov	r3, r0
 80080f0:	4619      	mov	r1, r3
 80080f2:	4628      	mov	r0, r5
 80080f4:	47a0      	blx	r4
    enableLCDControllerInterrupt();
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	3380      	adds	r3, #128	; 0x80
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	4798      	blx	r3
    enableInterrupts();
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	3378      	adds	r3, #120	; 0x78
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	4798      	blx	r3
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	3388      	adds	r3, #136	; 0x88
 8008116:	681c      	ldr	r4, [r3, #0]
 8008118:	4a03      	ldr	r2, [pc, #12]	; (8008128 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x58>)
 800811a:	2300      	movs	r3, #0
 800811c:	4903      	ldr	r1, [pc, #12]	; (800812c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x5c>)
 800811e:	47a0      	blx	r4
}
 8008120:	bf00      	nop
 8008122:	3708      	adds	r7, #8
 8008124:	46bd      	mov	sp, r7
 8008126:	bdb0      	pop	{r4, r5, r7, pc}
 8008128:	20000488 	.word	0x20000488
 800812c:	20000088 	.word	0x20000088

08008130 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8008130:	b480      	push	{r7}
 8008132:	b083      	sub	sp, #12
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
}
 8008138:	bf00      	nop
 800813a:	370c      	adds	r7, #12
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr

08008144 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8008144:	b480      	push	{r7}
 8008146:	b083      	sub	sp, #12
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
}
 800814c:	bf00      	nop
 800814e:	370c      	adds	r7, #12
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8008158:	b480      	push	{r7}
 800815a:	b083      	sub	sp, #12
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
}
 8008160:	bf00      	nop
 8008162:	370c      	adds	r7, #12
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr

0800816c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 800816c:	b480      	push	{r7}
 800816e:	b083      	sub	sp, #12
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
}
 8008174:	bf00      	nop
 8008176:	370c      	adds	r7, #12
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr

08008180 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	4618      	mov	r0, r3
 800818c:	f000 fb4e 	bl	800882c <_ZN8touchgfx3HAL10beginFrameEv>
 8008190:	4603      	mov	r3, r0
}
 8008192:	4618      	mov	r0, r3
 8008194:	3708      	adds	r7, #8
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}

0800819a <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 800819a:	b580      	push	{r7, lr}
 800819c:	b082      	sub	sp, #8
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	4618      	mov	r0, r3
 80081a6:	f000 fb4d 	bl	8008844 <_ZN8touchgfx3HAL8endFrameEv>
    touchgfx::OSWrappers::signalRenderingDone();
 80081aa:	f7ff f929 	bl	8007400 <_ZN8touchgfx10OSWrappers19signalRenderingDoneEv>
}
 80081ae:	bf00      	nop
 80081b0:	3708      	adds	r7, #8
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
	...

080081b8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    fbPtr += rect.y * lcd().framebufferStride() + rect.x / 8;
    return fbPtr;
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 80081b8:	b480      	push	{r7}
 80081ba:	b083      	sub	sp, #12
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
    return (uint16_t*)frameBuf;
 80081c0:	4b03      	ldr	r3, [pc, #12]	; (80081d0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	370c      	adds	r7, #12
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr
 80081ce:	bf00      	nop
 80081d0:	20000088 	.word	0x20000088

080081d4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
    //setTFTFrameBuffer() not used for selected display interface
}
 80081de:	bf00      	nop
 80081e0:	370c      	adds	r7, #12
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr

080081ea <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80081ea:	b580      	push	{r7, lr}
 80081ec:	b082      	sub	sp, #8
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
 80081f2:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6839      	ldr	r1, [r7, #0]
 80081f8:	4618      	mov	r0, r3
 80081fa:	f000 fae1 	bl	80087c0 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 80081fe:	bf00      	nop
 8008200:	3708      	adds	r7, #8
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}

08008206 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8008206:	b580      	push	{r7, lr}
 8008208:	b084      	sub	sp, #16
 800820a:	af00      	add	r7, sp, #0
 800820c:	60f8      	str	r0, [r7, #12]
 800820e:	60b9      	str	r1, [r7, #8]
 8008210:	607a      	str	r2, [r7, #4]
 8008212:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8008214:	68f8      	ldr	r0, [r7, #12]
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	68b9      	ldr	r1, [r7, #8]
 800821c:	f000 fc3b 	bl	8008a96 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8008220:	4603      	mov	r3, r0
}
 8008222:	4618      	mov	r0, r3
 8008224:	3710      	adds	r7, #16
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}

0800822a <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800822a:	8880      	ldrh	r0, [r0, #4]
 800822c:	4770      	bx	lr

0800822e <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800822e:	b570      	push	{r4, r5, r6, lr}
 8008230:	6803      	ldr	r3, [r0, #0]
 8008232:	4605      	mov	r5, r0
 8008234:	460c      	mov	r4, r1
 8008236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008238:	2100      	movs	r1, #0
 800823a:	4798      	blx	r3
 800823c:	682b      	ldr	r3, [r5, #0]
 800823e:	4606      	mov	r6, r0
 8008240:	6a1b      	ldr	r3, [r3, #32]
 8008242:	4628      	mov	r0, r5
 8008244:	4798      	blx	r3
 8008246:	1ba4      	subs	r4, r4, r6
 8008248:	b2a4      	uxth	r4, r4
 800824a:	fbb4 f0f0 	udiv	r0, r4, r0
 800824e:	bd70      	pop	{r4, r5, r6, pc}

08008250 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8008250:	2300      	movs	r3, #0
 8008252:	8083      	strh	r3, [r0, #4]
 8008254:	4770      	bx	lr

08008256 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8008256:	b510      	push	{r4, lr}
 8008258:	6803      	ldr	r3, [r0, #0]
 800825a:	8881      	ldrh	r1, [r0, #4]
 800825c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825e:	4604      	mov	r4, r0
 8008260:	4798      	blx	r3
 8008262:	88a3      	ldrh	r3, [r4, #4]
 8008264:	3301      	adds	r3, #1
 8008266:	80a3      	strh	r3, [r4, #4]
 8008268:	bd10      	pop	{r4, pc}

0800826a <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800826a:	6803      	ldr	r3, [r0, #0]
 800826c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800826e:	4718      	bx	r3

08008270 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8008270:	4770      	bx	lr
	...

08008274 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8008274:	4a02      	ldr	r2, [pc, #8]	; (8008280 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8008276:	6002      	str	r2, [r0, #0]
 8008278:	2200      	movs	r2, #0
 800827a:	8082      	strh	r2, [r0, #4]
 800827c:	4770      	bx	lr
 800827e:	bf00      	nop
 8008280:	08012428 	.word	0x08012428

08008284 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8008284:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008286:	2000      	movs	r0, #0
 8008288:	b12b      	cbz	r3, 8008296 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800828a:	b920      	cbnz	r0, 8008296 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800828c:	1a5a      	subs	r2, r3, r1
 800828e:	4250      	negs	r0, r2
 8008290:	4150      	adcs	r0, r2
 8008292:	699b      	ldr	r3, [r3, #24]
 8008294:	e7f8      	b.n	8008288 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8008296:	4770      	bx	lr

08008298 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8008298:	2300      	movs	r3, #0
 800829a:	6148      	str	r0, [r1, #20]
 800829c:	618b      	str	r3, [r1, #24]
 800829e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80082a0:	b913      	cbnz	r3, 80082a8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 80082a2:	6281      	str	r1, [r0, #40]	; 0x28
 80082a4:	4770      	bx	lr
 80082a6:	4613      	mov	r3, r2
 80082a8:	699a      	ldr	r2, [r3, #24]
 80082aa:	2a00      	cmp	r2, #0
 80082ac:	d1fb      	bne.n	80082a6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 80082ae:	6199      	str	r1, [r3, #24]
 80082b0:	4770      	bx	lr

080082b2 <_ZN8touchgfx9Container9removeAllEv>:
 80082b2:	2200      	movs	r2, #0
 80082b4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80082b6:	b123      	cbz	r3, 80082c2 <_ZN8touchgfx9Container9removeAllEv+0x10>
 80082b8:	6999      	ldr	r1, [r3, #24]
 80082ba:	6281      	str	r1, [r0, #40]	; 0x28
 80082bc:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80082c0:	e7f8      	b.n	80082b4 <_ZN8touchgfx9Container9removeAllEv+0x2>
 80082c2:	4770      	bx	lr

080082c4 <_ZN8touchgfx9Container6unlinkEv>:
 80082c4:	2300      	movs	r3, #0
 80082c6:	6283      	str	r3, [r0, #40]	; 0x28
 80082c8:	4770      	bx	lr

080082ca <_ZNK8touchgfx9Container12getSolidRectEv>:
 80082ca:	2200      	movs	r2, #0
 80082cc:	8002      	strh	r2, [r0, #0]
 80082ce:	8042      	strh	r2, [r0, #2]
 80082d0:	8082      	strh	r2, [r0, #4]
 80082d2:	80c2      	strh	r2, [r0, #6]
 80082d4:	4770      	bx	lr

080082d6 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 80082d6:	b570      	push	{r4, r5, r6, lr}
 80082d8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80082da:	460d      	mov	r5, r1
 80082dc:	4616      	mov	r6, r2
 80082de:	b13c      	cbz	r4, 80082f0 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 80082e0:	6823      	ldr	r3, [r4, #0]
 80082e2:	4620      	mov	r0, r4
 80082e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082e6:	4632      	mov	r2, r6
 80082e8:	4629      	mov	r1, r5
 80082ea:	4798      	blx	r3
 80082ec:	69a4      	ldr	r4, [r4, #24]
 80082ee:	e7f6      	b.n	80082de <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 80082f0:	bd70      	pop	{r4, r5, r6, pc}

080082f2 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 80082f2:	b538      	push	{r3, r4, r5, lr}
 80082f4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80082f6:	460d      	mov	r5, r1
 80082f8:	b134      	cbz	r4, 8008308 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 80082fa:	682b      	ldr	r3, [r5, #0]
 80082fc:	4621      	mov	r1, r4
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	4628      	mov	r0, r5
 8008302:	4798      	blx	r3
 8008304:	69a4      	ldr	r4, [r4, #24]
 8008306:	e7f7      	b.n	80082f8 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8008308:	bd38      	pop	{r3, r4, r5, pc}

0800830a <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800830a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800830c:	b19b      	cbz	r3, 8008336 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800830e:	428b      	cmp	r3, r1
 8008310:	d109      	bne.n	8008326 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8008312:	699a      	ldr	r2, [r3, #24]
 8008314:	2100      	movs	r1, #0
 8008316:	6159      	str	r1, [r3, #20]
 8008318:	6282      	str	r2, [r0, #40]	; 0x28
 800831a:	b902      	cbnz	r2, 800831e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800831c:	4770      	bx	lr
 800831e:	6199      	str	r1, [r3, #24]
 8008320:	4770      	bx	lr
 8008322:	4613      	mov	r3, r2
 8008324:	b13a      	cbz	r2, 8008336 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8008326:	699a      	ldr	r2, [r3, #24]
 8008328:	428a      	cmp	r2, r1
 800832a:	d1fa      	bne.n	8008322 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800832c:	698a      	ldr	r2, [r1, #24]
 800832e:	619a      	str	r2, [r3, #24]
 8008330:	2300      	movs	r3, #0
 8008332:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8008336:	4770      	bx	lr

08008338 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8008338:	b410      	push	{r4}
 800833a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800833c:	4604      	mov	r4, r0
 800833e:	b92b      	cbnz	r3, 800834c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8008340:	6803      	ldr	r3, [r0, #0]
 8008342:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008348:	4611      	mov	r1, r2
 800834a:	4718      	bx	r3
 800834c:	b941      	cbnz	r1, 8008360 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800834e:	6193      	str	r3, [r2, #24]
 8008350:	6282      	str	r2, [r0, #40]	; 0x28
 8008352:	6154      	str	r4, [r2, #20]
 8008354:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008358:	4770      	bx	lr
 800835a:	4603      	mov	r3, r0
 800835c:	2800      	cmp	r0, #0
 800835e:	d0f9      	beq.n	8008354 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8008360:	4299      	cmp	r1, r3
 8008362:	6998      	ldr	r0, [r3, #24]
 8008364:	d1f9      	bne.n	800835a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8008366:	6190      	str	r0, [r2, #24]
 8008368:	618a      	str	r2, [r1, #24]
 800836a:	e7f2      	b.n	8008352 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0800836c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800836c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008370:	461f      	mov	r7, r3
 8008372:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8008376:	460d      	mov	r5, r1
 8008378:	4616      	mov	r6, r2
 800837a:	b103      	cbz	r3, 800837e <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800837c:	6038      	str	r0, [r7, #0]
 800837e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8008380:	b314      	cbz	r4, 80083c8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8008382:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8008386:	b1eb      	cbz	r3, 80083c4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8008388:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800838c:	428d      	cmp	r5, r1
 800838e:	db19      	blt.n	80083c4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8008390:	8923      	ldrh	r3, [r4, #8]
 8008392:	b289      	uxth	r1, r1
 8008394:	440b      	add	r3, r1
 8008396:	b21b      	sxth	r3, r3
 8008398:	429d      	cmp	r5, r3
 800839a:	da13      	bge.n	80083c4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800839c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80083a0:	4296      	cmp	r6, r2
 80083a2:	db0f      	blt.n	80083c4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80083a4:	8963      	ldrh	r3, [r4, #10]
 80083a6:	b292      	uxth	r2, r2
 80083a8:	4413      	add	r3, r2
 80083aa:	b21b      	sxth	r3, r3
 80083ac:	429e      	cmp	r6, r3
 80083ae:	da09      	bge.n	80083c4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80083b0:	6823      	ldr	r3, [r4, #0]
 80083b2:	1ab2      	subs	r2, r6, r2
 80083b4:	1a69      	subs	r1, r5, r1
 80083b6:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 80083ba:	b212      	sxth	r2, r2
 80083bc:	463b      	mov	r3, r7
 80083be:	b209      	sxth	r1, r1
 80083c0:	4620      	mov	r0, r4
 80083c2:	47c0      	blx	r8
 80083c4:	69a4      	ldr	r4, [r4, #24]
 80083c6:	e7db      	b.n	8008380 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 80083c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080083cc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 80083cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083d0:	4c6e      	ldr	r4, [pc, #440]	; (800858c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 80083d2:	b0a1      	sub	sp, #132	; 0x84
 80083d4:	6824      	ldr	r4, [r4, #0]
 80083d6:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 80083d8:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 80083dc:	9303      	str	r3, [sp, #12]
 80083de:	2400      	movs	r4, #0
 80083e0:	802c      	strh	r4, [r5, #0]
 80083e2:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 80083e4:	802c      	strh	r4, [r5, #0]
 80083e6:	601c      	str	r4, [r3, #0]
 80083e8:	4606      	mov	r6, r0
 80083ea:	e9cd 1201 	strd	r1, r2, [sp, #4]
 80083ee:	f7ff ffbd 	bl	800836c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80083f2:	f1b9 0f03 	cmp.w	r9, #3
 80083f6:	f340 80c2 	ble.w	800857e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 80083fa:	4631      	mov	r1, r6
 80083fc:	a80c      	add	r0, sp, #48	; 0x30
 80083fe:	f004 fa71 	bl	800c8e4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8008402:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8008406:	9306      	str	r3, [sp, #24]
 8008408:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 800840c:	9307      	str	r3, [sp, #28]
 800840e:	9b03      	ldr	r3, [sp, #12]
 8008410:	f8d3 a000 	ldr.w	sl, [r3]
 8008414:	f1ba 0f00 	cmp.w	sl, #0
 8008418:	f000 80b4 	beq.w	8008584 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>
 800841c:	4651      	mov	r1, sl
 800841e:	a810      	add	r0, sp, #64	; 0x40
 8008420:	f004 fa60 	bl	800c8e4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8008424:	9b01      	ldr	r3, [sp, #4]
 8008426:	9a06      	ldr	r2, [sp, #24]
 8008428:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 800842c:	189d      	adds	r5, r3, r2
 800842e:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8008432:	9a07      	ldr	r2, [sp, #28]
 8008434:	2002      	movs	r0, #2
 8008436:	fb91 f1f0 	sdiv	r1, r1, r0
 800843a:	4419      	add	r1, r3
 800843c:	1a6d      	subs	r5, r5, r1
 800843e:	9b02      	ldr	r3, [sp, #8]
 8008440:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8008444:	4413      	add	r3, r2
 8008446:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 800844a:	fb92 f2f0 	sdiv	r2, r2, r0
 800844e:	440a      	add	r2, r1
 8008450:	1a9b      	subs	r3, r3, r2
 8008452:	435b      	muls	r3, r3
 8008454:	fb05 3505 	mla	r5, r5, r5, r3
 8008458:	4f4d      	ldr	r7, [pc, #308]	; (8008590 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c4>)
 800845a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800845c:	ac10      	add	r4, sp, #64	; 0x40
 800845e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008460:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8008462:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008464:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8008466:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008468:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800846c:	f1b9 0f0c 	cmp.w	r9, #12
 8008470:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008474:	f04f 0303 	mov.w	r3, #3
 8008478:	bfc8      	it	gt
 800847a:	4698      	movgt	r8, r3
 800847c:	f8cd 9000 	str.w	r9, [sp]
 8008480:	f04f 0400 	mov.w	r4, #0
 8008484:	bfdc      	itt	le
 8008486:	f109 32ff 	addle.w	r2, r9, #4294967295
 800848a:	fb92 f8f3 	sdivle	r8, r2, r3
 800848e:	1c63      	adds	r3, r4, #1
 8008490:	aa10      	add	r2, sp, #64	; 0x40
 8008492:	f004 0401 	and.w	r4, r4, #1
 8008496:	9308      	str	r3, [sp, #32]
 8008498:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800849c:	9b00      	ldr	r3, [sp, #0]
 800849e:	fb93 f3f8 	sdiv	r3, r3, r8
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	3404      	adds	r4, #4
 80084a6:	f04f 0b00 	mov.w	fp, #0
 80084aa:	9304      	str	r3, [sp, #16]
 80084ac:	9a04      	ldr	r2, [sp, #16]
 80084ae:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80084b2:	fb13 f302 	smulbb	r3, r3, r2
 80084b6:	9a01      	ldr	r2, [sp, #4]
 80084b8:	b29b      	uxth	r3, r3
 80084ba:	1899      	adds	r1, r3, r2
 80084bc:	9305      	str	r3, [sp, #20]
 80084be:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80084c2:	b209      	sxth	r1, r1
 80084c4:	4299      	cmp	r1, r3
 80084c6:	db4d      	blt.n	8008564 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80084c8:	8932      	ldrh	r2, [r6, #8]
 80084ca:	4413      	add	r3, r2
 80084cc:	b21b      	sxth	r3, r3
 80084ce:	4299      	cmp	r1, r3
 80084d0:	da48      	bge.n	8008564 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80084d2:	9b04      	ldr	r3, [sp, #16]
 80084d4:	6827      	ldr	r7, [r4, #0]
 80084d6:	fb17 f703 	smulbb	r7, r7, r3
 80084da:	9b02      	ldr	r3, [sp, #8]
 80084dc:	b2bf      	uxth	r7, r7
 80084de:	18fa      	adds	r2, r7, r3
 80084e0:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80084e4:	b212      	sxth	r2, r2
 80084e6:	429a      	cmp	r2, r3
 80084e8:	db3c      	blt.n	8008564 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80084ea:	8970      	ldrh	r0, [r6, #10]
 80084ec:	4403      	add	r3, r0
 80084ee:	b21b      	sxth	r3, r3
 80084f0:	429a      	cmp	r2, r3
 80084f2:	da37      	bge.n	8008564 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80084f4:	2300      	movs	r3, #0
 80084f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80084f8:	4630      	mov	r0, r6
 80084fa:	ab0b      	add	r3, sp, #44	; 0x2c
 80084fc:	f7ff ff36 	bl	800836c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8008500:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008502:	b37a      	cbz	r2, 8008564 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8008504:	4552      	cmp	r2, sl
 8008506:	d02d      	beq.n	8008564 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8008508:	4611      	mov	r1, r2
 800850a:	a80e      	add	r0, sp, #56	; 0x38
 800850c:	9209      	str	r2, [sp, #36]	; 0x24
 800850e:	f004 f9e9 	bl	800c8e4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8008512:	9a06      	ldr	r2, [sp, #24]
 8008514:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8008518:	9b01      	ldr	r3, [sp, #4]
 800851a:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 800851e:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 8008522:	4413      	add	r3, r2
 8008524:	f04f 0e02 	mov.w	lr, #2
 8008528:	fb91 f1fe 	sdiv	r1, r1, lr
 800852c:	4401      	add	r1, r0
 800852e:	1a58      	subs	r0, r3, r1
 8008530:	9a07      	ldr	r2, [sp, #28]
 8008532:	9b02      	ldr	r3, [sp, #8]
 8008534:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8008538:	fb9c fcfe 	sdiv	ip, ip, lr
 800853c:	4413      	add	r3, r2
 800853e:	448c      	add	ip, r1
 8008540:	eba3 030c 	sub.w	r3, r3, ip
 8008544:	435b      	muls	r3, r3
 8008546:	fb00 3300 	mla	r3, r0, r0, r3
 800854a:	42ab      	cmp	r3, r5
 800854c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800854e:	d208      	bcs.n	8008562 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8008550:	9803      	ldr	r0, [sp, #12]
 8008552:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008554:	6001      	str	r1, [r0, #0]
 8008556:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8008558:	9805      	ldr	r0, [sp, #20]
 800855a:	8008      	strh	r0, [r1, #0]
 800855c:	992b      	ldr	r1, [sp, #172]	; 0xac
 800855e:	461d      	mov	r5, r3
 8008560:	800f      	strh	r7, [r1, #0]
 8008562:	4692      	mov	sl, r2
 8008564:	f10b 0b01 	add.w	fp, fp, #1
 8008568:	f1bb 0f04 	cmp.w	fp, #4
 800856c:	f104 0408 	add.w	r4, r4, #8
 8008570:	d19c      	bne.n	80084ac <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8008572:	9b00      	ldr	r3, [sp, #0]
 8008574:	9c08      	ldr	r4, [sp, #32]
 8008576:	444b      	add	r3, r9
 8008578:	4544      	cmp	r4, r8
 800857a:	9300      	str	r3, [sp, #0]
 800857c:	d187      	bne.n	800848e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800857e:	b021      	add	sp, #132	; 0x84
 8008580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008584:	f04f 35ff 	mov.w	r5, #4294967295
 8008588:	e766      	b.n	8008458 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800858a:	bf00      	nop
 800858c:	200012d4 	.word	0x200012d4
 8008590:	080113f0 	.word	0x080113f0

08008594 <_ZN8touchgfx4RectaNERKS0_>:
 8008594:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008598:	f9b1 7000 	ldrsh.w	r7, [r1]
 800859c:	888c      	ldrh	r4, [r1, #4]
 800859e:	f9b0 9000 	ldrsh.w	r9, [r0]
 80085a2:	443c      	add	r4, r7
 80085a4:	b2a4      	uxth	r4, r4
 80085a6:	fa0f f884 	sxth.w	r8, r4
 80085aa:	45c1      	cmp	r9, r8
 80085ac:	da2f      	bge.n	800860e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80085ae:	8882      	ldrh	r2, [r0, #4]
 80085b0:	444a      	add	r2, r9
 80085b2:	b292      	uxth	r2, r2
 80085b4:	fa0f fe82 	sxth.w	lr, r2
 80085b8:	4577      	cmp	r7, lr
 80085ba:	da28      	bge.n	800860e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80085bc:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80085c0:	88cb      	ldrh	r3, [r1, #6]
 80085c2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80085c6:	442b      	add	r3, r5
 80085c8:	b21b      	sxth	r3, r3
 80085ca:	429e      	cmp	r6, r3
 80085cc:	da1f      	bge.n	800860e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80085ce:	88c3      	ldrh	r3, [r0, #6]
 80085d0:	4433      	add	r3, r6
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	fa0f fc83 	sxth.w	ip, r3
 80085d8:	4565      	cmp	r5, ip
 80085da:	da18      	bge.n	800860e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80085dc:	454f      	cmp	r7, r9
 80085de:	bfb8      	it	lt
 80085e0:	464f      	movlt	r7, r9
 80085e2:	42b5      	cmp	r5, r6
 80085e4:	bfb8      	it	lt
 80085e6:	4635      	movlt	r5, r6
 80085e8:	45f0      	cmp	r8, lr
 80085ea:	bfd8      	it	le
 80085ec:	4622      	movle	r2, r4
 80085ee:	1bd2      	subs	r2, r2, r7
 80085f0:	8082      	strh	r2, [r0, #4]
 80085f2:	884a      	ldrh	r2, [r1, #2]
 80085f4:	88c9      	ldrh	r1, [r1, #6]
 80085f6:	8007      	strh	r7, [r0, #0]
 80085f8:	440a      	add	r2, r1
 80085fa:	b292      	uxth	r2, r2
 80085fc:	b211      	sxth	r1, r2
 80085fe:	458c      	cmp	ip, r1
 8008600:	bfa8      	it	ge
 8008602:	4613      	movge	r3, r2
 8008604:	1b5b      	subs	r3, r3, r5
 8008606:	80c3      	strh	r3, [r0, #6]
 8008608:	8045      	strh	r5, [r0, #2]
 800860a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800860e:	2300      	movs	r3, #0
 8008610:	8003      	strh	r3, [r0, #0]
 8008612:	8043      	strh	r3, [r0, #2]
 8008614:	8083      	strh	r3, [r0, #4]
 8008616:	80c3      	strh	r3, [r0, #6]
 8008618:	e7f7      	b.n	800860a <_ZN8touchgfx4RectaNERKS0_+0x76>

0800861a <_ZNK8touchgfx4Rect7isEmptyEv>:
 800861a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800861e:	2b00      	cmp	r3, #0
 8008620:	dd06      	ble.n	8008630 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8008622:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8008626:	2800      	cmp	r0, #0
 8008628:	bfcc      	ite	gt
 800862a:	2000      	movgt	r0, #0
 800862c:	2001      	movle	r0, #1
 800862e:	4770      	bx	lr
 8008630:	2001      	movs	r0, #1
 8008632:	4770      	bx	lr

08008634 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8008634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008638:	2300      	movs	r3, #0
 800863a:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800863c:	8003      	strh	r3, [r0, #0]
 800863e:	4604      	mov	r4, r0
 8008640:	8043      	strh	r3, [r0, #2]
 8008642:	8083      	strh	r3, [r0, #4]
 8008644:	80c3      	strh	r3, [r0, #6]
 8008646:	2d00      	cmp	r5, #0
 8008648:	d040      	beq.n	80086cc <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800864a:	1d28      	adds	r0, r5, #4
 800864c:	f7ff ffe5 	bl	800861a <_ZNK8touchgfx4Rect7isEmptyEv>
 8008650:	b988      	cbnz	r0, 8008676 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8008652:	4620      	mov	r0, r4
 8008654:	f7ff ffe1 	bl	800861a <_ZNK8touchgfx4Rect7isEmptyEv>
 8008658:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800865c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8008660:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8008664:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8008668:	b138      	cbz	r0, 800867a <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800866a:	8022      	strh	r2, [r4, #0]
 800866c:	8063      	strh	r3, [r4, #2]
 800866e:	f8a4 e004 	strh.w	lr, [r4, #4]
 8008672:	f8a4 c006 	strh.w	ip, [r4, #6]
 8008676:	69ad      	ldr	r5, [r5, #24]
 8008678:	e7e5      	b.n	8008646 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800867a:	f9b4 0000 	ldrsh.w	r0, [r4]
 800867e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8008682:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8008686:	4290      	cmp	r0, r2
 8008688:	4607      	mov	r7, r0
 800868a:	bfa8      	it	ge
 800868c:	4617      	movge	r7, r2
 800868e:	4472      	add	r2, lr
 8008690:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8008694:	8027      	strh	r7, [r4, #0]
 8008696:	4299      	cmp	r1, r3
 8008698:	460e      	mov	r6, r1
 800869a:	4440      	add	r0, r8
 800869c:	bfa8      	it	ge
 800869e:	461e      	movge	r6, r3
 80086a0:	4471      	add	r1, lr
 80086a2:	4463      	add	r3, ip
 80086a4:	b200      	sxth	r0, r0
 80086a6:	b212      	sxth	r2, r2
 80086a8:	b209      	sxth	r1, r1
 80086aa:	b21b      	sxth	r3, r3
 80086ac:	4290      	cmp	r0, r2
 80086ae:	bfac      	ite	ge
 80086b0:	ebc7 0200 	rsbge	r2, r7, r0
 80086b4:	ebc7 0202 	rsblt	r2, r7, r2
 80086b8:	4299      	cmp	r1, r3
 80086ba:	bfac      	ite	ge
 80086bc:	ebc6 0301 	rsbge	r3, r6, r1
 80086c0:	ebc6 0303 	rsblt	r3, r6, r3
 80086c4:	8066      	strh	r6, [r4, #2]
 80086c6:	80a2      	strh	r2, [r4, #4]
 80086c8:	80e3      	strh	r3, [r4, #6]
 80086ca:	e7d4      	b.n	8008676 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80086cc:	4620      	mov	r0, r4
 80086ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080086d2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80086d2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80086d6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80086da:	b383      	cbz	r3, 800873e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80086dc:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80086de:	b374      	cbz	r4, 800873e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80086e0:	f9b1 5000 	ldrsh.w	r5, [r1]
 80086e4:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 80086e8:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80086ec:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 80086f0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80086f4:	b303      	cbz	r3, 8008738 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80086f6:	4668      	mov	r0, sp
 80086f8:	1d21      	adds	r1, r4, #4
 80086fa:	f8ad 5000 	strh.w	r5, [sp]
 80086fe:	f8ad 6002 	strh.w	r6, [sp, #2]
 8008702:	f8ad 7004 	strh.w	r7, [sp, #4]
 8008706:	f8ad 8006 	strh.w	r8, [sp, #6]
 800870a:	f7ff ff43 	bl	8008594 <_ZN8touchgfx4RectaNERKS0_>
 800870e:	4668      	mov	r0, sp
 8008710:	f7ff ff83 	bl	800861a <_ZNK8touchgfx4Rect7isEmptyEv>
 8008714:	b980      	cbnz	r0, 8008738 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8008716:	f8bd 3000 	ldrh.w	r3, [sp]
 800871a:	88a2      	ldrh	r2, [r4, #4]
 800871c:	1a9b      	subs	r3, r3, r2
 800871e:	f8ad 3000 	strh.w	r3, [sp]
 8008722:	88e2      	ldrh	r2, [r4, #6]
 8008724:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8008728:	1a9b      	subs	r3, r3, r2
 800872a:	f8ad 3002 	strh.w	r3, [sp, #2]
 800872e:	6823      	ldr	r3, [r4, #0]
 8008730:	4669      	mov	r1, sp
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	4620      	mov	r0, r4
 8008736:	4798      	blx	r3
 8008738:	69a4      	ldr	r4, [r4, #24]
 800873a:	2c00      	cmp	r4, #0
 800873c:	d1d8      	bne.n	80086f0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800873e:	b002      	add	sp, #8
 8008740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008744 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8008744:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008746:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800874a:	460d      	mov	r5, r1
 800874c:	4616      	mov	r6, r2
 800874e:	b323      	cbz	r3, 800879a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8008750:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8008752:	b314      	cbz	r4, 800879a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8008754:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8008758:	b1eb      	cbz	r3, 8008796 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800875a:	6828      	ldr	r0, [r5, #0]
 800875c:	6869      	ldr	r1, [r5, #4]
 800875e:	466b      	mov	r3, sp
 8008760:	c303      	stmia	r3!, {r0, r1}
 8008762:	4668      	mov	r0, sp
 8008764:	1d21      	adds	r1, r4, #4
 8008766:	f7ff ff15 	bl	8008594 <_ZN8touchgfx4RectaNERKS0_>
 800876a:	4668      	mov	r0, sp
 800876c:	f7ff ff55 	bl	800861a <_ZNK8touchgfx4Rect7isEmptyEv>
 8008770:	b988      	cbnz	r0, 8008796 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8008772:	f8bd 3000 	ldrh.w	r3, [sp]
 8008776:	88a2      	ldrh	r2, [r4, #4]
 8008778:	1a9b      	subs	r3, r3, r2
 800877a:	f8ad 3000 	strh.w	r3, [sp]
 800877e:	88e2      	ldrh	r2, [r4, #6]
 8008780:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8008784:	1a9b      	subs	r3, r3, r2
 8008786:	f8ad 3002 	strh.w	r3, [sp, #2]
 800878a:	6823      	ldr	r3, [r4, #0]
 800878c:	4632      	mov	r2, r6
 800878e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008790:	4669      	mov	r1, sp
 8008792:	4620      	mov	r0, r4
 8008794:	4798      	blx	r3
 8008796:	69a4      	ldr	r4, [r4, #24]
 8008798:	e7db      	b.n	8008752 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800879a:	b002      	add	sp, #8
 800879c:	bd70      	pop	{r4, r5, r6, pc}

0800879e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800879e:	b513      	push	{r0, r1, r4, lr}
 80087a0:	6803      	ldr	r3, [r0, #0]
 80087a2:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 80087a6:	2300      	movs	r3, #0
 80087a8:	e9cd 3300 	strd	r3, r3, [sp]
 80087ac:	466b      	mov	r3, sp
 80087ae:	47a0      	blx	r4
 80087b0:	b002      	add	sp, #8
 80087b2:	bd10      	pop	{r4, pc}

080087b4 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80087b4:	2301      	movs	r3, #1
 80087b6:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80087ba:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80087be:	4770      	bx	lr

080087c0 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80087c0:	2301      	movs	r3, #1
 80087c2:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80087c6:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80087ca:	4770      	bx	lr

080087cc <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80087cc:	6843      	ldr	r3, [r0, #4]
 80087ce:	2201      	movs	r2, #1
 80087d0:	725a      	strb	r2, [r3, #9]
 80087d2:	6840      	ldr	r0, [r0, #4]
 80087d4:	6803      	ldr	r3, [r0, #0]
 80087d6:	691b      	ldr	r3, [r3, #16]
 80087d8:	4718      	bx	r3

080087da <_ZN8touchgfx3HAL8flushDMAEv>:
 80087da:	6840      	ldr	r0, [r0, #4]
 80087dc:	6803      	ldr	r3, [r0, #0]
 80087de:	689b      	ldr	r3, [r3, #8]
 80087e0:	4718      	bx	r3

080087e2 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 80087e2:	b530      	push	{r4, r5, lr}
 80087e4:	b08b      	sub	sp, #44	; 0x2c
 80087e6:	6804      	ldr	r4, [r0, #0]
 80087e8:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 80087ec:	9509      	str	r5, [sp, #36]	; 0x24
 80087ee:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 80087f2:	9508      	str	r5, [sp, #32]
 80087f4:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 80087f8:	9507      	str	r5, [sp, #28]
 80087fa:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 80087fe:	9506      	str	r5, [sp, #24]
 8008800:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8008804:	9505      	str	r5, [sp, #20]
 8008806:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 800880a:	9504      	str	r5, [sp, #16]
 800880c:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8008810:	9503      	str	r5, [sp, #12]
 8008812:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8008816:	9502      	str	r5, [sp, #8]
 8008818:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 800881c:	e9cd 3500 	strd	r3, r5, [sp]
 8008820:	4613      	mov	r3, r2
 8008822:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8008824:	2200      	movs	r2, #0
 8008826:	47a0      	blx	r4
 8008828:	b00b      	add	sp, #44	; 0x2c
 800882a:	bd30      	pop	{r4, r5, pc}

0800882c <_ZN8touchgfx3HAL10beginFrameEv>:
 800882c:	4b04      	ldr	r3, [pc, #16]	; (8008840 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	b123      	cbz	r3, 800883c <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8008832:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8008836:	f080 0001 	eor.w	r0, r0, #1
 800883a:	4770      	bx	lr
 800883c:	2001      	movs	r0, #1
 800883e:	4770      	bx	lr
 8008840:	200012d2 	.word	0x200012d2

08008844 <_ZN8touchgfx3HAL8endFrameEv>:
 8008844:	b510      	push	{r4, lr}
 8008846:	4604      	mov	r4, r0
 8008848:	6840      	ldr	r0, [r0, #4]
 800884a:	6803      	ldr	r3, [r0, #0]
 800884c:	689b      	ldr	r3, [r3, #8]
 800884e:	4798      	blx	r3
 8008850:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8008854:	b113      	cbz	r3, 800885c <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8008856:	2301      	movs	r3, #1
 8008858:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800885c:	bd10      	pop	{r4, pc}

0800885e <_ZN8touchgfx3HAL10initializeEv>:
 800885e:	b510      	push	{r4, lr}
 8008860:	4604      	mov	r4, r0
 8008862:	f7fe fd75 	bl	8007350 <_ZN8touchgfx10OSWrappers10initializeEv>
 8008866:	f7fe fa69 	bl	8006d3c <_ZN8touchgfx4GPIO4initEv>
 800886a:	6860      	ldr	r0, [r4, #4]
 800886c:	6803      	ldr	r3, [r0, #0]
 800886e:	68db      	ldr	r3, [r3, #12]
 8008870:	4798      	blx	r3
 8008872:	68e0      	ldr	r0, [r4, #12]
 8008874:	6803      	ldr	r3, [r0, #0]
 8008876:	689b      	ldr	r3, [r3, #8]
 8008878:	4798      	blx	r3
 800887a:	6823      	ldr	r3, [r4, #0]
 800887c:	4620      	mov	r0, r4
 800887e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008884:	4718      	bx	r3

08008886 <_ZN8touchgfx3HAL9taskEntryEv>:
 8008886:	b508      	push	{r3, lr}
 8008888:	6803      	ldr	r3, [r0, #0]
 800888a:	4604      	mov	r4, r0
 800888c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008890:	4798      	blx	r3
 8008892:	6823      	ldr	r3, [r4, #0]
 8008894:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008896:	4620      	mov	r0, r4
 8008898:	4798      	blx	r3
 800889a:	f7fe fdcd 	bl	8007438 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 800889e:	6823      	ldr	r3, [r4, #0]
 80088a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088a2:	e7f8      	b.n	8008896 <_ZN8touchgfx3HAL9taskEntryEv+0x10>

080088a4 <_ZN8touchgfx3HAL4tickEv>:
 80088a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80088a6:	6803      	ldr	r3, [r0, #0]
 80088a8:	4d5b      	ldr	r5, [pc, #364]	; (8008a18 <_ZN8touchgfx3HAL4tickEv+0x174>)
 80088aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80088ae:	4604      	mov	r4, r0
 80088b0:	4798      	blx	r3
 80088b2:	2800      	cmp	r0, #0
 80088b4:	f000 8095 	beq.w	80089e2 <_ZN8touchgfx3HAL4tickEv+0x13e>
 80088b8:	2001      	movs	r0, #1
 80088ba:	f7fe fa47 	bl	8006d4c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80088be:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 80088c2:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80088c6:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 80088ca:	2600      	movs	r6, #0
 80088cc:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 80088d0:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 80088d4:	b133      	cbz	r3, 80088e4 <_ZN8touchgfx3HAL4tickEv+0x40>
 80088d6:	6823      	ldr	r3, [r4, #0]
 80088d8:	4620      	mov	r0, r4
 80088da:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80088de:	4798      	blx	r3
 80088e0:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 80088e4:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 80088e8:	6862      	ldr	r2, [r4, #4]
 80088ea:	f083 0301 	eor.w	r3, r3, #1
 80088ee:	7253      	strb	r3, [r2, #9]
 80088f0:	2601      	movs	r6, #1
 80088f2:	702e      	strb	r6, [r5, #0]
 80088f4:	f002 ff16 	bl	800b724 <_ZN8touchgfx11Application11getInstanceEv>
 80088f8:	6803      	ldr	r3, [r0, #0]
 80088fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088fc:	4798      	blx	r3
 80088fe:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8008902:	b90b      	cbnz	r3, 8008908 <_ZN8touchgfx3HAL4tickEv+0x64>
 8008904:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8008908:	f002 ff0c 	bl	800b724 <_ZN8touchgfx11Application11getInstanceEv>
 800890c:	6803      	ldr	r3, [r0, #0]
 800890e:	695b      	ldr	r3, [r3, #20]
 8008910:	4798      	blx	r3
 8008912:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008914:	6803      	ldr	r3, [r0, #0]
 8008916:	691b      	ldr	r3, [r3, #16]
 8008918:	4798      	blx	r3
 800891a:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800891e:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8008922:	3b01      	subs	r3, #1
 8008924:	b2db      	uxtb	r3, r3
 8008926:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800892a:	b10a      	cbz	r2, 8008930 <_ZN8touchgfx3HAL4tickEv+0x8c>
 800892c:	2b00      	cmp	r3, #0
 800892e:	d1eb      	bne.n	8008908 <_ZN8touchgfx3HAL4tickEv+0x64>
 8008930:	4a3a      	ldr	r2, [pc, #232]	; (8008a1c <_ZN8touchgfx3HAL4tickEv+0x178>)
 8008932:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8008936:	7813      	ldrb	r3, [r2, #0]
 8008938:	3301      	adds	r3, #1
 800893a:	b25b      	sxtb	r3, r3
 800893c:	4299      	cmp	r1, r3
 800893e:	7013      	strb	r3, [r2, #0]
 8008940:	dc10      	bgt.n	8008964 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8008942:	68e0      	ldr	r0, [r4, #12]
 8008944:	2300      	movs	r3, #0
 8008946:	7013      	strb	r3, [r2, #0]
 8008948:	6803      	ldr	r3, [r0, #0]
 800894a:	aa03      	add	r2, sp, #12
 800894c:	68db      	ldr	r3, [r3, #12]
 800894e:	a902      	add	r1, sp, #8
 8008950:	4798      	blx	r3
 8008952:	6823      	ldr	r3, [r4, #0]
 8008954:	2800      	cmp	r0, #0
 8008956:	d050      	beq.n	80089fa <_ZN8touchgfx3HAL4tickEv+0x156>
 8008958:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800895c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8008960:	4620      	mov	r0, r4
 8008962:	4798      	blx	r3
 8008964:	6960      	ldr	r0, [r4, #20]
 8008966:	2300      	movs	r3, #0
 8008968:	f88d 3007 	strb.w	r3, [sp, #7]
 800896c:	b158      	cbz	r0, 8008986 <_ZN8touchgfx3HAL4tickEv+0xe2>
 800896e:	6803      	ldr	r3, [r0, #0]
 8008970:	f10d 0107 	add.w	r1, sp, #7
 8008974:	68db      	ldr	r3, [r3, #12]
 8008976:	4798      	blx	r3
 8008978:	b128      	cbz	r0, 8008986 <_ZN8touchgfx3HAL4tickEv+0xe2>
 800897a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800897c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8008980:	6803      	ldr	r3, [r0, #0]
 8008982:	68db      	ldr	r3, [r3, #12]
 8008984:	4798      	blx	r3
 8008986:	f104 001c 	add.w	r0, r4, #28
 800898a:	f006 fed3 	bl	800f734 <_ZN8touchgfx8Gestures4tickEv>
 800898e:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8008992:	b30b      	cbz	r3, 80089d8 <_ZN8touchgfx3HAL4tickEv+0x134>
 8008994:	6920      	ldr	r0, [r4, #16]
 8008996:	6803      	ldr	r3, [r0, #0]
 8008998:	691b      	ldr	r3, [r3, #16]
 800899a:	4798      	blx	r3
 800899c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800899e:	4606      	mov	r6, r0
 80089a0:	b903      	cbnz	r3, 80089a4 <_ZN8touchgfx3HAL4tickEv+0x100>
 80089a2:	6720      	str	r0, [r4, #112]	; 0x70
 80089a4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80089a6:	4a1e      	ldr	r2, [pc, #120]	; (8008a20 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80089a8:	1af3      	subs	r3, r6, r3
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d914      	bls.n	80089d8 <_ZN8touchgfx3HAL4tickEv+0x134>
 80089ae:	6920      	ldr	r0, [r4, #16]
 80089b0:	6803      	ldr	r3, [r0, #0]
 80089b2:	699b      	ldr	r3, [r3, #24]
 80089b4:	4798      	blx	r3
 80089b6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80089b8:	2264      	movs	r2, #100	; 0x64
 80089ba:	1af3      	subs	r3, r6, r3
 80089bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80089c0:	fbb0 f0f3 	udiv	r0, r0, r3
 80089c4:	2800      	cmp	r0, #0
 80089c6:	dc1d      	bgt.n	8008a04 <_ZN8touchgfx3HAL4tickEv+0x160>
 80089c8:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 80089cc:	6920      	ldr	r0, [r4, #16]
 80089ce:	6803      	ldr	r3, [r0, #0]
 80089d0:	2100      	movs	r1, #0
 80089d2:	69db      	ldr	r3, [r3, #28]
 80089d4:	4798      	blx	r3
 80089d6:	6726      	str	r6, [r4, #112]	; 0x70
 80089d8:	f002 fea4 	bl	800b724 <_ZN8touchgfx11Application11getInstanceEv>
 80089dc:	6803      	ldr	r3, [r0, #0]
 80089de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e0:	4798      	blx	r3
 80089e2:	6823      	ldr	r3, [r4, #0]
 80089e4:	4620      	mov	r0, r4
 80089e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80089ea:	4798      	blx	r3
 80089ec:	2001      	movs	r0, #1
 80089ee:	f7fe f9c9 	bl	8006d84 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80089f2:	2300      	movs	r3, #0
 80089f4:	702b      	strb	r3, [r5, #0]
 80089f6:	b004      	add	sp, #16
 80089f8:	bd70      	pop	{r4, r5, r6, pc}
 80089fa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80089fe:	4620      	mov	r0, r4
 8008a00:	4798      	blx	r3
 8008a02:	e7af      	b.n	8008964 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8008a04:	2863      	cmp	r0, #99	; 0x63
 8008a06:	bfcb      	itete	gt
 8008a08:	2300      	movgt	r3, #0
 8008a0a:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8008a0e:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8008a12:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8008a16:	e7d9      	b.n	80089cc <_ZN8touchgfx3HAL4tickEv+0x128>
 8008a18:	200012d8 	.word	0x200012d8
 8008a1c:	200012d9 	.word	0x200012d9
 8008a20:	05f5e100 	.word	0x05f5e100

08008a24 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8008a24:	f7fe bcbc 	b.w	80073a0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08008a28 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8008a28:	6581      	str	r1, [r0, #88]	; 0x58
 8008a2a:	301c      	adds	r0, #28
 8008a2c:	f006 be80 	b.w	800f730 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08008a30 <_ZN8touchgfx3HAL5touchEll>:
 8008a30:	b530      	push	{r4, r5, lr}
 8008a32:	b087      	sub	sp, #28
 8008a34:	4604      	mov	r4, r0
 8008a36:	a804      	add	r0, sp, #16
 8008a38:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8008a3c:	f002 fc7c 	bl	800b338 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8008a40:	9b04      	ldr	r3, [sp, #16]
 8008a42:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008a46:	a906      	add	r1, sp, #24
 8008a48:	9b05      	ldr	r3, [sp, #20]
 8008a4a:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8008a4e:	a803      	add	r0, sp, #12
 8008a50:	f002 fcc4 	bl	800b3dc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8008a54:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8008a58:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8008a5c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8008a60:	f104 001c 	add.w	r0, r4, #28
 8008a64:	b189      	cbz	r1, 8008a8a <_ZN8touchgfx3HAL5touchEll+0x5a>
 8008a66:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8008a6a:	9300      	str	r3, [sp, #0]
 8008a6c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8008a70:	4613      	mov	r3, r2
 8008a72:	462a      	mov	r2, r5
 8008a74:	f006 fe6c 	bl	800f750 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8008a78:	b128      	cbz	r0, 8008a86 <_ZN8touchgfx3HAL5touchEll+0x56>
 8008a7a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8008a7e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8008a80:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8008a84:	6623      	str	r3, [r4, #96]	; 0x60
 8008a86:	b007      	add	sp, #28
 8008a88:	bd30      	pop	{r4, r5, pc}
 8008a8a:	f006 fea1 	bl	800f7d0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8008a8e:	2301      	movs	r3, #1
 8008a90:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8008a94:	e7f1      	b.n	8008a7a <_ZN8touchgfx3HAL5touchEll+0x4a>

08008a96 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8008a96:	b510      	push	{r4, lr}
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d046      	beq.n	8008b2a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8008a9c:	ea81 0002 	eor.w	r0, r1, r2
 8008aa0:	07c4      	lsls	r4, r0, #31
 8008aa2:	d508      	bpl.n	8008ab6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8008aa4:	440b      	add	r3, r1
 8008aa6:	3a01      	subs	r2, #1
 8008aa8:	428b      	cmp	r3, r1
 8008aaa:	d93e      	bls.n	8008b2a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8008aac:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8008ab0:	f801 0b01 	strb.w	r0, [r1], #1
 8008ab4:	e7f8      	b.n	8008aa8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8008ab6:	07d0      	lsls	r0, r2, #31
 8008ab8:	bf42      	ittt	mi
 8008aba:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8008abe:	f801 0b01 	strbmi.w	r0, [r1], #1
 8008ac2:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d911      	bls.n	8008aee <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8008aca:	ea81 0402 	eor.w	r4, r1, r2
 8008ace:	07a4      	lsls	r4, r4, #30
 8008ad0:	4610      	mov	r0, r2
 8008ad2:	d022      	beq.n	8008b1a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8008ad4:	f023 0401 	bic.w	r4, r3, #1
 8008ad8:	440c      	add	r4, r1
 8008ada:	428c      	cmp	r4, r1
 8008adc:	4602      	mov	r2, r0
 8008ade:	d904      	bls.n	8008aea <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8008ae0:	8812      	ldrh	r2, [r2, #0]
 8008ae2:	f821 2b02 	strh.w	r2, [r1], #2
 8008ae6:	3002      	adds	r0, #2
 8008ae8:	e7f7      	b.n	8008ada <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8008aea:	f003 0301 	and.w	r3, r3, #1
 8008aee:	f023 0003 	bic.w	r0, r3, #3
 8008af2:	4408      	add	r0, r1
 8008af4:	4288      	cmp	r0, r1
 8008af6:	4614      	mov	r4, r2
 8008af8:	d904      	bls.n	8008b04 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8008afa:	6824      	ldr	r4, [r4, #0]
 8008afc:	f841 4b04 	str.w	r4, [r1], #4
 8008b00:	3204      	adds	r2, #4
 8008b02:	e7f7      	b.n	8008af4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8008b04:	f003 0303 	and.w	r3, r3, #3
 8008b08:	440b      	add	r3, r1
 8008b0a:	3a01      	subs	r2, #1
 8008b0c:	428b      	cmp	r3, r1
 8008b0e:	d90c      	bls.n	8008b2a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8008b10:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8008b14:	f801 0b01 	strb.w	r0, [r1], #1
 8008b18:	e7f8      	b.n	8008b0c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8008b1a:	0790      	lsls	r0, r2, #30
 8008b1c:	d0e7      	beq.n	8008aee <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8008b1e:	f832 0b02 	ldrh.w	r0, [r2], #2
 8008b22:	f821 0b02 	strh.w	r0, [r1], #2
 8008b26:	3b02      	subs	r3, #2
 8008b28:	e7e1      	b.n	8008aee <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8008b2a:	2001      	movs	r0, #1
 8008b2c:	bd10      	pop	{r4, pc}

08008b2e <_ZN8touchgfx3HAL7noTouchEv>:
 8008b2e:	b510      	push	{r4, lr}
 8008b30:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8008b34:	4604      	mov	r4, r0
 8008b36:	b153      	cbz	r3, 8008b4e <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8008b38:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8008b3c:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8008b40:	2101      	movs	r1, #1
 8008b42:	301c      	adds	r0, #28
 8008b44:	f006 fe44 	bl	800f7d0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8008b48:	2300      	movs	r3, #0
 8008b4a:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8008b4e:	bd10      	pop	{r4, pc}

08008b50 <_ZN8touchgfx3HAL3lcdEv>:
 8008b50:	4b04      	ldr	r3, [pc, #16]	; (8008b64 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8008b58:	b10a      	cbz	r2, 8008b5e <_ZN8touchgfx3HAL3lcdEv+0xe>
 8008b5a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8008b5c:	b900      	cbnz	r0, 8008b60 <_ZN8touchgfx3HAL3lcdEv+0x10>
 8008b5e:	6898      	ldr	r0, [r3, #8]
 8008b60:	4770      	bx	lr
 8008b62:	bf00      	nop
 8008b64:	200012d4 	.word	0x200012d4

08008b68 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8008b68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b6c:	b085      	sub	sp, #20
 8008b6e:	ad04      	add	r5, sp, #16
 8008b70:	4604      	mov	r4, r0
 8008b72:	2000      	movs	r0, #0
 8008b74:	f845 0d04 	str.w	r0, [r5, #-4]!
 8008b78:	69a0      	ldr	r0, [r4, #24]
 8008b7a:	6806      	ldr	r6, [r0, #0]
 8008b7c:	9501      	str	r5, [sp, #4]
 8008b7e:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8008b82:	9500      	str	r5, [sp, #0]
 8008b84:	6835      	ldr	r5, [r6, #0]
 8008b86:	4699      	mov	r9, r3
 8008b88:	460f      	mov	r7, r1
 8008b8a:	4690      	mov	r8, r2
 8008b8c:	47a8      	blx	r5
 8008b8e:	4d10      	ldr	r5, [pc, #64]	; (8008bd0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8008b90:	4606      	mov	r6, r0
 8008b92:	f8a5 9000 	strh.w	r9, [r5]
 8008b96:	f7ff ffdb 	bl	8008b50 <_ZN8touchgfx3HAL3lcdEv>
 8008b9a:	6803      	ldr	r3, [r0, #0]
 8008b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b9e:	4798      	blx	r3
 8008ba0:	b128      	cbz	r0, 8008bae <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8008ba2:	2801      	cmp	r0, #1
 8008ba4:	d00b      	beq.n	8008bbe <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8008ba6:	4630      	mov	r0, r6
 8008ba8:	b005      	add	sp, #20
 8008baa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008bae:	882b      	ldrh	r3, [r5, #0]
 8008bb0:	fb08 7203 	mla	r2, r8, r3, r7
 8008bb4:	9b03      	ldr	r3, [sp, #12]
 8008bb6:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8008bba:	63e3      	str	r3, [r4, #60]	; 0x3c
 8008bbc:	e7f3      	b.n	8008ba6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8008bbe:	882a      	ldrh	r2, [r5, #0]
 8008bc0:	9b03      	ldr	r3, [sp, #12]
 8008bc2:	fb08 7202 	mla	r2, r8, r2, r7
 8008bc6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8008bca:	1a9a      	subs	r2, r3, r2
 8008bcc:	63e2      	str	r2, [r4, #60]	; 0x3c
 8008bce:	e7ea      	b.n	8008ba6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8008bd0:	200012ce 	.word	0x200012ce

08008bd4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8008bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bd6:	b08b      	sub	sp, #44	; 0x2c
 8008bd8:	4617      	mov	r7, r2
 8008bda:	4604      	mov	r4, r0
 8008bdc:	460e      	mov	r6, r1
 8008bde:	461d      	mov	r5, r3
 8008be0:	f7ff ffb6 	bl	8008b50 <_ZN8touchgfx3HAL3lcdEv>
 8008be4:	6803      	ldr	r3, [r0, #0]
 8008be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008be8:	4798      	blx	r3
 8008bea:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8008bee:	9007      	str	r0, [sp, #28]
 8008bf0:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8008bf4:	4b0d      	ldr	r3, [pc, #52]	; (8008c2c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8008bf6:	6822      	ldr	r2, [r4, #0]
 8008bf8:	881b      	ldrh	r3, [r3, #0]
 8008bfa:	9306      	str	r3, [sp, #24]
 8008bfc:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8008c00:	9305      	str	r3, [sp, #20]
 8008c02:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8008c06:	9304      	str	r3, [sp, #16]
 8008c08:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8008c0c:	9303      	str	r3, [sp, #12]
 8008c0e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8008c12:	9302      	str	r3, [sp, #8]
 8008c14:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8008c18:	e9cd 5300 	strd	r5, r3, [sp]
 8008c1c:	4631      	mov	r1, r6
 8008c1e:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8008c20:	463b      	mov	r3, r7
 8008c22:	2200      	movs	r2, #0
 8008c24:	4620      	mov	r0, r4
 8008c26:	47a8      	blx	r5
 8008c28:	b00b      	add	sp, #44	; 0x2c
 8008c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c2c:	200012ce 	.word	0x200012ce

08008c30 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8008c30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c34:	4698      	mov	r8, r3
 8008c36:	6803      	ldr	r3, [r0, #0]
 8008c38:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8008c3a:	4b15      	ldr	r3, [pc, #84]	; (8008c90 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8008c3c:	b08b      	sub	sp, #44	; 0x2c
 8008c3e:	4617      	mov	r7, r2
 8008c40:	f8b3 9000 	ldrh.w	r9, [r3]
 8008c44:	460e      	mov	r6, r1
 8008c46:	4604      	mov	r4, r0
 8008c48:	f7ff ff82 	bl	8008b50 <_ZN8touchgfx3HAL3lcdEv>
 8008c4c:	6803      	ldr	r3, [r0, #0]
 8008c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c50:	4798      	blx	r3
 8008c52:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8008c56:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8008c5a:	2302      	movs	r3, #2
 8008c5c:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8008c60:	2301      	movs	r3, #1
 8008c62:	9305      	str	r3, [sp, #20]
 8008c64:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8008c68:	9304      	str	r3, [sp, #16]
 8008c6a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8008c6e:	9303      	str	r3, [sp, #12]
 8008c70:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8008c74:	9302      	str	r3, [sp, #8]
 8008c76:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	e9cd 8300 	strd	r8, r3, [sp]
 8008c80:	4631      	mov	r1, r6
 8008c82:	463b      	mov	r3, r7
 8008c84:	4620      	mov	r0, r4
 8008c86:	47a8      	blx	r5
 8008c88:	b00b      	add	sp, #44	; 0x2c
 8008c8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c8e:	bf00      	nop
 8008c90:	200012ce 	.word	0x200012ce

08008c94 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8008c94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c98:	4698      	mov	r8, r3
 8008c9a:	6803      	ldr	r3, [r0, #0]
 8008c9c:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8008c9e:	4b11      	ldr	r3, [pc, #68]	; (8008ce4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8008ca0:	b087      	sub	sp, #28
 8008ca2:	f8b3 9000 	ldrh.w	r9, [r3]
 8008ca6:	460e      	mov	r6, r1
 8008ca8:	4617      	mov	r7, r2
 8008caa:	4604      	mov	r4, r0
 8008cac:	f7ff ff50 	bl	8008b50 <_ZN8touchgfx3HAL3lcdEv>
 8008cb0:	6803      	ldr	r3, [r0, #0]
 8008cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb4:	4798      	blx	r3
 8008cb6:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8008cba:	f8cd 900c 	str.w	r9, [sp, #12]
 8008cbe:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8008cc2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8008cc6:	9302      	str	r3, [sp, #8]
 8008cc8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8008ccc:	9301      	str	r3, [sp, #4]
 8008cce:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8008cd2:	9300      	str	r3, [sp, #0]
 8008cd4:	463a      	mov	r2, r7
 8008cd6:	4643      	mov	r3, r8
 8008cd8:	4631      	mov	r1, r6
 8008cda:	4620      	mov	r0, r4
 8008cdc:	47a8      	blx	r5
 8008cde:	b007      	add	sp, #28
 8008ce0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ce4:	200012ce 	.word	0x200012ce

08008ce8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8008ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cec:	4604      	mov	r4, r0
 8008cee:	b08f      	sub	sp, #60	; 0x3c
 8008cf0:	4610      	mov	r0, r2
 8008cf2:	460d      	mov	r5, r1
 8008cf4:	4691      	mov	r9, r2
 8008cf6:	461e      	mov	r6, r3
 8008cf8:	f005 fca8 	bl	800e64c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8008cfc:	2800      	cmp	r0, #0
 8008cfe:	f000 809d 	beq.w	8008e3c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8008d02:	6823      	ldr	r3, [r4, #0]
 8008d04:	f8df b198 	ldr.w	fp, [pc, #408]	; 8008ea0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8008d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d0a:	f8df a198 	ldr.w	sl, [pc, #408]	; 8008ea4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8008d0e:	4f61      	ldr	r7, [pc, #388]	; (8008e94 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8008d10:	4620      	mov	r0, r4
 8008d12:	4798      	blx	r3
 8008d14:	6823      	ldr	r3, [r4, #0]
 8008d16:	4620      	mov	r0, r4
 8008d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d1a:	4798      	blx	r3
 8008d1c:	f8bb 3000 	ldrh.w	r3, [fp]
 8008d20:	9301      	str	r3, [sp, #4]
 8008d22:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8008d26:	f8ba 3000 	ldrh.w	r3, [sl]
 8008d2a:	9302      	str	r3, [sp, #8]
 8008d2c:	883b      	ldrh	r3, [r7, #0]
 8008d2e:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8008d32:	9303      	str	r3, [sp, #12]
 8008d34:	4b58      	ldr	r3, [pc, #352]	; (8008e98 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8008d36:	9305      	str	r3, [sp, #20]
 8008d38:	881a      	ldrh	r2, [r3, #0]
 8008d3a:	9204      	str	r2, [sp, #16]
 8008d3c:	4640      	mov	r0, r8
 8008d3e:	f005 fd19 	bl	800e774 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8008d42:	8038      	strh	r0, [r7, #0]
 8008d44:	4640      	mov	r0, r8
 8008d46:	f005 fd49 	bl	800e7dc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8008d4a:	9b05      	ldr	r3, [sp, #20]
 8008d4c:	b280      	uxth	r0, r0
 8008d4e:	8018      	strh	r0, [r3, #0]
 8008d50:	4b52      	ldr	r3, [pc, #328]	; (8008e9c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d174      	bne.n	8008e42 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8008d58:	883b      	ldrh	r3, [r7, #0]
 8008d5a:	f8ab 3000 	strh.w	r3, [fp]
 8008d5e:	f8aa 0000 	strh.w	r0, [sl]
 8008d62:	4648      	mov	r0, r9
 8008d64:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8008d68:	f005 fc70 	bl	800e64c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8008d6c:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8008d70:	2200      	movs	r2, #0
 8008d72:	4611      	mov	r1, r2
 8008d74:	4628      	mov	r0, r5
 8008d76:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8008d7a:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8008d7e:	f7fc fb26 	bl	80053ce <_ZN8touchgfx8Drawable5setXYEss>
 8008d82:	2301      	movs	r3, #1
 8008d84:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8008d88:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8008d8c:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	dd5c      	ble.n	8008e4e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8008d94:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	dd58      	ble.n	8008e4e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8008d9c:	462a      	mov	r2, r5
 8008d9e:	ab0a      	add	r3, sp, #40	; 0x28
 8008da0:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8008da4:	6851      	ldr	r1, [r2, #4]
 8008da6:	c303      	stmia	r3!, {r0, r1}
 8008da8:	4631      	mov	r1, r6
 8008daa:	a80a      	add	r0, sp, #40	; 0x28
 8008dac:	f7ff fbf2 	bl	8008594 <_ZN8touchgfx4RectaNERKS0_>
 8008db0:	4b38      	ldr	r3, [pc, #224]	; (8008e94 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8008db2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008db6:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8008dba:	2100      	movs	r1, #0
 8008dbc:	aa0a      	add	r2, sp, #40	; 0x28
 8008dbe:	4b36      	ldr	r3, [pc, #216]	; (8008e98 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8008dc0:	910c      	str	r1, [sp, #48]	; 0x30
 8008dc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008dc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008dca:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8008dce:	ab08      	add	r3, sp, #32
 8008dd0:	e883 0003 	stmia.w	r3, {r0, r1}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	a90c      	add	r1, sp, #48	; 0x30
 8008dd8:	f7ff fbdc 	bl	8008594 <_ZN8touchgfx4RectaNERKS0_>
 8008ddc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d13c      	bne.n	8008e5c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8008de2:	2000      	movs	r0, #0
 8008de4:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8008de8:	2600      	movs	r6, #0
 8008dea:	682a      	ldr	r2, [r5, #0]
 8008dec:	696b      	ldr	r3, [r5, #20]
 8008dee:	616e      	str	r6, [r5, #20]
 8008df0:	9305      	str	r3, [sp, #20]
 8008df2:	6892      	ldr	r2, [r2, #8]
 8008df4:	a908      	add	r1, sp, #32
 8008df6:	4628      	mov	r0, r5
 8008df8:	4790      	blx	r2
 8008dfa:	9b05      	ldr	r3, [sp, #20]
 8008dfc:	616b      	str	r3, [r5, #20]
 8008dfe:	4652      	mov	r2, sl
 8008e00:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8008e04:	4649      	mov	r1, r9
 8008e06:	4628      	mov	r0, r5
 8008e08:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8008e0c:	f7fc fadf 	bl	80053ce <_ZN8touchgfx8Drawable5setXYEss>
 8008e10:	4b23      	ldr	r3, [pc, #140]	; (8008ea0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8008e12:	9a01      	ldr	r2, [sp, #4]
 8008e14:	801a      	strh	r2, [r3, #0]
 8008e16:	4b23      	ldr	r3, [pc, #140]	; (8008ea4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8008e18:	9a02      	ldr	r2, [sp, #8]
 8008e1a:	801a      	strh	r2, [r3, #0]
 8008e1c:	4b1d      	ldr	r3, [pc, #116]	; (8008e94 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8008e1e:	9a03      	ldr	r2, [sp, #12]
 8008e20:	801a      	strh	r2, [r3, #0]
 8008e22:	4b1d      	ldr	r3, [pc, #116]	; (8008e98 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8008e24:	9a04      	ldr	r2, [sp, #16]
 8008e26:	801a      	strh	r2, [r3, #0]
 8008e28:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8008e2c:	6823      	ldr	r3, [r4, #0]
 8008e2e:	4620      	mov	r0, r4
 8008e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e32:	4798      	blx	r3
 8008e34:	6823      	ldr	r3, [r4, #0]
 8008e36:	4620      	mov	r0, r4
 8008e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e3a:	4798      	blx	r3
 8008e3c:	b00f      	add	sp, #60	; 0x3c
 8008e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e42:	883b      	ldrh	r3, [r7, #0]
 8008e44:	f8ab 0000 	strh.w	r0, [fp]
 8008e48:	f8aa 3000 	strh.w	r3, [sl]
 8008e4c:	e789      	b.n	8008d62 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8008e4e:	462a      	mov	r2, r5
 8008e50:	ab0a      	add	r3, sp, #40	; 0x28
 8008e52:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8008e56:	6851      	ldr	r1, [r2, #4]
 8008e58:	c303      	stmia	r3!, {r0, r1}
 8008e5a:	e7a9      	b.n	8008db0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8008e5c:	a807      	add	r0, sp, #28
 8008e5e:	f005 fd21 	bl	800e8a4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8008e62:	4606      	mov	r6, r0
 8008e64:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8008e66:	6803      	ldr	r3, [r0, #0]
 8008e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e6a:	4798      	blx	r3
 8008e6c:	4286      	cmp	r6, r0
 8008e6e:	d1b8      	bne.n	8008de2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8008e70:	f7ff fe6e 	bl	8008b50 <_ZN8touchgfx3HAL3lcdEv>
 8008e74:	6803      	ldr	r3, [r0, #0]
 8008e76:	4606      	mov	r6, r0
 8008e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e7a:	9305      	str	r3, [sp, #20]
 8008e7c:	a807      	add	r0, sp, #28
 8008e7e:	f005 fd11 	bl	800e8a4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8008e82:	9b05      	ldr	r3, [sp, #20]
 8008e84:	4601      	mov	r1, r0
 8008e86:	4630      	mov	r0, r6
 8008e88:	4798      	blx	r3
 8008e8a:	f080 0001 	eor.w	r0, r0, #1
 8008e8e:	b2c0      	uxtb	r0, r0
 8008e90:	e7a8      	b.n	8008de4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8008e92:	bf00      	nop
 8008e94:	200012c8 	.word	0x200012c8
 8008e98:	200012ca 	.word	0x200012ca
 8008e9c:	200012cc 	.word	0x200012cc
 8008ea0:	200012ce 	.word	0x200012ce
 8008ea4:	200012d0 	.word	0x200012d0

08008ea8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8008ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eac:	b08a      	sub	sp, #40	; 0x28
 8008eae:	461d      	mov	r5, r3
 8008eb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008eb4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8008eb8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8008ebc:	f8ad 3018 	strh.w	r3, [sp, #24]
 8008ec0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8008ec4:	f8ad 301a 	strh.w	r3, [sp, #26]
 8008ec8:	2400      	movs	r4, #0
 8008eca:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8008ece:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8008ed2:	f8ad 301c 	strh.w	r3, [sp, #28]
 8008ed6:	4690      	mov	r8, r2
 8008ed8:	4607      	mov	r7, r0
 8008eda:	9404      	str	r4, [sp, #16]
 8008edc:	f88d 4020 	strb.w	r4, [sp, #32]
 8008ee0:	f7fe f8ba 	bl	8007058 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8008ee4:	fb06 8505 	mla	r5, r6, r5, r8
 8008ee8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	9505      	str	r5, [sp, #20]
 8008ef0:	f8ad 601e 	strh.w	r6, [sp, #30]
 8008ef4:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8008ef8:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8008efc:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8008f00:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8008f04:	6803      	ldr	r3, [r0, #0]
 8008f06:	a901      	add	r1, sp, #4
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	4798      	blx	r3
 8008f0c:	b00a      	add	sp, #40	; 0x28
 8008f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008f12 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8008f12:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f16:	b08b      	sub	sp, #44	; 0x2c
 8008f18:	2400      	movs	r4, #0
 8008f1a:	461d      	mov	r5, r3
 8008f1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008f20:	4688      	mov	r8, r1
 8008f22:	4691      	mov	r9, r2
 8008f24:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8008f28:	9404      	str	r4, [sp, #16]
 8008f2a:	4607      	mov	r7, r0
 8008f2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008f30:	f7fe f892 	bl	8007058 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8008f34:	fb06 9505 	mla	r5, r6, r5, r9
 8008f38:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8008f3c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8008f40:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8008f44:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	9505      	str	r5, [sp, #20]
 8008f4c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8008f50:	f8ad 401c 	strh.w	r4, [sp, #28]
 8008f54:	f8ad 601e 	strh.w	r6, [sp, #30]
 8008f58:	f8cd 8010 	str.w	r8, [sp, #16]
 8008f5c:	f8ad 4020 	strh.w	r4, [sp, #32]
 8008f60:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8008f64:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8008f68:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8008f6c:	6803      	ldr	r3, [r0, #0]
 8008f6e:	a901      	add	r1, sp, #4
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	4798      	blx	r3
 8008f74:	b00b      	add	sp, #44	; 0x2c
 8008f76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08008f7c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8008f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f80:	b08a      	sub	sp, #40	; 0x28
 8008f82:	4698      	mov	r8, r3
 8008f84:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8008f88:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8008f8c:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 8008f90:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 8008f94:	2300      	movs	r3, #0
 8008f96:	2d0b      	cmp	r5, #11
 8008f98:	4606      	mov	r6, r0
 8008f9a:	9304      	str	r3, [sp, #16]
 8008f9c:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8008fa0:	d138      	bne.n	8009014 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x98>
 8008fa2:	2380      	movs	r3, #128	; 0x80
 8008fa4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8008fa8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8008fac:	f8ad 3018 	strh.w	r3, [sp, #24]
 8008fb0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8008fb4:	f8ad 301a 	strh.w	r3, [sp, #26]
 8008fb8:	f88d 0020 	strb.w	r0, [sp, #32]
 8008fbc:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8008fc0:	f8ad 301c 	strh.w	r3, [sp, #28]
 8008fc4:	4630      	mov	r0, r6
 8008fc6:	9203      	str	r2, [sp, #12]
 8008fc8:	f7fe f846 	bl	8007058 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8008fcc:	2c0b      	cmp	r4, #11
 8008fce:	bf98      	it	ls
 8008fd0:	4b1b      	ldrls	r3, [pc, #108]	; (8009040 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8008fd2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8008fd6:	bf98      	it	ls
 8008fd8:	5d19      	ldrbls	r1, [r3, r4]
 8008fda:	f8ad 701e 	strh.w	r7, [sp, #30]
 8008fde:	bf88      	it	hi
 8008fe0:	2100      	movhi	r1, #0
 8008fe2:	fb02 8307 	mla	r3, r2, r7, r8
 8008fe6:	10c9      	asrs	r1, r1, #3
 8008fe8:	fb01 0003 	mla	r0, r1, r3, r0
 8008fec:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8008ff0:	9005      	str	r0, [sp, #20]
 8008ff2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8008ff6:	6870      	ldr	r0, [r6, #4]
 8008ff8:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8009002:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8009006:	6803      	ldr	r3, [r0, #0]
 8009008:	a901      	add	r1, sp, #4
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	4798      	blx	r3
 800900e:	b00a      	add	sp, #40	; 0x28
 8009010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009014:	2d02      	cmp	r5, #2
 8009016:	d109      	bne.n	800902c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb0>
 8009018:	28ff      	cmp	r0, #255	; 0xff
 800901a:	d105      	bne.n	8009028 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xac>
 800901c:	f1bc 0f00 	cmp.w	ip, #0
 8009020:	bf14      	ite	ne
 8009022:	2340      	movne	r3, #64	; 0x40
 8009024:	2320      	moveq	r3, #32
 8009026:	e7bd      	b.n	8008fa4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8009028:	2340      	movs	r3, #64	; 0x40
 800902a:	e7bb      	b.n	8008fa4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800902c:	28ff      	cmp	r0, #255	; 0xff
 800902e:	d105      	bne.n	800903c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc0>
 8009030:	f1bc 0f00 	cmp.w	ip, #0
 8009034:	bf14      	ite	ne
 8009036:	2304      	movne	r3, #4
 8009038:	2301      	moveq	r3, #1
 800903a:	e7b3      	b.n	8008fa4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800903c:	2304      	movs	r3, #4
 800903e:	e7b1      	b.n	8008fa4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8009040:	080124e4 	.word	0x080124e4

08009044 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8009044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009048:	b08b      	sub	sp, #44	; 0x2c
 800904a:	461d      	mov	r5, r3
 800904c:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 8009050:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 8009054:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 8009058:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800905c:	bf14      	ite	ne
 800905e:	2308      	movne	r3, #8
 8009060:	2302      	moveq	r3, #2
 8009062:	2400      	movs	r4, #0
 8009064:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009068:	4688      	mov	r8, r1
 800906a:	4693      	mov	fp, r2
 800906c:	9404      	str	r4, [sp, #16]
 800906e:	4607      	mov	r7, r0
 8009070:	f7fd fff2 	bl	8007058 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8009074:	2e0b      	cmp	r6, #11
 8009076:	bf98      	it	ls
 8009078:	4b15      	ldrls	r3, [pc, #84]	; (80090d0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 800907a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 800907e:	bf98      	it	ls
 8009080:	5d9c      	ldrbls	r4, [r3, r6]
 8009082:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8009086:	f8ad 3018 	strh.w	r3, [sp, #24]
 800908a:	fb05 b50a 	mla	r5, r5, sl, fp
 800908e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8009092:	f8ad 301a 	strh.w	r3, [sp, #26]
 8009096:	10e4      	asrs	r4, r4, #3
 8009098:	fb04 0405 	mla	r4, r4, r5, r0
 800909c:	2300      	movs	r3, #0
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	9405      	str	r4, [sp, #20]
 80090a2:	f8ad 301c 	strh.w	r3, [sp, #28]
 80090a6:	f8ad a01e 	strh.w	sl, [sp, #30]
 80090aa:	f8cd 8010 	str.w	r8, [sp, #16]
 80090ae:	f88d 9020 	strb.w	r9, [sp, #32]
 80090b2:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 80090b6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80090ba:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 80090be:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 80090c2:	6803      	ldr	r3, [r0, #0]
 80090c4:	a901      	add	r1, sp, #4
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	4798      	blx	r3
 80090ca:	b00b      	add	sp, #44	; 0x2c
 80090cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090d0:	080124e4 	.word	0x080124e4

080090d4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 80090d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090d8:	461e      	mov	r6, r3
 80090da:	4b0a      	ldr	r3, [pc, #40]	; (8009104 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 80090dc:	460f      	mov	r7, r1
 80090de:	881d      	ldrh	r5, [r3, #0]
 80090e0:	4690      	mov	r8, r2
 80090e2:	f7ff fd35 	bl	8008b50 <_ZN8touchgfx3HAL3lcdEv>
 80090e6:	6803      	ldr	r3, [r0, #0]
 80090e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ea:	4798      	blx	r3
 80090ec:	280b      	cmp	r0, #11
 80090ee:	bf9a      	itte	ls
 80090f0:	4b05      	ldrls	r3, [pc, #20]	; (8009108 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 80090f2:	5c1c      	ldrbls	r4, [r3, r0]
 80090f4:	2400      	movhi	r4, #0
 80090f6:	fb08 7005 	mla	r0, r8, r5, r7
 80090fa:	10e4      	asrs	r4, r4, #3
 80090fc:	fb04 6000 	mla	r0, r4, r0, r6
 8009100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009104:	200012ce 	.word	0x200012ce
 8009108:	080124e4 	.word	0x080124e4

0800910c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 800910c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800910e:	b08b      	sub	sp, #44	; 0x2c
 8009110:	461f      	mov	r7, r3
 8009112:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8009116:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800911a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800911e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8009122:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8009126:	f8ad 301a 	strh.w	r3, [sp, #26]
 800912a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800912e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009132:	2500      	movs	r5, #0
 8009134:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8009138:	f88d 3020 	strb.w	r3, [sp, #32]
 800913c:	4604      	mov	r4, r0
 800913e:	4616      	mov	r6, r2
 8009140:	9504      	str	r5, [sp, #16]
 8009142:	f7fd ff89 	bl	8007058 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8009146:	463a      	mov	r2, r7
 8009148:	4631      	mov	r1, r6
 800914a:	4603      	mov	r3, r0
 800914c:	4620      	mov	r0, r4
 800914e:	f7ff ffc1 	bl	80090d4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8009152:	4b0e      	ldr	r3, [pc, #56]	; (800918c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8009154:	9005      	str	r0, [sp, #20]
 8009156:	881b      	ldrh	r3, [r3, #0]
 8009158:	f8ad 301e 	strh.w	r3, [sp, #30]
 800915c:	f7ff fcf8 	bl	8008b50 <_ZN8touchgfx3HAL3lcdEv>
 8009160:	6803      	ldr	r3, [r0, #0]
 8009162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009164:	4798      	blx	r3
 8009166:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009168:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 800916c:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8009170:	9304      	str	r3, [sp, #16]
 8009172:	6860      	ldr	r0, [r4, #4]
 8009174:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8009178:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 800917c:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8009180:	6803      	ldr	r3, [r0, #0]
 8009182:	a901      	add	r1, sp, #4
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	4798      	blx	r3
 8009188:	b00b      	add	sp, #44	; 0x2c
 800918a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800918c:	200012ce 	.word	0x200012ce

08009190 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8009190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009192:	b08d      	sub	sp, #52	; 0x34
 8009194:	466b      	mov	r3, sp
 8009196:	e883 0006 	stmia.w	r3, {r1, r2}
 800919a:	2300      	movs	r3, #0
 800919c:	9306      	str	r3, [sp, #24]
 800919e:	6803      	ldr	r3, [r0, #0]
 80091a0:	f8bd 6000 	ldrh.w	r6, [sp]
 80091a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091a6:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80091aa:	2501      	movs	r5, #1
 80091ac:	9503      	str	r5, [sp, #12]
 80091ae:	4604      	mov	r4, r0
 80091b0:	4798      	blx	r3
 80091b2:	463a      	mov	r2, r7
 80091b4:	4631      	mov	r1, r6
 80091b6:	4603      	mov	r3, r0
 80091b8:	4620      	mov	r0, r4
 80091ba:	f7ff ff8b 	bl	80090d4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80091be:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80091c0:	9307      	str	r3, [sp, #28]
 80091c2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80091c6:	f8ad 3020 	strh.w	r3, [sp, #32]
 80091ca:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80091ce:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80091d2:	4b0f      	ldr	r3, [pc, #60]	; (8009210 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 80091d4:	9004      	str	r0, [sp, #16]
 80091d6:	881b      	ldrh	r3, [r3, #0]
 80091d8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80091dc:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80091e0:	f7ff fcb6 	bl	8008b50 <_ZN8touchgfx3HAL3lcdEv>
 80091e4:	6803      	ldr	r3, [r0, #0]
 80091e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e8:	4798      	blx	r3
 80091ea:	23ff      	movs	r3, #255	; 0xff
 80091ec:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 80091f0:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 80091f4:	6860      	ldr	r0, [r4, #4]
 80091f6:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80091fa:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 80091fe:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8009202:	6803      	ldr	r3, [r0, #0]
 8009204:	a903      	add	r1, sp, #12
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	4798      	blx	r3
 800920a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800920c:	b00d      	add	sp, #52	; 0x34
 800920e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009210:	200012ce 	.word	0x200012ce

08009214 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8009214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009218:	b08c      	sub	sp, #48	; 0x30
 800921a:	461e      	mov	r6, r3
 800921c:	466d      	mov	r5, sp
 800921e:	2300      	movs	r3, #0
 8009220:	e885 0006 	stmia.w	r5, {r1, r2}
 8009224:	9306      	str	r3, [sp, #24]
 8009226:	6803      	ldr	r3, [r0, #0]
 8009228:	f8bd 7000 	ldrh.w	r7, [sp]
 800922c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800922e:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8009232:	2501      	movs	r5, #1
 8009234:	9503      	str	r5, [sp, #12]
 8009236:	4604      	mov	r4, r0
 8009238:	4798      	blx	r3
 800923a:	4642      	mov	r2, r8
 800923c:	4639      	mov	r1, r7
 800923e:	4603      	mov	r3, r0
 8009240:	4620      	mov	r0, r4
 8009242:	f7ff ff47 	bl	80090d4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8009246:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800924a:	f8ad 3020 	strh.w	r3, [sp, #32]
 800924e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009252:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8009256:	4b11      	ldr	r3, [pc, #68]	; (800929c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8009258:	9004      	str	r0, [sp, #16]
 800925a:	881b      	ldrh	r3, [r3, #0]
 800925c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8009260:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009262:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8009266:	9607      	str	r6, [sp, #28]
 8009268:	f7ff fc72 	bl	8008b50 <_ZN8touchgfx3HAL3lcdEv>
 800926c:	6803      	ldr	r3, [r0, #0]
 800926e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009270:	4798      	blx	r3
 8009272:	23ff      	movs	r3, #255	; 0xff
 8009274:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8009278:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 800927c:	6860      	ldr	r0, [r4, #4]
 800927e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8009282:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8009286:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800928a:	6803      	ldr	r3, [r0, #0]
 800928c:	a903      	add	r1, sp, #12
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	4798      	blx	r3
 8009292:	4630      	mov	r0, r6
 8009294:	b00c      	add	sp, #48	; 0x30
 8009296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800929a:	bf00      	nop
 800929c:	200012ce 	.word	0x200012ce

080092a0 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 80092a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092a2:	b085      	sub	sp, #20
 80092a4:	ac02      	add	r4, sp, #8
 80092a6:	e884 0006 	stmia.w	r4, {r1, r2}
 80092aa:	4605      	mov	r5, r0
 80092ac:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 80092b0:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 80092b4:	f7fd fed0 	bl	8007058 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80092b8:	463a      	mov	r2, r7
 80092ba:	4603      	mov	r3, r0
 80092bc:	4631      	mov	r1, r6
 80092be:	4628      	mov	r0, r5
 80092c0:	f7ff ff08 	bl	80090d4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80092c4:	4a05      	ldr	r2, [pc, #20]	; (80092dc <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 80092c6:	682b      	ldr	r3, [r5, #0]
 80092c8:	8812      	ldrh	r2, [r2, #0]
 80092ca:	9200      	str	r2, [sp, #0]
 80092cc:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 80092ce:	e894 0006 	ldmia.w	r4, {r1, r2}
 80092d2:	4603      	mov	r3, r0
 80092d4:	4628      	mov	r0, r5
 80092d6:	47b0      	blx	r6
 80092d8:	b005      	add	sp, #20
 80092da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092dc:	200012ce 	.word	0x200012ce

080092e0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 80092e0:	b570      	push	{r4, r5, r6, lr}
 80092e2:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80092e6:	4604      	mov	r4, r0
 80092e8:	b19b      	cbz	r3, 8009312 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 80092ea:	2002      	movs	r0, #2
 80092ec:	f7fd fd66 	bl	8006dbc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 80092f0:	2300      	movs	r3, #0
 80092f2:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80092f6:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 80092fa:	6823      	ldr	r3, [r4, #0]
 80092fc:	4620      	mov	r0, r4
 80092fe:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8009302:	f7fd fea9 	bl	8007058 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8009306:	462b      	mov	r3, r5
 8009308:	4601      	mov	r1, r0
 800930a:	4620      	mov	r0, r4
 800930c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009310:	4718      	bx	r3
 8009312:	bd70      	pop	{r4, r5, r6, pc}

08009314 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8009314:	b538      	push	{r3, r4, r5, lr}
 8009316:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 800931a:	428b      	cmp	r3, r1
 800931c:	4604      	mov	r4, r0
 800931e:	460d      	mov	r5, r1
 8009320:	d006      	beq.n	8009330 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8009322:	6803      	ldr	r3, [r0, #0]
 8009324:	b929      	cbnz	r1, 8009332 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8009326:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800932a:	4798      	blx	r3
 800932c:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8009330:	bd38      	pop	{r3, r4, r5, pc}
 8009332:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8009336:	e7f8      	b.n	800932a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08009338 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8009338:	b510      	push	{r4, lr}
 800933a:	4b0d      	ldr	r3, [pc, #52]	; (8009370 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	4604      	mov	r4, r0
 8009340:	b95b      	cbnz	r3, 800935a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8009342:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8009346:	2b02      	cmp	r3, #2
 8009348:	d007      	beq.n	800935a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800934a:	6840      	ldr	r0, [r0, #4]
 800934c:	f000 f90e 	bl	800956c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8009350:	b118      	cbz	r0, 800935a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8009352:	6862      	ldr	r2, [r4, #4]
 8009354:	7a53      	ldrb	r3, [r2, #9]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d0fc      	beq.n	8009354 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800935a:	f7fe f80b 	bl	8007374 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800935e:	4620      	mov	r0, r4
 8009360:	2100      	movs	r1, #0
 8009362:	f7ff ffd7 	bl	8009314 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8009366:	4620      	mov	r0, r4
 8009368:	f7fd fe76 	bl	8007058 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800936c:	bd10      	pop	{r4, pc}
 800936e:	bf00      	nop
 8009370:	200012d2 	.word	0x200012d2

08009374 <_ZN8touchgfx13DMA_Interface5flushEv>:
 8009374:	6803      	ldr	r3, [r0, #0]
 8009376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009378:	4718      	bx	r3

0800937a <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800937a:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800937e:	1a13      	subs	r3, r2, r0
 8009380:	4258      	negs	r0, r3
 8009382:	4158      	adcs	r0, r3
 8009384:	4770      	bx	lr

08009386 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8009386:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800938a:	1a9b      	subs	r3, r3, r2
 800938c:	2b00      	cmp	r3, #0
 800938e:	bfdc      	itt	le
 8009390:	6882      	ldrle	r2, [r0, #8]
 8009392:	189b      	addle	r3, r3, r2
 8009394:	2b01      	cmp	r3, #1
 8009396:	bfcc      	ite	gt
 8009398:	2000      	movgt	r0, #0
 800939a:	2001      	movle	r0, #1
 800939c:	4770      	bx	lr

0800939e <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800939e:	6902      	ldr	r2, [r0, #16]
 80093a0:	6843      	ldr	r3, [r0, #4]
 80093a2:	2024      	movs	r0, #36	; 0x24
 80093a4:	fb00 3002 	mla	r0, r0, r2, r3
 80093a8:	4770      	bx	lr

080093aa <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80093aa:	6803      	ldr	r3, [r0, #0]
 80093ac:	691b      	ldr	r3, [r3, #16]
 80093ae:	4718      	bx	r3

080093b0 <_ZN8touchgfx13DMA_Interface7executeEv>:
 80093b0:	b570      	push	{r4, r5, r6, lr}
 80093b2:	2301      	movs	r3, #1
 80093b4:	7203      	strb	r3, [r0, #8]
 80093b6:	4604      	mov	r4, r0
 80093b8:	6840      	ldr	r0, [r0, #4]
 80093ba:	6803      	ldr	r3, [r0, #0]
 80093bc:	699b      	ldr	r3, [r3, #24]
 80093be:	4798      	blx	r3
 80093c0:	6803      	ldr	r3, [r0, #0]
 80093c2:	2b40      	cmp	r3, #64	; 0x40
 80093c4:	4605      	mov	r5, r0
 80093c6:	d00c      	beq.n	80093e2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80093c8:	d810      	bhi.n	80093ec <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 80093ca:	2b04      	cmp	r3, #4
 80093cc:	d01d      	beq.n	800940a <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 80093ce:	d804      	bhi.n	80093da <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d006      	beq.n	80093e2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80093d4:	2b02      	cmp	r3, #2
 80093d6:	d02c      	beq.n	8009432 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 80093d8:	bd70      	pop	{r4, r5, r6, pc}
 80093da:	2b08      	cmp	r3, #8
 80093dc:	d01d      	beq.n	800941a <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 80093de:	2b20      	cmp	r3, #32
 80093e0:	d1fa      	bne.n	80093d8 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 80093e2:	6823      	ldr	r3, [r4, #0]
 80093e4:	4620      	mov	r0, r4
 80093e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093e8:	4798      	blx	r3
 80093ea:	e013      	b.n	8009414 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 80093ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093f0:	d0f7      	beq.n	80093e2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80093f2:	d804      	bhi.n	80093fe <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 80093f4:	2b80      	cmp	r3, #128	; 0x80
 80093f6:	d0f4      	beq.n	80093e2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80093f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093fc:	e7f0      	b.n	80093e0 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 80093fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009402:	d0ee      	beq.n	80093e2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8009404:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009408:	e7e5      	b.n	80093d6 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800940a:	6823      	ldr	r3, [r4, #0]
 800940c:	7f01      	ldrb	r1, [r0, #28]
 800940e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009410:	4620      	mov	r0, r4
 8009412:	4798      	blx	r3
 8009414:	6823      	ldr	r3, [r4, #0]
 8009416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009418:	e006      	b.n	8009428 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800941a:	6823      	ldr	r3, [r4, #0]
 800941c:	7f01      	ldrb	r1, [r0, #28]
 800941e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009420:	4620      	mov	r0, r4
 8009422:	4798      	blx	r3
 8009424:	6823      	ldr	r3, [r4, #0]
 8009426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009428:	4629      	mov	r1, r5
 800942a:	4620      	mov	r0, r4
 800942c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009430:	4718      	bx	r3
 8009432:	6823      	ldr	r3, [r4, #0]
 8009434:	4620      	mov	r0, r4
 8009436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009438:	4798      	blx	r3
 800943a:	e7f3      	b.n	8009424 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0800943c <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800943c:	4770      	bx	lr

0800943e <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800943e:	4770      	bx	lr

08009440 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8009440:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8009444:	1ad2      	subs	r2, r2, r3
 8009446:	2a00      	cmp	r2, #0
 8009448:	b510      	push	{r4, lr}
 800944a:	bfdc      	itt	le
 800944c:	6884      	ldrle	r4, [r0, #8]
 800944e:	1912      	addle	r2, r2, r4
 8009450:	2a01      	cmp	r2, #1
 8009452:	dd16      	ble.n	8009482 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8009454:	6842      	ldr	r2, [r0, #4]
 8009456:	2424      	movs	r4, #36	; 0x24
 8009458:	fb04 2303 	mla	r3, r4, r3, r2
 800945c:	f101 0220 	add.w	r2, r1, #32
 8009460:	f851 4b04 	ldr.w	r4, [r1], #4
 8009464:	f843 4b04 	str.w	r4, [r3], #4
 8009468:	4291      	cmp	r1, r2
 800946a:	d1f9      	bne.n	8009460 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 800946c:	780a      	ldrb	r2, [r1, #0]
 800946e:	701a      	strb	r2, [r3, #0]
 8009470:	68c3      	ldr	r3, [r0, #12]
 8009472:	6882      	ldr	r2, [r0, #8]
 8009474:	f3bf 8f5b 	dmb	ish
 8009478:	3301      	adds	r3, #1
 800947a:	429a      	cmp	r2, r3
 800947c:	bfd8      	it	le
 800947e:	1a9b      	suble	r3, r3, r2
 8009480:	60c3      	str	r3, [r0, #12]
 8009482:	bd10      	pop	{r4, pc}

08009484 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8009484:	6903      	ldr	r3, [r0, #16]
 8009486:	6882      	ldr	r2, [r0, #8]
 8009488:	f3bf 8f5b 	dmb	ish
 800948c:	3301      	adds	r3, #1
 800948e:	429a      	cmp	r2, r3
 8009490:	bfd8      	it	le
 8009492:	1a9b      	suble	r3, r3, r2
 8009494:	6103      	str	r3, [r0, #16]
 8009496:	4770      	bx	lr

08009498 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8009498:	b570      	push	{r4, r5, r6, lr}
 800949a:	4604      	mov	r4, r0
 800949c:	460e      	mov	r6, r1
 800949e:	6860      	ldr	r0, [r4, #4]
 80094a0:	6803      	ldr	r3, [r0, #0]
 80094a2:	685b      	ldr	r3, [r3, #4]
 80094a4:	4798      	blx	r3
 80094a6:	2800      	cmp	r0, #0
 80094a8:	d1f9      	bne.n	800949e <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 80094aa:	4d0d      	ldr	r5, [pc, #52]	; (80094e0 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 80094ac:	6828      	ldr	r0, [r5, #0]
 80094ae:	6803      	ldr	r3, [r0, #0]
 80094b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094b2:	4798      	blx	r3
 80094b4:	f7fd ff80 	bl	80073b8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 80094b8:	6828      	ldr	r0, [r5, #0]
 80094ba:	2101      	movs	r1, #1
 80094bc:	f7ff ff2a 	bl	8009314 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80094c0:	6860      	ldr	r0, [r4, #4]
 80094c2:	6803      	ldr	r3, [r0, #0]
 80094c4:	4631      	mov	r1, r6
 80094c6:	689b      	ldr	r3, [r3, #8]
 80094c8:	4798      	blx	r3
 80094ca:	6823      	ldr	r3, [r4, #0]
 80094cc:	4620      	mov	r0, r4
 80094ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094d0:	4798      	blx	r3
 80094d2:	6828      	ldr	r0, [r5, #0]
 80094d4:	6803      	ldr	r3, [r0, #0]
 80094d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80094da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80094dc:	4718      	bx	r3
 80094de:	bf00      	nop
 80094e0:	200012d4 	.word	0x200012d4

080094e4 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 80094e4:	b508      	push	{r3, lr}
 80094e6:	f7fd ff45 	bl	8007374 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80094ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80094ee:	f7fd bf57 	b.w	80073a0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080094f2 <_ZN8touchgfx13DMA_Interface5startEv>:
 80094f2:	b510      	push	{r4, lr}
 80094f4:	4604      	mov	r4, r0
 80094f6:	6840      	ldr	r0, [r0, #4]
 80094f8:	6803      	ldr	r3, [r0, #0]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	4798      	blx	r3
 80094fe:	b948      	cbnz	r0, 8009514 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8009500:	7a63      	ldrb	r3, [r4, #9]
 8009502:	b13b      	cbz	r3, 8009514 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8009504:	7a23      	ldrb	r3, [r4, #8]
 8009506:	b92b      	cbnz	r3, 8009514 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8009508:	6823      	ldr	r3, [r4, #0]
 800950a:	4620      	mov	r0, r4
 800950c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800950e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009512:	4718      	bx	r3
 8009514:	bd10      	pop	{r4, pc}

08009516 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8009516:	b570      	push	{r4, r5, r6, lr}
 8009518:	4604      	mov	r4, r0
 800951a:	6840      	ldr	r0, [r0, #4]
 800951c:	6803      	ldr	r3, [r0, #0]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4798      	blx	r3
 8009522:	4605      	mov	r5, r0
 8009524:	b930      	cbnz	r0, 8009534 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8009526:	7a23      	ldrb	r3, [r4, #8]
 8009528:	b123      	cbz	r3, 8009534 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800952a:	6860      	ldr	r0, [r4, #4]
 800952c:	6803      	ldr	r3, [r0, #0]
 800952e:	695b      	ldr	r3, [r3, #20]
 8009530:	4798      	blx	r3
 8009532:	7225      	strb	r5, [r4, #8]
 8009534:	6860      	ldr	r0, [r4, #4]
 8009536:	6803      	ldr	r3, [r0, #0]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4798      	blx	r3
 800953c:	b928      	cbnz	r0, 800954a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800953e:	6823      	ldr	r3, [r4, #0]
 8009540:	4620      	mov	r0, r4
 8009542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009544:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009548:	4718      	bx	r3
 800954a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800954e:	f7fd bf3f 	b.w	80073d0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

08009554 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8009554:	b510      	push	{r4, lr}
 8009556:	4c04      	ldr	r4, [pc, #16]	; (8009568 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8009558:	6082      	str	r2, [r0, #8]
 800955a:	2200      	movs	r2, #0
 800955c:	e9c0 4100 	strd	r4, r1, [r0]
 8009560:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8009564:	bd10      	pop	{r4, pc}
 8009566:	bf00      	nop
 8009568:	08012620 	.word	0x08012620

0800956c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800956c:	6840      	ldr	r0, [r0, #4]
 800956e:	6803      	ldr	r3, [r0, #0]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	4718      	bx	r3

08009574 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 8009574:	2000      	movs	r0, #0
 8009576:	4770      	bx	lr

08009578 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 8009578:	4b07      	ldr	r3, [pc, #28]	; (8009598 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 800957a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800957c:	881b      	ldrh	r3, [r3, #0]
 800957e:	4293      	cmp	r3, r2
 8009580:	bf81      	itttt	hi
 8009582:	4b06      	ldrhi	r3, [pc, #24]	; (800959c <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8009584:	681b      	ldrhi	r3, [r3, #0]
 8009586:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 800958a:	7858      	ldrbhi	r0, [r3, #1]
 800958c:	bf8c      	ite	hi
 800958e:	f000 0003 	andhi.w	r0, r0, #3
 8009592:	2000      	movls	r0, #0
 8009594:	4770      	bx	lr
 8009596:	bf00      	nop
 8009598:	20001328 	.word	0x20001328
 800959c:	20001324 	.word	0x20001324

080095a0 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 80095a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095a4:	4b10      	ldr	r3, [pc, #64]	; (80095e8 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 80095a6:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80095a8:	881b      	ldrh	r3, [r3, #0]
 80095aa:	428b      	cmp	r3, r1
 80095ac:	4604      	mov	r4, r0
 80095ae:	d918      	bls.n	80095e2 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 80095b0:	6803      	ldr	r3, [r0, #0]
 80095b2:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 80095b4:	4b0d      	ldr	r3, [pc, #52]	; (80095ec <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 80095b6:	6818      	ldr	r0, [r3, #0]
 80095b8:	f7fd f8ba 	bl	8006730 <_ZNK8touchgfx5Texts7getTextEt>
 80095bc:	6823      	ldr	r3, [r4, #0]
 80095be:	4606      	mov	r6, r0
 80095c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095c2:	4620      	mov	r0, r4
 80095c4:	4798      	blx	r3
 80095c6:	6823      	ldr	r3, [r4, #0]
 80095c8:	4607      	mov	r7, r0
 80095ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095ce:	4620      	mov	r0, r4
 80095d0:	4798      	blx	r3
 80095d2:	463a      	mov	r2, r7
 80095d4:	4603      	mov	r3, r0
 80095d6:	4631      	mov	r1, r6
 80095d8:	4620      	mov	r0, r4
 80095da:	46ac      	mov	ip, r5
 80095dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095e0:	4760      	bx	ip
 80095e2:	2000      	movs	r0, #0
 80095e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095e8:	20001328 	.word	0x20001328
 80095ec:	20001330 	.word	0x20001330

080095f0 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 80095f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80095f4:	4b17      	ldr	r3, [pc, #92]	; (8009654 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 80095f6:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80095f8:	881b      	ldrh	r3, [r3, #0]
 80095fa:	428b      	cmp	r3, r1
 80095fc:	4604      	mov	r4, r0
 80095fe:	d926      	bls.n	800964e <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 8009600:	4b15      	ldr	r3, [pc, #84]	; (8009658 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8009608:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 800960c:	4b13      	ldr	r3, [pc, #76]	; (800965c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 800960e:	7855      	ldrb	r5, [r2, #1]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8009616:	6833      	ldr	r3, [r6, #0]
 8009618:	69df      	ldr	r7, [r3, #28]
 800961a:	4b11      	ldr	r3, [pc, #68]	; (8009660 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 800961c:	6818      	ldr	r0, [r3, #0]
 800961e:	f7fd f887 	bl	8006730 <_ZNK8touchgfx5Texts7getTextEt>
 8009622:	6823      	ldr	r3, [r4, #0]
 8009624:	4680      	mov	r8, r0
 8009626:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009628:	4620      	mov	r0, r4
 800962a:	4798      	blx	r3
 800962c:	6823      	ldr	r3, [r4, #0]
 800962e:	4681      	mov	r9, r0
 8009630:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009634:	4620      	mov	r0, r4
 8009636:	4798      	blx	r3
 8009638:	f3c5 0581 	ubfx	r5, r5, #2, #2
 800963c:	9000      	str	r0, [sp, #0]
 800963e:	464b      	mov	r3, r9
 8009640:	4642      	mov	r2, r8
 8009642:	4629      	mov	r1, r5
 8009644:	4630      	mov	r0, r6
 8009646:	47b8      	blx	r7
 8009648:	b003      	add	sp, #12
 800964a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800964e:	2000      	movs	r0, #0
 8009650:	e7fa      	b.n	8009648 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 8009652:	bf00      	nop
 8009654:	20001328 	.word	0x20001328
 8009658:	20001324 	.word	0x20001324
 800965c:	2000132c 	.word	0x2000132c
 8009660:	20001330 	.word	0x20001330

08009664 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8009664:	b40e      	push	{r1, r2, r3}
 8009666:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800966a:	4b2f      	ldr	r3, [pc, #188]	; (8009728 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 800966c:	881a      	ldrh	r2, [r3, #0]
 800966e:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8009670:	429a      	cmp	r2, r3
 8009672:	b09d      	sub	sp, #116	; 0x74
 8009674:	4604      	mov	r4, r0
 8009676:	d954      	bls.n	8009722 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 8009678:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800972c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 800967c:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8009730 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 8009680:	aa26      	add	r2, sp, #152	; 0x98
 8009682:	9202      	str	r2, [sp, #8]
 8009684:	f8d9 2000 	ldr.w	r2, [r9]
 8009688:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800968c:	f8d8 3000 	ldr.w	r3, [r8]
 8009690:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8009694:	682b      	ldr	r3, [r5, #0]
 8009696:	4628      	mov	r0, r5
 8009698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800969a:	4798      	blx	r3
 800969c:	b207      	sxth	r7, r0
 800969e:	4606      	mov	r6, r0
 80096a0:	a803      	add	r0, sp, #12
 80096a2:	f003 fcd5 	bl	800d050 <_ZN8touchgfx12TextProviderC1Ev>
 80096a6:	682b      	ldr	r3, [r5, #0]
 80096a8:	4628      	mov	r0, r5
 80096aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096ac:	4798      	blx	r3
 80096ae:	682b      	ldr	r3, [r5, #0]
 80096b0:	4682      	mov	sl, r0
 80096b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096b4:	4628      	mov	r0, r5
 80096b6:	4798      	blx	r3
 80096b8:	4653      	mov	r3, sl
 80096ba:	9000      	str	r0, [sp, #0]
 80096bc:	9a02      	ldr	r2, [sp, #8]
 80096be:	9925      	ldr	r1, [sp, #148]	; 0x94
 80096c0:	a803      	add	r0, sp, #12
 80096c2:	f003 fd20 	bl	800d106 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80096c6:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80096c8:	f8d9 3000 	ldr.w	r3, [r9]
 80096cc:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 80096d0:	8925      	ldrh	r5, [r4, #8]
 80096d2:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 80096d6:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 80096da:	eba5 050c 	sub.w	r5, r5, ip
 80096de:	784a      	ldrb	r2, [r1, #1]
 80096e0:	f8d8 3000 	ldr.w	r3, [r8]
 80096e4:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 80096e8:	b22d      	sxth	r5, r5
 80096ea:	9500      	str	r5, [sp, #0]
 80096ec:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80096f0:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80096f4:	a803      	add	r0, sp, #12
 80096f6:	f001 fbad 	bl	800ae54 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 80096fa:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 80096fe:	18b9      	adds	r1, r7, r2
 8009700:	2900      	cmp	r1, #0
 8009702:	b203      	sxth	r3, r0
 8009704:	dd0b      	ble.n	800971e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 8009706:	3b01      	subs	r3, #1
 8009708:	fb13 f302 	smulbb	r3, r3, r2
 800970c:	fb16 3300 	smlabb	r3, r6, r0, r3
 8009710:	b21f      	sxth	r7, r3
 8009712:	4638      	mov	r0, r7
 8009714:	b01d      	add	sp, #116	; 0x74
 8009716:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800971a:	b003      	add	sp, #12
 800971c:	4770      	bx	lr
 800971e:	2b00      	cmp	r3, #0
 8009720:	dcf7      	bgt.n	8009712 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8009722:	2700      	movs	r7, #0
 8009724:	e7f5      	b.n	8009712 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8009726:	bf00      	nop
 8009728:	20001328 	.word	0x20001328
 800972c:	20001324 	.word	0x20001324
 8009730:	2000132c 	.word	0x2000132c

08009734 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 8009734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009738:	4bbc      	ldr	r3, [pc, #752]	; (8009a2c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 800973a:	460c      	mov	r4, r1
 800973c:	881b      	ldrh	r3, [r3, #0]
 800973e:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 8009740:	428b      	cmp	r3, r1
 8009742:	b0a9      	sub	sp, #164	; 0xa4
 8009744:	4680      	mov	r8, r0
 8009746:	d809      	bhi.n	800975c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 8009748:	2300      	movs	r3, #0
 800974a:	f04f 32ff 	mov.w	r2, #4294967295
 800974e:	e9c0 3200 	strd	r3, r2, [r0]
 8009752:	6083      	str	r3, [r0, #8]
 8009754:	4640      	mov	r0, r8
 8009756:	b029      	add	sp, #164	; 0xa4
 8009758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800975c:	4eb4      	ldr	r6, [pc, #720]	; (8009a30 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 800975e:	6833      	ldr	r3, [r6, #0]
 8009760:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8009764:	4bb3      	ldr	r3, [pc, #716]	; (8009a34 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800976c:	4bb2      	ldr	r3, [pc, #712]	; (8009a38 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 800976e:	6818      	ldr	r0, [r3, #0]
 8009770:	f7fc ffde 	bl	8006730 <_ZNK8touchgfx5Texts7getTextEt>
 8009774:	682b      	ldr	r3, [r5, #0]
 8009776:	4681      	mov	r9, r0
 8009778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800977a:	4628      	mov	r0, r5
 800977c:	4798      	blx	r3
 800977e:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
 8009780:	b203      	sxth	r3, r0
 8009782:	4407      	add	r7, r0
 8009784:	9304      	str	r3, [sp, #16]
 8009786:	b2bb      	uxth	r3, r7
 8009788:	9303      	str	r3, [sp, #12]
 800978a:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800978e:	4682      	mov	sl, r0
 8009790:	a80f      	add	r0, sp, #60	; 0x3c
 8009792:	2b00      	cmp	r3, #0
 8009794:	f040 80a6 	bne.w	80098e4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1b0>
 8009798:	f003 fc5a 	bl	800d050 <_ZN8touchgfx12TextProviderC1Ev>
 800979c:	682b      	ldr	r3, [r5, #0]
 800979e:	4628      	mov	r0, r5
 80097a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097a2:	4798      	blx	r3
 80097a4:	682b      	ldr	r3, [r5, #0]
 80097a6:	4606      	mov	r6, r0
 80097a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097aa:	4628      	mov	r0, r5
 80097ac:	4798      	blx	r3
 80097ae:	6823      	ldr	r3, [r4, #0]
 80097b0:	4607      	mov	r7, r0
 80097b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097b4:	4620      	mov	r0, r4
 80097b6:	4798      	blx	r3
 80097b8:	6823      	ldr	r3, [r4, #0]
 80097ba:	4683      	mov	fp, r0
 80097bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80097c0:	4620      	mov	r0, r4
 80097c2:	4798      	blx	r3
 80097c4:	463b      	mov	r3, r7
 80097c6:	e9cd b000 	strd	fp, r0, [sp]
 80097ca:	4649      	mov	r1, r9
 80097cc:	4632      	mov	r2, r6
 80097ce:	a80f      	add	r0, sp, #60	; 0x3c
 80097d0:	f003 fcae 	bl	800d130 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 80097d4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80097d8:	f8df b254 	ldr.w	fp, [pc, #596]	; 8009a30 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 80097dc:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80097e0:	f04f 0600 	mov.w	r6, #0
 80097e4:	bf0c      	ite	eq
 80097e6:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 80097ea:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 80097ee:	4637      	mov	r7, r6
 80097f0:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80097f2:	f8db 3000 	ldr.w	r3, [fp]
 80097f6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80097fa:	4629      	mov	r1, r5
 80097fc:	785b      	ldrb	r3, [r3, #1]
 80097fe:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8009802:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8009806:	a80f      	add	r0, sp, #60	; 0x3c
 8009808:	f001 f83f 	bl	800a88a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 800980c:	9b03      	ldr	r3, [sp, #12]
 800980e:	4286      	cmp	r6, r0
 8009810:	bfb8      	it	lt
 8009812:	4606      	movlt	r6, r0
 8009814:	3701      	adds	r7, #1
 8009816:	eba9 0903 	sub.w	r9, r9, r3
 800981a:	a80f      	add	r0, sp, #60	; 0x3c
 800981c:	b236      	sxth	r6, r6
 800981e:	b2bf      	uxth	r7, r7
 8009820:	fa0f f989 	sxth.w	r9, r9
 8009824:	f003 fc3b 	bl	800d09e <_ZN8touchgfx12TextProvider11endOfStringEv>
 8009828:	b918      	cbnz	r0, 8009832 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 800982a:	7a2b      	ldrb	r3, [r5, #8]
 800982c:	444b      	add	r3, r9
 800982e:	2b00      	cmp	r3, #0
 8009830:	dcde      	bgt.n	80097f0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xbc>
 8009832:	9b03      	ldr	r3, [sp, #12]
 8009834:	9a04      	ldr	r2, [sp, #16]
 8009836:	f895 9009 	ldrb.w	r9, [r5, #9]
 800983a:	fb13 f707 	smulbb	r7, r3, r7
 800983e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8009840:	1aff      	subs	r7, r7, r3
 8009842:	b2bf      	uxth	r7, r7
 8009844:	b23b      	sxth	r3, r7
 8009846:	429a      	cmp	r2, r3
 8009848:	bfa8      	it	ge
 800984a:	4657      	movge	r7, sl
 800984c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8009850:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8009854:	6823      	ldr	r3, [r4, #0]
 8009856:	bf08      	it	eq
 8009858:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 800985c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800985e:	bf18      	it	ne
 8009860:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 8009864:	4620      	mov	r0, r4
 8009866:	4798      	blx	r3
 8009868:	444f      	add	r7, r9
 800986a:	fa1f f987 	uxth.w	r9, r7
 800986e:	2801      	cmp	r0, #1
 8009870:	fa0f f789 	sxth.w	r7, r9
 8009874:	b2b3      	uxth	r3, r6
 8009876:	f000 80e1 	beq.w	8009a3c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 800987a:	2802      	cmp	r0, #2
 800987c:	f894 6037 	ldrb.w	r6, [r4, #55]	; 0x37
 8009880:	f000 80e2 	beq.w	8009a48 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 8009884:	7aea      	ldrb	r2, [r5, #11]
 8009886:	7b2d      	ldrb	r5, [r5, #12]
 8009888:	b236      	sxth	r6, r6
 800988a:	1ab6      	subs	r6, r6, r2
 800988c:	442a      	add	r2, r5
 800988e:	4413      	add	r3, r2
 8009890:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8009894:	fa1f fa86 	uxth.w	sl, r6
 8009898:	b29b      	uxth	r3, r3
 800989a:	2a02      	cmp	r2, #2
 800989c:	fa0f fb8a 	sxth.w	fp, sl
 80098a0:	b21e      	sxth	r6, r3
 80098a2:	f000 80d5 	beq.w	8009a50 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 80098a6:	2a03      	cmp	r2, #3
 80098a8:	f000 80dd 	beq.w	8009a66 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 80098ac:	2a01      	cmp	r2, #1
 80098ae:	f040 80e5 	bne.w	8009a7c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 80098b2:	8925      	ldrh	r5, [r4, #8]
 80098b4:	4633      	mov	r3, r6
 80098b6:	eba5 0909 	sub.w	r9, r5, r9
 80098ba:	463e      	mov	r6, r7
 80098bc:	465d      	mov	r5, fp
 80098be:	461f      	mov	r7, r3
 80098c0:	fa0f fb89 	sxth.w	fp, r9
 80098c4:	4b5c      	ldr	r3, [pc, #368]	; (8009a38 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 80098c6:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80098c8:	6818      	ldr	r0, [r3, #0]
 80098ca:	f7fc ff31 	bl	8006730 <_ZNK8touchgfx5Texts7getTextEt>
 80098ce:	f8a8 b000 	strh.w	fp, [r8]
 80098d2:	f8a8 5002 	strh.w	r5, [r8, #2]
 80098d6:	f8a8 6004 	strh.w	r6, [r8, #4]
 80098da:	f8a8 7006 	strh.w	r7, [r8, #6]
 80098de:	f8c8 0008 	str.w	r0, [r8, #8]
 80098e2:	e737      	b.n	8009754 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 80098e4:	f003 fbb4 	bl	800d050 <_ZN8touchgfx12TextProviderC1Ev>
 80098e8:	682b      	ldr	r3, [r5, #0]
 80098ea:	4628      	mov	r0, r5
 80098ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098ee:	4798      	blx	r3
 80098f0:	682b      	ldr	r3, [r5, #0]
 80098f2:	4607      	mov	r7, r0
 80098f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098f6:	4628      	mov	r0, r5
 80098f8:	4798      	blx	r3
 80098fa:	6823      	ldr	r3, [r4, #0]
 80098fc:	4683      	mov	fp, r0
 80098fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009900:	4620      	mov	r0, r4
 8009902:	4798      	blx	r3
 8009904:	6822      	ldr	r2, [r4, #0]
 8009906:	9005      	str	r0, [sp, #20]
 8009908:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800990c:	4620      	mov	r0, r4
 800990e:	4790      	blx	r2
 8009910:	9b05      	ldr	r3, [sp, #20]
 8009912:	9001      	str	r0, [sp, #4]
 8009914:	463a      	mov	r2, r7
 8009916:	4649      	mov	r1, r9
 8009918:	9300      	str	r3, [sp, #0]
 800991a:	a80f      	add	r0, sp, #60	; 0x3c
 800991c:	465b      	mov	r3, fp
 800991e:	f003 fc07 	bl	800d130 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8009922:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8009926:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 800992a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800992c:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 8009930:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8009934:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8009938:	bf0a      	itet	eq
 800993a:	464a      	moveq	r2, r9
 800993c:	461a      	movne	r2, r3
 800993e:	4699      	moveq	r9, r3
 8009940:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8009944:	1ad2      	subs	r2, r2, r3
 8009946:	6833      	ldr	r3, [r6, #0]
 8009948:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	; 0x34
 800994c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8009950:	af0f      	add	r7, sp, #60	; 0x3c
 8009952:	7859      	ldrb	r1, [r3, #1]
 8009954:	9707      	str	r7, [sp, #28]
 8009956:	2300      	movs	r3, #0
 8009958:	f3c1 0181 	ubfx	r1, r1, #2, #2
 800995c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8009960:	f88d 1020 	strb.w	r1, [sp, #32]
 8009964:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8009968:	9509      	str	r5, [sp, #36]	; 0x24
 800996a:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 800996e:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 8009972:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 8009976:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 800997a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 800997e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8009982:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8009986:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800998a:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 800998e:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8009992:	b350      	cbz	r0, 80099ea <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 8009994:	682b      	ldr	r3, [r5, #0]
 8009996:	4628      	mov	r0, r5
 8009998:	695b      	ldr	r3, [r3, #20]
 800999a:	4798      	blx	r3
 800999c:	4607      	mov	r7, r0
 800999e:	b320      	cbz	r0, 80099ea <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 80099a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099a2:	6803      	ldr	r3, [r0, #0]
 80099a4:	4639      	mov	r1, r7
 80099a6:	68db      	ldr	r3, [r3, #12]
 80099a8:	4798      	blx	r3
 80099aa:	4606      	mov	r6, r0
 80099ac:	b1e8      	cbz	r0, 80099ea <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 80099ae:	7b43      	ldrb	r3, [r0, #13]
 80099b0:	7a82      	ldrb	r2, [r0, #10]
 80099b2:	005b      	lsls	r3, r3, #1
 80099b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099b8:	4313      	orrs	r3, r2
 80099ba:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 80099be:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 80099c2:	2b06      	cmp	r3, #6
 80099c4:	d111      	bne.n	80099ea <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 80099c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099c8:	6803      	ldr	r3, [r0, #0]
 80099ca:	4632      	mov	r2, r6
 80099cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099ce:	4639      	mov	r1, r7
 80099d0:	4798      	blx	r3
 80099d2:	7b73      	ldrb	r3, [r6, #13]
 80099d4:	005b      	lsls	r3, r3, #1
 80099d6:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80099da:	7ab3      	ldrb	r3, [r6, #10]
 80099dc:	4313      	orrs	r3, r2
 80099de:	4418      	add	r0, r3
 80099e0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80099e4:	4418      	add	r0, r3
 80099e6:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 80099ea:	2600      	movs	r6, #0
 80099ec:	4637      	mov	r7, r6
 80099ee:	a806      	add	r0, sp, #24
 80099f0:	f001 f92c 	bl	800ac4c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 80099f4:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 80099f8:	9b03      	ldr	r3, [sp, #12]
 80099fa:	4286      	cmp	r6, r0
 80099fc:	eba9 0903 	sub.w	r9, r9, r3
 8009a00:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8009a04:	bfb8      	it	lt
 8009a06:	4606      	movlt	r6, r0
 8009a08:	3701      	adds	r7, #1
 8009a0a:	b236      	sxth	r6, r6
 8009a0c:	b2bf      	uxth	r7, r7
 8009a0e:	fa0f f989 	sxth.w	r9, r9
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	f43f af0d 	beq.w	8009832 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 8009a18:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	f47f af08 	bne.w	8009832 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 8009a22:	7a2b      	ldrb	r3, [r5, #8]
 8009a24:	444b      	add	r3, r9
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	dce1      	bgt.n	80099ee <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2ba>
 8009a2a:	e702      	b.n	8009832 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 8009a2c:	20001328 	.word	0x20001328
 8009a30:	20001324 	.word	0x20001324
 8009a34:	2000132c 	.word	0x2000132c
 8009a38:	20001330 	.word	0x20001330
 8009a3c:	ebaa 0606 	sub.w	r6, sl, r6
 8009a40:	2002      	movs	r0, #2
 8009a42:	fb96 f6f0 	sdiv	r6, r6, r0
 8009a46:	e71d      	b.n	8009884 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x150>
 8009a48:	441e      	add	r6, r3
 8009a4a:	ebaa 0606 	sub.w	r6, sl, r6
 8009a4e:	e719      	b.n	8009884 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x150>
 8009a50:	8925      	ldrh	r5, [r4, #8]
 8009a52:	1aed      	subs	r5, r5, r3
 8009a54:	eba5 050a 	sub.w	r5, r5, sl
 8009a58:	fa0f fb85 	sxth.w	fp, r5
 8009a5c:	8965      	ldrh	r5, [r4, #10]
 8009a5e:	eba5 0509 	sub.w	r5, r5, r9
 8009a62:	b22d      	sxth	r5, r5
 8009a64:	e72e      	b.n	80098c4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x190>
 8009a66:	8965      	ldrh	r5, [r4, #10]
 8009a68:	1aed      	subs	r5, r5, r3
 8009a6a:	eba5 050a 	sub.w	r5, r5, sl
 8009a6e:	4633      	mov	r3, r6
 8009a70:	b22d      	sxth	r5, r5
 8009a72:	463e      	mov	r6, r7
 8009a74:	f04f 0b00 	mov.w	fp, #0
 8009a78:	461f      	mov	r7, r3
 8009a7a:	e723      	b.n	80098c4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x190>
 8009a7c:	2500      	movs	r5, #0
 8009a7e:	e721      	b.n	80098c4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x190>

08009a80 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 8009a80:	b513      	push	{r0, r1, r4, lr}
 8009a82:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 8009a86:	4604      	mov	r4, r0
 8009a88:	b1fb      	cbz	r3, 8009aca <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8009a8a:	4b16      	ldr	r3, [pc, #88]	; (8009ae4 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 8009a8c:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8009a8e:	881b      	ldrh	r3, [r3, #0]
 8009a90:	428b      	cmp	r3, r1
 8009a92:	d91a      	bls.n	8009aca <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8009a94:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	dd16      	ble.n	8009aca <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8009a9c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	dd12      	ble.n	8009aca <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8009aa4:	4b10      	ldr	r3, [pc, #64]	; (8009ae8 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 8009aa6:	6818      	ldr	r0, [r3, #0]
 8009aa8:	f7fc fe42 	bl	8006730 <_ZNK8touchgfx5Texts7getTextEt>
 8009aac:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 8009ab0:	6822      	ldr	r2, [r4, #0]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	db06      	blt.n	8009ac4 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8009ab6:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	db02      	blt.n	8009ac4 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8009abe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009ac0:	4298      	cmp	r0, r3
 8009ac2:	d004      	beq.n	8009ace <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 8009ac4:	6953      	ldr	r3, [r2, #20]
 8009ac6:	4620      	mov	r0, r4
 8009ac8:	4798      	blx	r3
 8009aca:	b002      	add	sp, #8
 8009acc:	bd10      	pop	{r4, pc}
 8009ace:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8009ad2:	c903      	ldmia	r1, {r0, r1}
 8009ad4:	466b      	mov	r3, sp
 8009ad6:	e883 0003 	stmia.w	r3, {r0, r1}
 8009ada:	6912      	ldr	r2, [r2, #16]
 8009adc:	4619      	mov	r1, r3
 8009ade:	4620      	mov	r0, r4
 8009ae0:	4790      	blx	r2
 8009ae2:	e7f2      	b.n	8009aca <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8009ae4:	20001328 	.word	0x20001328
 8009ae8:	20001330 	.word	0x20001330

08009aec <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8009aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009af0:	4b44      	ldr	r3, [pc, #272]	; (8009c04 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 8009af2:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8009af4:	881b      	ldrh	r3, [r3, #0]
 8009af6:	4293      	cmp	r3, r2
 8009af8:	b08e      	sub	sp, #56	; 0x38
 8009afa:	4604      	mov	r4, r0
 8009afc:	d97e      	bls.n	8009bfc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8009afe:	6808      	ldr	r0, [r1, #0]
 8009b00:	4d41      	ldr	r5, [pc, #260]	; (8009c08 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 8009b02:	6849      	ldr	r1, [r1, #4]
 8009b04:	ab05      	add	r3, sp, #20
 8009b06:	c303      	stmia	r3!, {r0, r1}
 8009b08:	4611      	mov	r1, r2
 8009b0a:	6828      	ldr	r0, [r5, #0]
 8009b0c:	f7fc fe10 	bl	8006730 <_ZNK8touchgfx5Texts7getTextEt>
 8009b10:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	db11      	blt.n	8009b3c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8009b18:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	db0d      	blt.n	8009b3c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8009b20:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009b22:	4298      	cmp	r0, r3
 8009b24:	d10a      	bne.n	8009b3c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8009b26:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 8009b2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009b2e:	ab09      	add	r3, sp, #36	; 0x24
 8009b30:	e883 0003 	stmia.w	r3, {r0, r1}
 8009b34:	4619      	mov	r1, r3
 8009b36:	a805      	add	r0, sp, #20
 8009b38:	f7fe fd2c 	bl	8008594 <_ZN8touchgfx4RectaNERKS0_>
 8009b3c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	dd5b      	ble.n	8009bfc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8009b44:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	dd57      	ble.n	8009bfc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8009b4c:	4f2f      	ldr	r7, [pc, #188]	; (8009c0c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 8009b4e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8009b56:	4b2e      	ldr	r3, [pc, #184]	; (8009c10 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8009b5e:	2e00      	cmp	r6, #0
 8009b60:	d04c      	beq.n	8009bfc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8009b62:	6823      	ldr	r3, [r4, #0]
 8009b64:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
 8009b68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b6a:	4620      	mov	r0, r4
 8009b6c:	4798      	blx	r3
 8009b6e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
 8009b76:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
 8009b7a:	f894 7037 	ldrb.w	r7, [r4, #55]	; 0x37
 8009b7e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009b80:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8009b84:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8009b88:	785b      	ldrb	r3, [r3, #1]
 8009b8a:	9609      	str	r6, [sp, #36]	; 0x24
 8009b8c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8009b90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b94:	4b1f      	ldr	r3, [pc, #124]	; (8009c14 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 8009b96:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
 8009ba0:	910b      	str	r1, [sp, #44]	; 0x2c
 8009ba2:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
 8009ba6:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
 8009baa:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
 8009bae:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 8009bb2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8009bb6:	b10a      	cbz	r2, 8009bbc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 8009bb8:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8009bba:	b906      	cbnz	r6, 8009bbe <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 8009bbc:	689e      	ldr	r6, [r3, #8]
 8009bbe:	af07      	add	r7, sp, #28
 8009bc0:	4621      	mov	r1, r4
 8009bc2:	4638      	mov	r0, r7
 8009bc4:	f002 fe8e 	bl	800c8e4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8009bc8:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8009bca:	6828      	ldr	r0, [r5, #0]
 8009bcc:	f7fc fdb0 	bl	8006730 <_ZNK8touchgfx5Texts7getTextEt>
 8009bd0:	6823      	ldr	r3, [r4, #0]
 8009bd2:	4605      	mov	r5, r0
 8009bd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bd6:	4620      	mov	r0, r4
 8009bd8:	4798      	blx	r3
 8009bda:	6823      	ldr	r3, [r4, #0]
 8009bdc:	4680      	mov	r8, r0
 8009bde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009be2:	4620      	mov	r0, r4
 8009be4:	4798      	blx	r3
 8009be6:	e9cd 8002 	strd	r8, r0, [sp, #8]
 8009bea:	ab09      	add	r3, sp, #36	; 0x24
 8009bec:	9300      	str	r3, [sp, #0]
 8009bee:	9501      	str	r5, [sp, #4]
 8009bf0:	ab05      	add	r3, sp, #20
 8009bf2:	e897 0006 	ldmia.w	r7, {r1, r2}
 8009bf6:	4630      	mov	r0, r6
 8009bf8:	f7fc fd2b 	bl	8006652 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8009bfc:	b00e      	add	sp, #56	; 0x38
 8009bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c02:	bf00      	nop
 8009c04:	20001328 	.word	0x20001328
 8009c08:	20001330 	.word	0x20001330
 8009c0c:	20001324 	.word	0x20001324
 8009c10:	2000132c 	.word	0x2000132c
 8009c14:	200012d4 	.word	0x200012d4

08009c18 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8009c18:	b538      	push	{r3, r4, r5, lr}
 8009c1a:	4b0e      	ldr	r3, [pc, #56]	; (8009c54 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 8009c1c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8009c1e:	881b      	ldrh	r3, [r3, #0]
 8009c20:	429a      	cmp	r2, r3
 8009c22:	4604      	mov	r4, r0
 8009c24:	d214      	bcs.n	8009c50 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8009c26:	6803      	ldr	r3, [r0, #0]
 8009c28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c2a:	4798      	blx	r3
 8009c2c:	6823      	ldr	r3, [r4, #0]
 8009c2e:	4605      	mov	r5, r0
 8009c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c32:	4620      	mov	r0, r4
 8009c34:	4798      	blx	r3
 8009c36:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8009c3a:	b22d      	sxth	r5, r5
 8009c3c:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8009c40:	4601      	mov	r1, r0
 8009c42:	bf06      	itte	eq
 8009c44:	4602      	moveq	r2, r0
 8009c46:	4629      	moveq	r1, r5
 8009c48:	462a      	movne	r2, r5
 8009c4a:	4620      	mov	r0, r4
 8009c4c:	f7fb fc1b 	bl	8005486 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8009c50:	bd38      	pop	{r3, r4, r5, pc}
 8009c52:	bf00      	nop
 8009c54:	20001328 	.word	0x20001328

08009c58 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8009c58:	b530      	push	{r4, r5, lr}
 8009c5a:	888b      	ldrh	r3, [r1, #4]
 8009c5c:	8583      	strh	r3, [r0, #44]	; 0x2c
 8009c5e:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8009c62:	b085      	sub	sp, #20
 8009c64:	4604      	mov	r4, r0
 8009c66:	b923      	cbnz	r3, 8009c72 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8009c68:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8009c6c:	b90b      	cbnz	r3, 8009c72 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8009c6e:	f7ff ffd3 	bl	8009c18 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8009c72:	6823      	ldr	r3, [r4, #0]
 8009c74:	466d      	mov	r5, sp
 8009c76:	4621      	mov	r1, r4
 8009c78:	4628      	mov	r0, r5
 8009c7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c7e:	4798      	blx	r3
 8009c80:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009c84:	343c      	adds	r4, #60	; 0x3c
 8009c86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009c8a:	b005      	add	sp, #20
 8009c8c:	bd30      	pop	{r4, r5, pc}

08009c8e <_ZNK8touchgfx3Box12getSolidRectEv>:
 8009c8e:	2300      	movs	r3, #0
 8009c90:	8083      	strh	r3, [r0, #4]
 8009c92:	80c3      	strh	r3, [r0, #6]
 8009c94:	8003      	strh	r3, [r0, #0]
 8009c96:	8043      	strh	r3, [r0, #2]
 8009c98:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8009c9c:	2bff      	cmp	r3, #255	; 0xff
 8009c9e:	bf01      	itttt	eq
 8009ca0:	890b      	ldrheq	r3, [r1, #8]
 8009ca2:	8083      	strheq	r3, [r0, #4]
 8009ca4:	894b      	ldrheq	r3, [r1, #10]
 8009ca6:	80c3      	strheq	r3, [r0, #6]
 8009ca8:	4770      	bx	lr
	...

08009cac <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8009cac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009cae:	4604      	mov	r4, r0
 8009cb0:	6808      	ldr	r0, [r1, #0]
 8009cb2:	6849      	ldr	r1, [r1, #4]
 8009cb4:	466b      	mov	r3, sp
 8009cb6:	c303      	stmia	r3!, {r0, r1}
 8009cb8:	6823      	ldr	r3, [r4, #0]
 8009cba:	4669      	mov	r1, sp
 8009cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cbe:	4620      	mov	r0, r4
 8009cc0:	4798      	blx	r3
 8009cc2:	4b08      	ldr	r3, [pc, #32]	; (8009ce4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8009cca:	b10a      	cbz	r2, 8009cd0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8009ccc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009cce:	b900      	cbnz	r0, 8009cd2 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8009cd0:	6898      	ldr	r0, [r3, #8]
 8009cd2:	6803      	ldr	r3, [r0, #0]
 8009cd4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009cd6:	6a1d      	ldr	r5, [r3, #32]
 8009cd8:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8009cdc:	4669      	mov	r1, sp
 8009cde:	47a8      	blx	r5
 8009ce0:	b003      	add	sp, #12
 8009ce2:	bd30      	pop	{r4, r5, pc}
 8009ce4:	200012d4 	.word	0x200012d4

08009ce8 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8009ce8:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 8009cec:	b12a      	cbz	r2, 8009cfa <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8009cee:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8009cf2:	b112      	cbz	r2, 8009cfa <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8009cf4:	6803      	ldr	r3, [r0, #0]
 8009cf6:	695b      	ldr	r3, [r3, #20]
 8009cf8:	4718      	bx	r3
 8009cfa:	4770      	bx	lr

08009cfc <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 8009cfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009d00:	4b2f      	ldr	r3, [pc, #188]	; (8009dc0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 8009d02:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8009d04:	881b      	ldrh	r3, [r3, #0]
 8009d06:	4293      	cmp	r3, r2
 8009d08:	b08d      	sub	sp, #52	; 0x34
 8009d0a:	4604      	mov	r4, r0
 8009d0c:	460f      	mov	r7, r1
 8009d0e:	d954      	bls.n	8009dba <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8009d10:	4b2c      	ldr	r3, [pc, #176]	; (8009dc4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 8009d12:	6819      	ldr	r1, [r3, #0]
 8009d14:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 8009d18:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 8009d1c:	4a2a      	ldr	r2, [pc, #168]	; (8009dc8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 8009d1e:	6812      	ldr	r2, [r2, #0]
 8009d20:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8009d24:	2900      	cmp	r1, #0
 8009d26:	d048      	beq.n	8009dba <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8009d28:	785a      	ldrb	r2, [r3, #1]
 8009d2a:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8009d2e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8009d32:	4b26      	ldr	r3, [pc, #152]	; (8009dcc <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 8009d34:	f890 5036 	ldrb.w	r5, [r0, #54]	; 0x36
 8009d38:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 8009d3c:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 8009d40:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8009d42:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
 8009d46:	9107      	str	r1, [sp, #28]
 8009d48:	f3c2 0801 	ubfx	r8, r2, #0, #2
 8009d4c:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8009d50:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
 8009d54:	681a      	ldr	r2, [r3, #0]
 8009d56:	f88d 8020 	strb.w	r8, [sp, #32]
 8009d5a:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
 8009d5e:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 8009d62:	9609      	str	r6, [sp, #36]	; 0x24
 8009d64:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 8009d68:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 8009d6c:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
 8009d70:	b10b      	cbz	r3, 8009d76 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 8009d72:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 8009d74:	b905      	cbnz	r5, 8009d78 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 8009d76:	6895      	ldr	r5, [r2, #8]
 8009d78:	ae05      	add	r6, sp, #20
 8009d7a:	4621      	mov	r1, r4
 8009d7c:	4630      	mov	r0, r6
 8009d7e:	f002 fdb1 	bl	800c8e4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8009d82:	4b13      	ldr	r3, [pc, #76]	; (8009dd0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 8009d84:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8009d86:	6818      	ldr	r0, [r3, #0]
 8009d88:	f7fc fcd2 	bl	8006730 <_ZNK8touchgfx5Texts7getTextEt>
 8009d8c:	6823      	ldr	r3, [r4, #0]
 8009d8e:	4680      	mov	r8, r0
 8009d90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d92:	4620      	mov	r0, r4
 8009d94:	4798      	blx	r3
 8009d96:	6823      	ldr	r3, [r4, #0]
 8009d98:	4681      	mov	r9, r0
 8009d9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d9e:	4620      	mov	r0, r4
 8009da0:	4798      	blx	r3
 8009da2:	e9cd 9002 	strd	r9, r0, [sp, #8]
 8009da6:	ab07      	add	r3, sp, #28
 8009da8:	9300      	str	r3, [sp, #0]
 8009daa:	f8cd 8004 	str.w	r8, [sp, #4]
 8009dae:	463b      	mov	r3, r7
 8009db0:	e896 0006 	ldmia.w	r6, {r1, r2}
 8009db4:	4628      	mov	r0, r5
 8009db6:	f7fc fc4c 	bl	8006652 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8009dba:	b00d      	add	sp, #52	; 0x34
 8009dbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009dc0:	20001328 	.word	0x20001328
 8009dc4:	20001324 	.word	0x20001324
 8009dc8:	2000132c 	.word	0x2000132c
 8009dcc:	200012d4 	.word	0x200012d4
 8009dd0:	20001330 	.word	0x20001330

08009dd4 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8009dd4:	b510      	push	{r4, lr}
 8009dd6:	6803      	ldr	r3, [r0, #0]
 8009dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dda:	460c      	mov	r4, r1
 8009ddc:	4798      	blx	r3
 8009dde:	1b03      	subs	r3, r0, r4
 8009de0:	4258      	negs	r0, r3
 8009de2:	4158      	adcs	r0, r3
 8009de4:	bd10      	pop	{r4, pc}
	...

08009de8 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8009de8:	4b01      	ldr	r3, [pc, #4]	; (8009df0 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8009dea:	6019      	str	r1, [r3, #0]
 8009dec:	4770      	bx	lr
 8009dee:	bf00      	nop
 8009df0:	200012dc 	.word	0x200012dc

08009df4 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8009df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009df8:	4696      	mov	lr, r2
 8009dfa:	4605      	mov	r5, r0
 8009dfc:	4614      	mov	r4, r2
 8009dfe:	460e      	mov	r6, r1
 8009e00:	461f      	mov	r7, r3
 8009e02:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009e06:	b097      	sub	sp, #92	; 0x5c
 8009e08:	f10d 0c1c 	add.w	ip, sp, #28
 8009e0c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009e10:	f8de 3000 	ldr.w	r3, [lr]
 8009e14:	f8cc 3000 	str.w	r3, [ip]
 8009e18:	f104 0e14 	add.w	lr, r4, #20
 8009e1c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009e20:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8009e24:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009e28:	f8de 3000 	ldr.w	r3, [lr]
 8009e2c:	f8cc 3000 	str.w	r3, [ip]
 8009e30:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8009e34:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009e38:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8009e3c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009e40:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8009e44:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8009e48:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8009e4c:	f8de 3000 	ldr.w	r3, [lr]
 8009e50:	f8cc 3000 	str.w	r3, [ip]
 8009e54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009e56:	682b      	ldr	r3, [r5, #0]
 8009e58:	9201      	str	r2, [sp, #4]
 8009e5a:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8009e5e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009e60:	9200      	str	r2, [sp, #0]
 8009e62:	f8cd 8008 	str.w	r8, [sp, #8]
 8009e66:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 8009e6a:	aa07      	add	r2, sp, #28
 8009e6c:	463b      	mov	r3, r7
 8009e6e:	4631      	mov	r1, r6
 8009e70:	4628      	mov	r0, r5
 8009e72:	47d8      	blx	fp
 8009e74:	46a6      	mov	lr, r4
 8009e76:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009e7a:	f10d 0c1c 	add.w	ip, sp, #28
 8009e7e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009e82:	f8de 3000 	ldr.w	r3, [lr]
 8009e86:	f8cc 3000 	str.w	r3, [ip]
 8009e8a:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8009e8e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009e92:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8009e96:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009e9a:	343c      	adds	r4, #60	; 0x3c
 8009e9c:	f8de 3000 	ldr.w	r3, [lr]
 8009ea0:	f8cc 3000 	str.w	r3, [ip]
 8009ea4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009ea6:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8009eaa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009eae:	6823      	ldr	r3, [r4, #0]
 8009eb0:	f8cc 3000 	str.w	r3, [ip]
 8009eb4:	682b      	ldr	r3, [r5, #0]
 8009eb6:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8009eba:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009ebc:	9201      	str	r2, [sp, #4]
 8009ebe:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009ec0:	9200      	str	r2, [sp, #0]
 8009ec2:	f8cd 8008 	str.w	r8, [sp, #8]
 8009ec6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8009ec8:	aa07      	add	r2, sp, #28
 8009eca:	463b      	mov	r3, r7
 8009ecc:	4631      	mov	r1, r6
 8009ece:	4628      	mov	r0, r5
 8009ed0:	47a0      	blx	r4
 8009ed2:	b017      	add	sp, #92	; 0x5c
 8009ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009ed8 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8009ed8:	2000      	movs	r0, #0
 8009eda:	4770      	bx	lr

08009edc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8009edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ee0:	b08d      	sub	sp, #52	; 0x34
 8009ee2:	4688      	mov	r8, r1
 8009ee4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009ee6:	f8d3 c000 	ldr.w	ip, [r3]
 8009eea:	680f      	ldr	r7, [r1, #0]
 8009eec:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8009ef0:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8009ef4:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8009ef8:	edd3 6a07 	vldr	s13, [r3, #28]
 8009efc:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009efe:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8009f02:	f9b1 9000 	ldrsh.w	r9, [r1]
 8009f06:	f9ba 1000 	ldrsh.w	r1, [sl]
 8009f0a:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8009f0e:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8009f12:	eba7 070c 	sub.w	r7, r7, ip
 8009f16:	42bc      	cmp	r4, r7
 8009f18:	bfa8      	it	ge
 8009f1a:	463c      	movge	r4, r7
 8009f1c:	ee07 4a90 	vmov	s15, r4
 8009f20:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8009f24:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8009f28:	ee25 4a04 	vmul.f32	s8, s10, s8
 8009f2c:	ee65 4a24 	vmul.f32	s9, s10, s9
 8009f30:	ee25 5a27 	vmul.f32	s10, s10, s15
 8009f34:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009f38:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009f3c:	eb09 0e0c 	add.w	lr, r9, ip
 8009f40:	4571      	cmp	r1, lr
 8009f42:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8009f46:	ee32 1a05 	vadd.f32	s2, s4, s10
 8009f4a:	ee36 0a84 	vadd.f32	s0, s13, s8
 8009f4e:	ee61 1a87 	vmul.f32	s3, s3, s14
 8009f52:	ee22 2a07 	vmul.f32	s4, s4, s14
 8009f56:	f340 808d 	ble.w	800a074 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x198>
 8009f5a:	eba1 060e 	sub.w	r6, r1, lr
 8009f5e:	fb96 f5f4 	sdiv	r5, r6, r4
 8009f62:	ee07 5a10 	vmov	s14, r5
 8009f66:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009f6a:	2d00      	cmp	r5, #0
 8009f6c:	fb04 6615 	mls	r6, r4, r5, r6
 8009f70:	eea7 0a04 	vfma.f32	s0, s14, s8
 8009f74:	eee7 0a24 	vfma.f32	s1, s14, s9
 8009f78:	eea7 1a05 	vfma.f32	s2, s14, s10
 8009f7c:	dd13      	ble.n	8009fa6 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca>
 8009f7e:	ee70 6a44 	vsub.f32	s13, s0, s8
 8009f82:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8009f86:	eef5 6a40 	vcmp.f32	s13, #0.0
 8009f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f8e:	bf18      	it	ne
 8009f90:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8009f94:	ee31 2a45 	vsub.f32	s4, s2, s10
 8009f98:	bf08      	it	eq
 8009f9a:	eeb0 7a67 	vmoveq.f32	s14, s15
 8009f9e:	ee61 1a87 	vmul.f32	s3, s3, s14
 8009fa2:	ee22 2a07 	vmul.f32	s4, s4, s14
 8009fa6:	fb05 f204 	mul.w	r2, r5, r4
 8009faa:	1abf      	subs	r7, r7, r2
 8009fac:	4494      	add	ip, r2
 8009fae:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8009fb2:	4411      	add	r1, r2
 8009fb4:	eb09 020c 	add.w	r2, r9, ip
 8009fb8:	443a      	add	r2, r7
 8009fba:	b209      	sxth	r1, r1
 8009fbc:	428a      	cmp	r2, r1
 8009fbe:	bfc4      	itt	gt
 8009fc0:	eba1 0209 	subgt.w	r2, r1, r9
 8009fc4:	eba2 070c 	subgt.w	r7, r2, ip
 8009fc8:	2f00      	cmp	r7, #0
 8009fca:	dd50      	ble.n	800a06e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x192>
 8009fcc:	fb97 f1f4 	sdiv	r1, r7, r4
 8009fd0:	fb04 7211 	mls	r2, r4, r1, r7
 8009fd4:	b90a      	cbnz	r2, 8009fda <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfe>
 8009fd6:	3901      	subs	r1, #1
 8009fd8:	4622      	mov	r2, r4
 8009fda:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8009fde:	6840      	ldr	r0, [r0, #4]
 8009fe0:	900b      	str	r0, [sp, #44]	; 0x2c
 8009fe2:	f8d0 a000 	ldr.w	sl, [r0]
 8009fe6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009fe8:	9008      	str	r0, [sp, #32]
 8009fea:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8009fee:	9818      	ldr	r0, [sp, #96]	; 0x60
 8009ff0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8009ff4:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8009ff8:	695b      	ldr	r3, [r3, #20]
 8009ffa:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009ffc:	445b      	add	r3, fp
 8009ffe:	eef0 6a42 	vmov.f32	s13, s4
 800a002:	ee60 2aa3 	vmul.f32	s5, s1, s7
 800a006:	ee21 3a23 	vmul.f32	s6, s2, s7
 800a00a:	ee72 7ae1 	vsub.f32	s15, s5, s3
 800a00e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800a012:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800a016:	9307      	str	r3, [sp, #28]
 800a018:	ee17 7a90 	vmov	r7, s15
 800a01c:	ee73 7a42 	vsub.f32	s15, s6, s4
 800a020:	eeb0 7a61 	vmov.f32	s14, s3
 800a024:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800a028:	ee16 3a90 	vmov	r3, s13
 800a02c:	fb97 f7f4 	sdiv	r7, r7, r4
 800a030:	ee17 ca90 	vmov	ip, s15
 800a034:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 800a038:	fb9c fcf4 	sdiv	ip, ip, r4
 800a03c:	fb0c 3306 	mla	r3, ip, r6, r3
 800a040:	9302      	str	r3, [sp, #8]
 800a042:	ee17 3a10 	vmov	r3, s14
 800a046:	44b6      	add	lr, r6
 800a048:	fb04 e505 	mla	r5, r4, r5, lr
 800a04c:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 800a050:	fb07 3706 	mla	r7, r7, r6, r3
 800a054:	e9cd 8505 	strd	r8, r5, [sp, #20]
 800a058:	e9cd 4700 	strd	r4, r7, [sp]
 800a05c:	2900      	cmp	r1, #0
 800a05e:	bfcc      	ite	gt
 800a060:	46a1      	movgt	r9, r4
 800a062:	4691      	movle	r9, r2
 800a064:	eba9 0306 	sub.w	r3, r9, r6
 800a068:	f8da 4008 	ldr.w	r4, [sl, #8]
 800a06c:	47a0      	blx	r4
 800a06e:	b00d      	add	sp, #52	; 0x34
 800a070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a074:	2500      	movs	r5, #0
 800a076:	462e      	mov	r6, r5
 800a078:	e799      	b.n	8009fae <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd2>
	...

0800a07c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800a07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a080:	b0db      	sub	sp, #364	; 0x16c
 800a082:	461d      	mov	r5, r3
 800a084:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 800a088:	930a      	str	r3, [sp, #40]	; 0x28
 800a08a:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 800a08e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a090:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 800a094:	9310      	str	r3, [sp, #64]	; 0x40
 800a096:	6803      	ldr	r3, [r0, #0]
 800a098:	910f      	str	r1, [sp, #60]	; 0x3c
 800a09a:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 800a09c:	9009      	str	r0, [sp, #36]	; 0x24
 800a09e:	4614      	mov	r4, r2
 800a0a0:	4629      	mov	r1, r5
 800a0a2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a0a6:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 800a0aa:	47b8      	blx	r7
 800a0ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0ae:	6058      	str	r0, [r3, #4]
 800a0b0:	2800      	cmp	r0, #0
 800a0b2:	f000 83a1 	beq.w	800a7f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800a0b6:	682b      	ldr	r3, [r5, #0]
 800a0b8:	9314      	str	r3, [sp, #80]	; 0x50
 800a0ba:	686b      	ldr	r3, [r5, #4]
 800a0bc:	9315      	str	r3, [sp, #84]	; 0x54
 800a0be:	4bc4      	ldr	r3, [pc, #784]	; (800a3d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 800a0c0:	ed94 7a02 	vldr	s14, [r4, #8]
 800a0c4:	7819      	ldrb	r1, [r3, #0]
 800a0c6:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800a0ca:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800a0ce:	2900      	cmp	r1, #0
 800a0d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a0d4:	bf16      	itet	ne
 800a0d6:	4619      	movne	r1, r3
 800a0d8:	4611      	moveq	r1, r2
 800a0da:	4613      	movne	r3, r2
 800a0dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0e0:	9116      	str	r1, [sp, #88]	; 0x58
 800a0e2:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 800a0e6:	f240 8387 	bls.w	800a7f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800a0ea:	ed94 7a07 	vldr	s14, [r4, #28]
 800a0ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a0f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0f6:	f240 837f 	bls.w	800a7f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800a0fa:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 800a0fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a106:	f240 8377 	bls.w	800a7f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800a10a:	6822      	ldr	r2, [r4, #0]
 800a10c:	4bb1      	ldr	r3, [pc, #708]	; (800a3d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 800a10e:	429a      	cmp	r2, r3
 800a110:	f2c0 8372 	blt.w	800a7f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800a114:	49b0      	ldr	r1, [pc, #704]	; (800a3d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 800a116:	6963      	ldr	r3, [r4, #20]
 800a118:	428a      	cmp	r2, r1
 800a11a:	f300 836d 	bgt.w	800a7f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800a11e:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800a122:	48ae      	ldr	r0, [pc, #696]	; (800a3dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 800a124:	33ff      	adds	r3, #255	; 0xff
 800a126:	4283      	cmp	r3, r0
 800a128:	f200 8366 	bhi.w	800a7f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800a12c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a12e:	4dac      	ldr	r5, [pc, #688]	; (800a3e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 800a130:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800a134:	33ff      	adds	r3, #255	; 0xff
 800a136:	42ab      	cmp	r3, r5
 800a138:	f200 835e 	bhi.w	800a7f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800a13c:	6862      	ldr	r2, [r4, #4]
 800a13e:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 800a142:	33ff      	adds	r3, #255	; 0xff
 800a144:	4283      	cmp	r3, r0
 800a146:	f200 8357 	bhi.w	800a7f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800a14a:	69a1      	ldr	r1, [r4, #24]
 800a14c:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 800a150:	33ff      	adds	r3, #255	; 0xff
 800a152:	4283      	cmp	r3, r0
 800a154:	f200 8350 	bhi.w	800a7f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800a158:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a15a:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 800a15e:	30ff      	adds	r0, #255	; 0xff
 800a160:	42a8      	cmp	r0, r5
 800a162:	f200 8349 	bhi.w	800a7f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800a166:	428a      	cmp	r2, r1
 800a168:	f280 8110 	bge.w	800a38c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 800a16c:	429a      	cmp	r2, r3
 800a16e:	f300 8119 	bgt.w	800a3a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 800a172:	4299      	cmp	r1, r3
 800a174:	f280 811d 	bge.w	800a3b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 800a178:	2502      	movs	r5, #2
 800a17a:	2701      	movs	r7, #1
 800a17c:	46a9      	mov	r9, r5
 800a17e:	46b8      	mov	r8, r7
 800a180:	f04f 0a00 	mov.w	sl, #0
 800a184:	4621      	mov	r1, r4
 800a186:	a849      	add	r0, sp, #292	; 0x124
 800a188:	f003 fcaa 	bl	800dae0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 800a18c:	4622      	mov	r2, r4
 800a18e:	4653      	mov	r3, sl
 800a190:	a949      	add	r1, sp, #292	; 0x124
 800a192:	f8cd 9000 	str.w	r9, [sp]
 800a196:	a819      	add	r0, sp, #100	; 0x64
 800a198:	f003 fdd2 	bl	800dd40 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800a19c:	4622      	mov	r2, r4
 800a19e:	4653      	mov	r3, sl
 800a1a0:	a949      	add	r1, sp, #292	; 0x124
 800a1a2:	f8cd 8000 	str.w	r8, [sp]
 800a1a6:	a829      	add	r0, sp, #164	; 0xa4
 800a1a8:	f003 fdca 	bl	800dd40 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800a1ac:	4643      	mov	r3, r8
 800a1ae:	4622      	mov	r2, r4
 800a1b0:	a949      	add	r1, sp, #292	; 0x124
 800a1b2:	f8cd 9000 	str.w	r9, [sp]
 800a1b6:	a839      	add	r0, sp, #228	; 0xe4
 800a1b8:	f003 fdc2 	bl	800dd40 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800a1bc:	42af      	cmp	r7, r5
 800a1be:	bfb5      	itete	lt
 800a1c0:	2300      	movlt	r3, #0
 800a1c2:	2301      	movge	r3, #1
 800a1c4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a1c6:	930e      	strge	r3, [sp, #56]	; 0x38
 800a1c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a1ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a1ce:	af12      	add	r7, sp, #72	; 0x48
 800a1d0:	bfb9      	ittee	lt
 800a1d2:	ad29      	addlt	r5, sp, #164	; 0xa4
 800a1d4:	ac19      	addlt	r4, sp, #100	; 0x64
 800a1d6:	ad19      	addge	r5, sp, #100	; 0x64
 800a1d8:	ac29      	addge	r4, sp, #164	; 0xa4
 800a1da:	e887 0003 	stmia.w	r7, {r0, r1}
 800a1de:	b928      	cbnz	r0, 800a1ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 800a1e0:	4b80      	ldr	r3, [pc, #512]	; (800a3e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 800a1e2:	6818      	ldr	r0, [r3, #0]
 800a1e4:	6803      	ldr	r3, [r0, #0]
 800a1e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1e8:	4798      	blx	r3
 800a1ea:	6038      	str	r0, [r7, #0]
 800a1ec:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800a1ee:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800a1f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a1f6:	930c      	str	r3, [sp, #48]	; 0x30
 800a1f8:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a1fa:	6963      	ldr	r3, [r4, #20]
 800a1fc:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800a1fe:	440b      	add	r3, r1
 800a200:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800a204:	4408      	add	r0, r1
 800a206:	b200      	sxth	r0, r0
 800a208:	4283      	cmp	r3, r0
 800a20a:	900d      	str	r0, [sp, #52]	; 0x34
 800a20c:	f280 80dd 	bge.w	800a3ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 800a210:	428b      	cmp	r3, r1
 800a212:	da08      	bge.n	800a226 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800a214:	2a00      	cmp	r2, #0
 800a216:	dd06      	ble.n	800a226 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800a218:	1acb      	subs	r3, r1, r3
 800a21a:	429a      	cmp	r2, r3
 800a21c:	f2c0 80e4 	blt.w	800a3e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 800a220:	2b00      	cmp	r3, #0
 800a222:	f300 80e2 	bgt.w	800a3ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 800a226:	6967      	ldr	r7, [r4, #20]
 800a228:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a22a:	443b      	add	r3, r7
 800a22c:	461f      	mov	r7, r3
 800a22e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a230:	1bdf      	subs	r7, r3, r7
 800a232:	4297      	cmp	r7, r2
 800a234:	bfa8      	it	ge
 800a236:	4617      	movge	r7, r2
 800a238:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800a23c:	2f00      	cmp	r7, #0
 800a23e:	f340 8166 	ble.w	800a50e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 800a242:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800a244:	6829      	ldr	r1, [r5, #0]
 800a246:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a24a:	f9bb 3000 	ldrsh.w	r3, [fp]
 800a24e:	6820      	ldr	r0, [r4, #0]
 800a250:	4411      	add	r1, r2
 800a252:	4299      	cmp	r1, r3
 800a254:	dd1a      	ble.n	800a28c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800a256:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800a25a:	440b      	add	r3, r1
 800a25c:	4402      	add	r2, r0
 800a25e:	b21b      	sxth	r3, r3
 800a260:	429a      	cmp	r2, r3
 800a262:	dc13      	bgt.n	800a28c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800a264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a266:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	9206      	str	r2, [sp, #24]
 800a26c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a26e:	9205      	str	r2, [sp, #20]
 800a270:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a272:	9500      	str	r5, [sp, #0]
 800a274:	e9cd b203 	strd	fp, r2, [sp, #12]
 800a278:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800a27a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a27c:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800a280:	a912      	add	r1, sp, #72	; 0x48
 800a282:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 800a286:	aa49      	add	r2, sp, #292	; 0x124
 800a288:	4623      	mov	r3, r4
 800a28a:	47c8      	blx	r9
 800a28c:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a290:	441a      	add	r2, r3
 800a292:	6963      	ldr	r3, [r4, #20]
 800a294:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800a298:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800a29c:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 800a2a0:	68a1      	ldr	r1, [r4, #8]
 800a2a2:	ed94 6a08 	vldr	s12, [r4, #32]
 800a2a6:	6022      	str	r2, [r4, #0]
 800a2a8:	3301      	adds	r3, #1
 800a2aa:	6163      	str	r3, [r4, #20]
 800a2ac:	69a3      	ldr	r3, [r4, #24]
 800a2ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a2b2:	3b01      	subs	r3, #1
 800a2b4:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800a2b8:	61a3      	str	r3, [r4, #24]
 800a2ba:	6923      	ldr	r3, [r4, #16]
 800a2bc:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800a2c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2c4:	edd4 6a07 	vldr	s13, [r4, #28]
 800a2c8:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800a2cc:	440b      	add	r3, r1
 800a2ce:	68e1      	ldr	r1, [r4, #12]
 800a2d0:	6123      	str	r3, [r4, #16]
 800a2d2:	ee76 6a86 	vadd.f32	s13, s13, s12
 800a2d6:	428b      	cmp	r3, r1
 800a2d8:	edc4 6a07 	vstr	s13, [r4, #28]
 800a2dc:	db15      	blt.n	800a30a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 800a2de:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 800a2e2:	ee76 6a26 	vadd.f32	s13, s12, s13
 800a2e6:	3201      	adds	r2, #1
 800a2e8:	edc4 6a07 	vstr	s13, [r4, #28]
 800a2ec:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800a2f0:	6022      	str	r2, [r4, #0]
 800a2f2:	ee36 7a87 	vadd.f32	s14, s13, s14
 800a2f6:	1a5b      	subs	r3, r3, r1
 800a2f8:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800a2fc:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800a300:	6123      	str	r3, [r4, #16]
 800a302:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a306:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800a30a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a30e:	441a      	add	r2, r3
 800a310:	696b      	ldr	r3, [r5, #20]
 800a312:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 800a316:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 800a31a:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 800a31e:	68a9      	ldr	r1, [r5, #8]
 800a320:	ed95 6a08 	vldr	s12, [r5, #32]
 800a324:	602a      	str	r2, [r5, #0]
 800a326:	3301      	adds	r3, #1
 800a328:	616b      	str	r3, [r5, #20]
 800a32a:	69ab      	ldr	r3, [r5, #24]
 800a32c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a330:	3b01      	subs	r3, #1
 800a332:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 800a336:	61ab      	str	r3, [r5, #24]
 800a338:	692b      	ldr	r3, [r5, #16]
 800a33a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800a33e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a342:	edd5 6a07 	vldr	s13, [r5, #28]
 800a346:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800a34a:	440b      	add	r3, r1
 800a34c:	68e9      	ldr	r1, [r5, #12]
 800a34e:	612b      	str	r3, [r5, #16]
 800a350:	ee76 6a86 	vadd.f32	s13, s13, s12
 800a354:	428b      	cmp	r3, r1
 800a356:	edc5 6a07 	vstr	s13, [r5, #28]
 800a35a:	db15      	blt.n	800a388 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 800a35c:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 800a360:	ee76 6a26 	vadd.f32	s13, s12, s13
 800a364:	3201      	adds	r2, #1
 800a366:	edc5 6a07 	vstr	s13, [r5, #28]
 800a36a:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 800a36e:	602a      	str	r2, [r5, #0]
 800a370:	ee36 7a87 	vadd.f32	s14, s13, s14
 800a374:	1a5b      	subs	r3, r3, r1
 800a376:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800a37a:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 800a37e:	612b      	str	r3, [r5, #16]
 800a380:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a384:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800a388:	3f01      	subs	r7, #1
 800a38a:	e757      	b.n	800a23c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 800a38c:	4299      	cmp	r1, r3
 800a38e:	dc13      	bgt.n	800a3b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 800a390:	429a      	cmp	r2, r3
 800a392:	da14      	bge.n	800a3be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 800a394:	2502      	movs	r5, #2
 800a396:	2703      	movs	r7, #3
 800a398:	46a9      	mov	r9, r5
 800a39a:	f04f 0800 	mov.w	r8, #0
 800a39e:	f04f 0a01 	mov.w	sl, #1
 800a3a2:	e6ef      	b.n	800a184 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800a3a4:	2501      	movs	r5, #1
 800a3a6:	2700      	movs	r7, #0
 800a3a8:	46a9      	mov	r9, r5
 800a3aa:	46b8      	mov	r8, r7
 800a3ac:	f04f 0a02 	mov.w	sl, #2
 800a3b0:	e6e8      	b.n	800a184 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800a3b2:	2501      	movs	r5, #1
 800a3b4:	2702      	movs	r7, #2
 800a3b6:	e6e1      	b.n	800a17c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 800a3b8:	2500      	movs	r5, #0
 800a3ba:	2701      	movs	r7, #1
 800a3bc:	e7f4      	b.n	800a3a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 800a3be:	2702      	movs	r7, #2
 800a3c0:	2503      	movs	r5, #3
 800a3c2:	f04f 0900 	mov.w	r9, #0
 800a3c6:	46b8      	mov	r8, r7
 800a3c8:	e7e9      	b.n	800a39e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 800a3ca:	4613      	mov	r3, r2
 800a3cc:	e728      	b.n	800a220 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 800a3ce:	bf00      	nop
 800a3d0:	200012cc 	.word	0x200012cc
 800a3d4:	fffd8f01 	.word	0xfffd8f01
 800a3d8:	00027100 	.word	0x00027100
 800a3dc:	0004e1ff 	.word	0x0004e1ff
 800a3e0:	0004e1fe 	.word	0x0004e1fe
 800a3e4:	200012d4 	.word	0x200012d4
 800a3e8:	4613      	mov	r3, r2
 800a3ea:	992b      	ldr	r1, [sp, #172]	; 0xac
 800a3ec:	9111      	str	r1, [sp, #68]	; 0x44
 800a3ee:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 800a3f2:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 800a3f6:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800a3f8:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 800a3fc:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 800a400:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 800a404:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 800a408:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 800a40c:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800a410:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 800a414:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 800a418:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 800a41c:	469e      	mov	lr, r3
 800a41e:	469c      	mov	ip, r3
 800a420:	f04f 0900 	mov.w	r9, #0
 800a424:	f1bc 0f00 	cmp.w	ip, #0
 800a428:	d147      	bne.n	800a4ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 800a42a:	eb03 0c07 	add.w	ip, r3, r7
 800a42e:	1ad7      	subs	r7, r2, r3
 800a430:	f1b9 0f00 	cmp.w	r9, #0
 800a434:	d009      	beq.n	800a44a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 800a436:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 800a43a:	9029      	str	r0, [sp, #164]	; 0xa4
 800a43c:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 800a440:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 800a444:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 800a448:	912d      	str	r1, [sp, #180]	; 0xb4
 800a44a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800a44c:	9111      	str	r1, [sp, #68]	; 0x44
 800a44e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 800a452:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 800a456:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 800a45a:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 800a45e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 800a462:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 800a466:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 800a46a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 800a46e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 800a472:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 800a476:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 800a47a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 800a47e:	f04f 0800 	mov.w	r8, #0
 800a482:	f1be 0f00 	cmp.w	lr, #0
 800a486:	d031      	beq.n	800a4ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 800a488:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800a48a:	4431      	add	r1, r6
 800a48c:	4549      	cmp	r1, r9
 800a48e:	4450      	add	r0, sl
 800a490:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800a494:	ee37 7a04 	vadd.f32	s14, s14, s8
 800a498:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800a49c:	db08      	blt.n	800a4b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 800a49e:	ee77 7a85 	vadd.f32	s15, s15, s10
 800a4a2:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800a4a6:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a4aa:	3001      	adds	r0, #1
 800a4ac:	eba1 0109 	sub.w	r1, r1, r9
 800a4b0:	f10e 3eff 	add.w	lr, lr, #4294967295
 800a4b4:	f04f 0801 	mov.w	r8, #1
 800a4b8:	e7e3      	b.n	800a482 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 800a4ba:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800a4bc:	4431      	add	r1, r6
 800a4be:	4541      	cmp	r1, r8
 800a4c0:	4450      	add	r0, sl
 800a4c2:	ee37 7a24 	vadd.f32	s14, s14, s9
 800a4c6:	ee77 7a84 	vadd.f32	s15, s15, s8
 800a4ca:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800a4ce:	db08      	blt.n	800a4e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 800a4d0:	ee76 6a85 	vadd.f32	s13, s13, s10
 800a4d4:	ee37 7a25 	vadd.f32	s14, s14, s11
 800a4d8:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a4dc:	3001      	adds	r0, #1
 800a4de:	eba1 0108 	sub.w	r1, r1, r8
 800a4e2:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a4e6:	f04f 0901 	mov.w	r9, #1
 800a4ea:	e79b      	b.n	800a424 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 800a4ec:	449c      	add	ip, r3
 800a4ee:	1aff      	subs	r7, r7, r3
 800a4f0:	f1b8 0f00 	cmp.w	r8, #0
 800a4f4:	d009      	beq.n	800a50a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 800a4f6:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 800a4fa:	9019      	str	r0, [sp, #100]	; 0x64
 800a4fc:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 800a500:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 800a504:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 800a508:	911d      	str	r1, [sp, #116]	; 0x74
 800a50a:	1ad2      	subs	r2, r2, r3
 800a50c:	e68b      	b.n	800a226 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800a50e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a510:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800a512:	2b00      	cmp	r3, #0
 800a514:	f000 80d1 	beq.w	800a6ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 800a518:	ad19      	add	r5, sp, #100	; 0x64
 800a51a:	ac39      	add	r4, sp, #228	; 0xe4
 800a51c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800a51e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800a522:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a526:	930c      	str	r3, [sp, #48]	; 0x30
 800a528:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a52a:	6963      	ldr	r3, [r4, #20]
 800a52c:	440b      	add	r3, r1
 800a52e:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800a532:	4408      	add	r0, r1
 800a534:	b200      	sxth	r0, r0
 800a536:	4283      	cmp	r3, r0
 800a538:	900d      	str	r0, [sp, #52]	; 0x34
 800a53a:	f280 80c1 	bge.w	800a6c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 800a53e:	428b      	cmp	r3, r1
 800a540:	da08      	bge.n	800a554 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800a542:	2a00      	cmp	r2, #0
 800a544:	dd06      	ble.n	800a554 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800a546:	1acb      	subs	r3, r1, r3
 800a548:	429a      	cmp	r2, r3
 800a54a:	f2c0 80bb 	blt.w	800a6c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 800a54e:	2b00      	cmp	r3, #0
 800a550:	f300 80b9 	bgt.w	800a6c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 800a554:	6967      	ldr	r7, [r4, #20]
 800a556:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a558:	443b      	add	r3, r7
 800a55a:	461f      	mov	r7, r3
 800a55c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a55e:	1bdf      	subs	r7, r3, r7
 800a560:	4297      	cmp	r7, r2
 800a562:	bfa8      	it	ge
 800a564:	4617      	movge	r7, r2
 800a566:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800a56a:	2f00      	cmp	r7, #0
 800a56c:	f340 813c 	ble.w	800a7e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 800a570:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800a572:	6829      	ldr	r1, [r5, #0]
 800a574:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a578:	f9bb 3000 	ldrsh.w	r3, [fp]
 800a57c:	6820      	ldr	r0, [r4, #0]
 800a57e:	4411      	add	r1, r2
 800a580:	4299      	cmp	r1, r3
 800a582:	dd1a      	ble.n	800a5ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800a584:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800a588:	440b      	add	r3, r1
 800a58a:	4402      	add	r2, r0
 800a58c:	b21b      	sxth	r3, r3
 800a58e:	429a      	cmp	r2, r3
 800a590:	dc13      	bgt.n	800a5ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800a592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a594:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	9206      	str	r2, [sp, #24]
 800a59a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a59c:	9205      	str	r2, [sp, #20]
 800a59e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a5a0:	9500      	str	r5, [sp, #0]
 800a5a2:	e9cd b203 	strd	fp, r2, [sp, #12]
 800a5a6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800a5a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5aa:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800a5ae:	a912      	add	r1, sp, #72	; 0x48
 800a5b0:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 800a5b4:	aa49      	add	r2, sp, #292	; 0x124
 800a5b6:	4623      	mov	r3, r4
 800a5b8:	47c8      	blx	r9
 800a5ba:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a5be:	441a      	add	r2, r3
 800a5c0:	6963      	ldr	r3, [r4, #20]
 800a5c2:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800a5c6:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800a5ca:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 800a5ce:	68a1      	ldr	r1, [r4, #8]
 800a5d0:	ed94 6a08 	vldr	s12, [r4, #32]
 800a5d4:	6022      	str	r2, [r4, #0]
 800a5d6:	3301      	adds	r3, #1
 800a5d8:	6163      	str	r3, [r4, #20]
 800a5da:	69a3      	ldr	r3, [r4, #24]
 800a5dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a5e0:	3b01      	subs	r3, #1
 800a5e2:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800a5e6:	61a3      	str	r3, [r4, #24]
 800a5e8:	6923      	ldr	r3, [r4, #16]
 800a5ea:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800a5ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5f2:	edd4 6a07 	vldr	s13, [r4, #28]
 800a5f6:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800a5fa:	440b      	add	r3, r1
 800a5fc:	68e1      	ldr	r1, [r4, #12]
 800a5fe:	6123      	str	r3, [r4, #16]
 800a600:	ee76 6a86 	vadd.f32	s13, s13, s12
 800a604:	428b      	cmp	r3, r1
 800a606:	edc4 6a07 	vstr	s13, [r4, #28]
 800a60a:	db15      	blt.n	800a638 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 800a60c:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 800a610:	ee76 6a26 	vadd.f32	s13, s12, s13
 800a614:	3201      	adds	r2, #1
 800a616:	edc4 6a07 	vstr	s13, [r4, #28]
 800a61a:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800a61e:	6022      	str	r2, [r4, #0]
 800a620:	ee36 7a87 	vadd.f32	s14, s13, s14
 800a624:	1a5b      	subs	r3, r3, r1
 800a626:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800a62a:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800a62e:	6123      	str	r3, [r4, #16]
 800a630:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a634:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800a638:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a63c:	441a      	add	r2, r3
 800a63e:	696b      	ldr	r3, [r5, #20]
 800a640:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 800a644:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 800a648:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 800a64c:	68a9      	ldr	r1, [r5, #8]
 800a64e:	ed95 6a08 	vldr	s12, [r5, #32]
 800a652:	602a      	str	r2, [r5, #0]
 800a654:	3301      	adds	r3, #1
 800a656:	616b      	str	r3, [r5, #20]
 800a658:	69ab      	ldr	r3, [r5, #24]
 800a65a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a65e:	3b01      	subs	r3, #1
 800a660:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 800a664:	61ab      	str	r3, [r5, #24]
 800a666:	692b      	ldr	r3, [r5, #16]
 800a668:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800a66c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a670:	edd5 6a07 	vldr	s13, [r5, #28]
 800a674:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800a678:	440b      	add	r3, r1
 800a67a:	68e9      	ldr	r1, [r5, #12]
 800a67c:	612b      	str	r3, [r5, #16]
 800a67e:	ee76 6a86 	vadd.f32	s13, s13, s12
 800a682:	428b      	cmp	r3, r1
 800a684:	edc5 6a07 	vstr	s13, [r5, #28]
 800a688:	db15      	blt.n	800a6b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 800a68a:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 800a68e:	ee76 6a26 	vadd.f32	s13, s12, s13
 800a692:	3201      	adds	r2, #1
 800a694:	edc5 6a07 	vstr	s13, [r5, #28]
 800a698:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 800a69c:	602a      	str	r2, [r5, #0]
 800a69e:	ee36 7a87 	vadd.f32	s14, s13, s14
 800a6a2:	1a5b      	subs	r3, r3, r1
 800a6a4:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800a6a8:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 800a6ac:	612b      	str	r3, [r5, #16]
 800a6ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a6b2:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800a6b6:	3f01      	subs	r7, #1
 800a6b8:	e757      	b.n	800a56a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 800a6ba:	ad39      	add	r5, sp, #228	; 0xe4
 800a6bc:	ac19      	add	r4, sp, #100	; 0x64
 800a6be:	e72d      	b.n	800a51c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 800a6c0:	4613      	mov	r3, r2
 800a6c2:	e744      	b.n	800a54e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 800a6c4:	4613      	mov	r3, r2
 800a6c6:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 800a6ca:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 800a6cc:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 800a6d0:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 800a6d4:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 800a6d8:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 800a6dc:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 800a6e0:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 800a6e4:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 800a6e8:	993d      	ldr	r1, [sp, #244]	; 0xf4
 800a6ea:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 800a6ee:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 800a6f2:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 800a6f6:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 800a6fa:	960e      	str	r6, [sp, #56]	; 0x38
 800a6fc:	469e      	mov	lr, r3
 800a6fe:	461f      	mov	r7, r3
 800a700:	f04f 0900 	mov.w	r9, #0
 800a704:	2f00      	cmp	r7, #0
 800a706:	d146      	bne.n	800a796 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 800a708:	449c      	add	ip, r3
 800a70a:	1ad7      	subs	r7, r2, r3
 800a70c:	f1b9 0f00 	cmp.w	r9, #0
 800a710:	d009      	beq.n	800a726 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 800a712:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 800a716:	9039      	str	r0, [sp, #228]	; 0xe4
 800a718:	913d      	str	r1, [sp, #244]	; 0xf4
 800a71a:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 800a71e:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 800a722:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 800a726:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800a728:	910e      	str	r1, [sp, #56]	; 0x38
 800a72a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 800a72e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 800a732:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 800a736:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 800a73a:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 800a73e:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 800a742:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 800a746:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 800a74a:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 800a74e:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 800a752:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 800a756:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 800a75a:	f04f 0800 	mov.w	r8, #0
 800a75e:	f1be 0f00 	cmp.w	lr, #0
 800a762:	d030      	beq.n	800a7c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 800a764:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800a766:	4431      	add	r1, r6
 800a768:	4549      	cmp	r1, r9
 800a76a:	4450      	add	r0, sl
 800a76c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800a770:	ee37 7a04 	vadd.f32	s14, s14, s8
 800a774:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800a778:	db08      	blt.n	800a78c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 800a77a:	ee77 7a85 	vadd.f32	s15, s15, s10
 800a77e:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800a782:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a786:	3001      	adds	r0, #1
 800a788:	eba1 0109 	sub.w	r1, r1, r9
 800a78c:	f10e 3eff 	add.w	lr, lr, #4294967295
 800a790:	f04f 0801 	mov.w	r8, #1
 800a794:	e7e3      	b.n	800a75e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 800a796:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800a798:	4431      	add	r1, r6
 800a79a:	4541      	cmp	r1, r8
 800a79c:	4450      	add	r0, sl
 800a79e:	ee37 7a24 	vadd.f32	s14, s14, s9
 800a7a2:	ee77 7a84 	vadd.f32	s15, s15, s8
 800a7a6:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800a7aa:	db08      	blt.n	800a7be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 800a7ac:	ee76 6a85 	vadd.f32	s13, s13, s10
 800a7b0:	ee37 7a25 	vadd.f32	s14, s14, s11
 800a7b4:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a7b8:	3001      	adds	r0, #1
 800a7ba:	eba1 0108 	sub.w	r1, r1, r8
 800a7be:	3f01      	subs	r7, #1
 800a7c0:	f04f 0901 	mov.w	r9, #1
 800a7c4:	e79e      	b.n	800a704 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 800a7c6:	449c      	add	ip, r3
 800a7c8:	1aff      	subs	r7, r7, r3
 800a7ca:	f1b8 0f00 	cmp.w	r8, #0
 800a7ce:	d009      	beq.n	800a7e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 800a7d0:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 800a7d4:	9019      	str	r0, [sp, #100]	; 0x64
 800a7d6:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 800a7da:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 800a7de:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 800a7e2:	911d      	str	r1, [sp, #116]	; 0x74
 800a7e4:	1ad2      	subs	r2, r2, r3
 800a7e6:	e6b5      	b.n	800a554 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800a7e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	b923      	cbnz	r3, 800a7f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800a7ee:	4b04      	ldr	r3, [pc, #16]	; (800a800 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 800a7f0:	6818      	ldr	r0, [r3, #0]
 800a7f2:	6803      	ldr	r3, [r0, #0]
 800a7f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7f6:	4798      	blx	r3
 800a7f8:	b05b      	add	sp, #364	; 0x16c
 800a7fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7fe:	bf00      	nop
 800a800:	200012d4 	.word	0x200012d4

0800a804 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 800a804:	b570      	push	{r4, r5, r6, lr}
 800a806:	4604      	mov	r4, r0
 800a808:	f89d 601c 	ldrb.w	r6, [sp, #28]
 800a80c:	9805      	ldr	r0, [sp, #20]
 800a80e:	6061      	str	r1, [r4, #4]
 800a810:	2500      	movs	r5, #0
 800a812:	f89d 1010 	ldrb.w	r1, [sp, #16]
 800a816:	8263      	strh	r3, [r4, #18]
 800a818:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800a81c:	8025      	strh	r5, [r4, #0]
 800a81e:	7221      	strb	r1, [r4, #8]
 800a820:	7266      	strb	r6, [r4, #9]
 800a822:	60e0      	str	r0, [r4, #12]
 800a824:	8222      	strh	r2, [r4, #16]
 800a826:	82a3      	strh	r3, [r4, #20]
 800a828:	82e5      	strh	r5, [r4, #22]
 800a82a:	8325      	strh	r5, [r4, #24]
 800a82c:	8365      	strh	r5, [r4, #26]
 800a82e:	83a5      	strh	r5, [r4, #28]
 800a830:	83e5      	strh	r5, [r4, #30]
 800a832:	8425      	strh	r5, [r4, #32]
 800a834:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 800a838:	b32e      	cbz	r6, 800a886 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 800a83a:	6803      	ldr	r3, [r0, #0]
 800a83c:	695b      	ldr	r3, [r3, #20]
 800a83e:	4798      	blx	r3
 800a840:	4606      	mov	r6, r0
 800a842:	b300      	cbz	r0, 800a886 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 800a844:	68e0      	ldr	r0, [r4, #12]
 800a846:	6803      	ldr	r3, [r0, #0]
 800a848:	4631      	mov	r1, r6
 800a84a:	68db      	ldr	r3, [r3, #12]
 800a84c:	4798      	blx	r3
 800a84e:	4605      	mov	r5, r0
 800a850:	b1c8      	cbz	r0, 800a886 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 800a852:	7b43      	ldrb	r3, [r0, #13]
 800a854:	7a82      	ldrb	r2, [r0, #10]
 800a856:	005b      	lsls	r3, r3, #1
 800a858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a85c:	4313      	orrs	r3, r2
 800a85e:	8423      	strh	r3, [r4, #32]
 800a860:	7a63      	ldrb	r3, [r4, #9]
 800a862:	2b06      	cmp	r3, #6
 800a864:	d10f      	bne.n	800a886 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 800a866:	68e0      	ldr	r0, [r4, #12]
 800a868:	6803      	ldr	r3, [r0, #0]
 800a86a:	462a      	mov	r2, r5
 800a86c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a86e:	4631      	mov	r1, r6
 800a870:	4798      	blx	r3
 800a872:	7b6b      	ldrb	r3, [r5, #13]
 800a874:	005b      	lsls	r3, r3, #1
 800a876:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800a87a:	7aab      	ldrb	r3, [r5, #10]
 800a87c:	4313      	orrs	r3, r2
 800a87e:	4418      	add	r0, r3
 800a880:	8c23      	ldrh	r3, [r4, #32]
 800a882:	4418      	add	r0, r3
 800a884:	8420      	strh	r0, [r4, #32]
 800a886:	4620      	mov	r0, r4
 800a888:	bd70      	pop	{r4, r5, r6, pc}

0800a88a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 800a88a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a88e:	2400      	movs	r4, #0
 800a890:	b085      	sub	sp, #20
 800a892:	4681      	mov	r9, r0
 800a894:	4688      	mov	r8, r1
 800a896:	4692      	mov	sl, r2
 800a898:	469b      	mov	fp, r3
 800a89a:	4627      	mov	r7, r4
 800a89c:	4625      	mov	r5, r4
 800a89e:	4626      	mov	r6, r4
 800a8a0:	4554      	cmp	r4, sl
 800a8a2:	da2a      	bge.n	800a8fa <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	9303      	str	r3, [sp, #12]
 800a8a8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800a8ac:	429d      	cmp	r5, r3
 800a8ae:	d004      	beq.n	800a8ba <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 800a8b0:	f242 030b 	movw	r3, #8203	; 0x200b
 800a8b4:	429d      	cmp	r5, r3
 800a8b6:	bf18      	it	ne
 800a8b8:	462f      	movne	r7, r5
 800a8ba:	ab03      	add	r3, sp, #12
 800a8bc:	4642      	mov	r2, r8
 800a8be:	4659      	mov	r1, fp
 800a8c0:	4648      	mov	r0, r9
 800a8c2:	f002 ff23 	bl	800d70c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800a8c6:	4605      	mov	r5, r0
 800a8c8:	b1b8      	cbz	r0, 800a8fa <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800a8ca:	280a      	cmp	r0, #10
 800a8cc:	d015      	beq.n	800a8fa <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800a8ce:	9a03      	ldr	r2, [sp, #12]
 800a8d0:	b18a      	cbz	r2, 800a8f6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 800a8d2:	7b50      	ldrb	r0, [r2, #13]
 800a8d4:	7a93      	ldrb	r3, [r2, #10]
 800a8d6:	8895      	ldrh	r5, [r2, #4]
 800a8d8:	0040      	lsls	r0, r0, #1
 800a8da:	f400 7080 	and.w	r0, r0, #256	; 0x100
 800a8de:	4303      	orrs	r3, r0
 800a8e0:	9301      	str	r3, [sp, #4]
 800a8e2:	f8d8 3000 	ldr.w	r3, [r8]
 800a8e6:	4639      	mov	r1, r7
 800a8e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8ea:	4640      	mov	r0, r8
 800a8ec:	4798      	blx	r3
 800a8ee:	9b01      	ldr	r3, [sp, #4]
 800a8f0:	4418      	add	r0, r3
 800a8f2:	4406      	add	r6, r0
 800a8f4:	b2b6      	uxth	r6, r6
 800a8f6:	3401      	adds	r4, #1
 800a8f8:	e7d2      	b.n	800a8a0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 800a8fa:	4630      	mov	r0, r6
 800a8fc:	b005      	add	sp, #20
 800a8fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a902 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 800a902:	2a02      	cmp	r2, #2
 800a904:	b530      	push	{r4, r5, lr}
 800a906:	d011      	beq.n	800a92c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 800a908:	2a03      	cmp	r2, #3
 800a90a:	d01c      	beq.n	800a946 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 800a90c:	2a01      	cmp	r2, #1
 800a90e:	d10c      	bne.n	800a92a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800a910:	888b      	ldrh	r3, [r1, #4]
 800a912:	8801      	ldrh	r1, [r0, #0]
 800a914:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800a918:	8844      	ldrh	r4, [r0, #2]
 800a91a:	8004      	strh	r4, [r0, #0]
 800a91c:	1a5b      	subs	r3, r3, r1
 800a91e:	1a9b      	subs	r3, r3, r2
 800a920:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800a924:	8043      	strh	r3, [r0, #2]
 800a926:	8081      	strh	r1, [r0, #4]
 800a928:	80c2      	strh	r2, [r0, #6]
 800a92a:	bd30      	pop	{r4, r5, pc}
 800a92c:	88cb      	ldrh	r3, [r1, #6]
 800a92e:	8842      	ldrh	r2, [r0, #2]
 800a930:	1a9b      	subs	r3, r3, r2
 800a932:	88c2      	ldrh	r2, [r0, #6]
 800a934:	1a9b      	subs	r3, r3, r2
 800a936:	888a      	ldrh	r2, [r1, #4]
 800a938:	8801      	ldrh	r1, [r0, #0]
 800a93a:	8043      	strh	r3, [r0, #2]
 800a93c:	1a52      	subs	r2, r2, r1
 800a93e:	8881      	ldrh	r1, [r0, #4]
 800a940:	1a52      	subs	r2, r2, r1
 800a942:	8002      	strh	r2, [r0, #0]
 800a944:	e7f1      	b.n	800a92a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800a946:	88cb      	ldrh	r3, [r1, #6]
 800a948:	8841      	ldrh	r1, [r0, #2]
 800a94a:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800a94e:	f9b0 5000 	ldrsh.w	r5, [r0]
 800a952:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800a956:	8045      	strh	r5, [r0, #2]
 800a958:	1a5b      	subs	r3, r3, r1
 800a95a:	1a9b      	subs	r3, r3, r2
 800a95c:	8003      	strh	r3, [r0, #0]
 800a95e:	8082      	strh	r2, [r0, #4]
 800a960:	80c4      	strh	r4, [r0, #6]
 800a962:	e7e2      	b.n	800a92a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0800a964 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 800a964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a968:	b09f      	sub	sp, #124	; 0x7c
 800a96a:	9116      	str	r1, [sp, #88]	; 0x58
 800a96c:	9317      	str	r3, [sp, #92]	; 0x5c
 800a96e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800a970:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800a972:	8809      	ldrh	r1, [r1, #0]
 800a974:	889b      	ldrh	r3, [r3, #4]
 800a976:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 800a97a:	9212      	str	r2, [sp, #72]	; 0x48
 800a97c:	440b      	add	r3, r1
 800a97e:	b21b      	sxth	r3, r3
 800a980:	9310      	str	r3, [sp, #64]	; 0x40
 800a982:	f8d8 3000 	ldr.w	r3, [r8]
 800a986:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 800a98a:	7b19      	ldrb	r1, [r3, #12]
 800a98c:	7adb      	ldrb	r3, [r3, #11]
 800a98e:	9011      	str	r0, [sp, #68]	; 0x44
 800a990:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 800a994:	9114      	str	r1, [sp, #80]	; 0x50
 800a996:	9315      	str	r3, [sp, #84]	; 0x54
 800a998:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	; 0xa0
 800a99c:	2a00      	cmp	r2, #0
 800a99e:	d06a      	beq.n	800aa76 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 800a9a0:	f898 3010 	ldrb.w	r3, [r8, #16]
 800a9a4:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800a9a6:	2b06      	cmp	r3, #6
 800a9a8:	bf14      	ite	ne
 800a9aa:	2301      	movne	r3, #1
 800a9ac:	2302      	moveq	r3, #2
 800a9ae:	4413      	add	r3, r2
 800a9b0:	f04f 0900 	mov.w	r9, #0
 800a9b4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a9b6:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a9ba:	464c      	mov	r4, r9
 800a9bc:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 800a9c0:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	f280 808f 	bge.w	800aae8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 800a9d0:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800a9d4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800a9d8:	429c      	cmp	r4, r3
 800a9da:	d006      	beq.n	800a9ea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 800a9dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a9de:	f242 020b 	movw	r2, #8203	; 0x200b
 800a9e2:	4294      	cmp	r4, r2
 800a9e4:	bf18      	it	ne
 800a9e6:	4623      	movne	r3, r4
 800a9e8:	930d      	str	r3, [sp, #52]	; 0x34
 800a9ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a9ec:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800a9ee:	f8d8 2000 	ldr.w	r2, [r8]
 800a9f2:	428b      	cmp	r3, r1
 800a9f4:	db41      	blt.n	800aa7a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 800a9f6:	6813      	ldr	r3, [r2, #0]
 800a9f8:	4610      	mov	r0, r2
 800a9fa:	695b      	ldr	r3, [r3, #20]
 800a9fc:	4798      	blx	r3
 800a9fe:	4604      	mov	r4, r0
 800aa00:	f8d8 0000 	ldr.w	r0, [r8]
 800aa04:	6803      	ldr	r3, [r0, #0]
 800aa06:	aa1d      	add	r2, sp, #116	; 0x74
 800aa08:	689d      	ldr	r5, [r3, #8]
 800aa0a:	4621      	mov	r1, r4
 800aa0c:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 800aa10:	47a8      	blx	r5
 800aa12:	901c      	str	r0, [sp, #112]	; 0x70
 800aa14:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800aa18:	429c      	cmp	r4, r3
 800aa1a:	f000 80eb 	beq.w	800abf4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 800aa1e:	f242 030b 	movw	r3, #8203	; 0x200b
 800aa22:	429c      	cmp	r4, r3
 800aa24:	f000 80e6 	beq.w	800abf4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 800aa28:	2c00      	cmp	r4, #0
 800aa2a:	f000 80f8 	beq.w	800ac1e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2ba>
 800aa2e:	2c0a      	cmp	r4, #10
 800aa30:	d060      	beq.n	800aaf4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 800aa32:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800aa34:	b36a      	cbz	r2, 800aa92 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 800aa36:	8894      	ldrh	r4, [r2, #4]
 800aa38:	f1bb 0f00 	cmp.w	fp, #0
 800aa3c:	d03b      	beq.n	800aab6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 800aa3e:	f892 900d 	ldrb.w	r9, [r2, #13]
 800aa42:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800aa46:	f409 7380 	and.w	r3, r9, #256	; 0x100
 800aa4a:	f892 900a 	ldrb.w	r9, [r2, #10]
 800aa4e:	f1bb 0f01 	cmp.w	fp, #1
 800aa52:	ea49 0903 	orr.w	r9, r9, r3
 800aa56:	d134      	bne.n	800aac2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 800aa58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa5a:	eba6 0609 	sub.w	r6, r6, r9
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d14f      	bne.n	800ab02 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 800aa62:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aa64:	eb09 0306 	add.w	r3, r9, r6
 800aa68:	4413      	add	r3, r2
 800aa6a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800aa6c:	f9b2 2000 	ldrsh.w	r2, [r2]
 800aa70:	4293      	cmp	r3, r2
 800aa72:	da51      	bge.n	800ab18 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 800aa74:	e038      	b.n	800aae8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 800aa76:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800aa78:	e79a      	b.n	800a9b0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 800aa7a:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 800aa7e:	9301      	str	r3, [sp, #4]
 800aa80:	ab1d      	add	r3, sp, #116	; 0x74
 800aa82:	9300      	str	r3, [sp, #0]
 800aa84:	4659      	mov	r1, fp
 800aa86:	ab1c      	add	r3, sp, #112	; 0x70
 800aa88:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800aa8a:	f002 fe88 	bl	800d79e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 800aa8e:	4604      	mov	r4, r0
 800aa90:	e7c0      	b.n	800aa14 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 800aa92:	f8d8 0000 	ldr.w	r0, [r8]
 800aa96:	6803      	ldr	r3, [r0, #0]
 800aa98:	691b      	ldr	r3, [r3, #16]
 800aa9a:	4798      	blx	r3
 800aa9c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800aaa0:	4298      	cmp	r0, r3
 800aaa2:	f000 80a7 	beq.w	800abf4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 800aaa6:	f242 030b 	movw	r3, #8203	; 0x200b
 800aaaa:	4298      	cmp	r0, r3
 800aaac:	f000 80a2 	beq.w	800abf4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 800aab0:	f1bb 0f00 	cmp.w	fp, #0
 800aab4:	d100      	bne.n	800aab8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 800aab6:	444e      	add	r6, r9
 800aab8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800aaba:	2a00      	cmp	r2, #0
 800aabc:	d1bf      	bne.n	800aa3e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 800aabe:	4691      	mov	r9, r2
 800aac0:	e098      	b.n	800abf4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 800aac2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	f000 80ac 	beq.w	800ac22 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2be>
 800aaca:	f1bb 0f00 	cmp.w	fp, #0
 800aace:	d118      	bne.n	800ab02 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 800aad0:	f8d8 0000 	ldr.w	r0, [r8]
 800aad4:	990d      	ldr	r1, [sp, #52]	; 0x34
 800aad6:	6803      	ldr	r3, [r0, #0]
 800aad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aada:	4798      	blx	r3
 800aadc:	4406      	add	r6, r0
 800aade:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aae0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aae2:	1af3      	subs	r3, r6, r3
 800aae4:	4293      	cmp	r3, r2
 800aae6:	dd17      	ble.n	800ab18 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 800aae8:	2c00      	cmp	r4, #0
 800aaea:	f000 8098 	beq.w	800ac1e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2ba>
 800aaee:	2c0a      	cmp	r4, #10
 800aaf0:	f040 8086 	bne.w	800ac00 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 800aaf4:	240a      	movs	r4, #10
 800aaf6:	fab4 f084 	clz	r0, r4
 800aafa:	0940      	lsrs	r0, r0, #5
 800aafc:	b01f      	add	sp, #124	; 0x7c
 800aafe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab02:	f8d8 0000 	ldr.w	r0, [r8]
 800ab06:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ab08:	6803      	ldr	r3, [r0, #0]
 800ab0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab0c:	4798      	blx	r3
 800ab0e:	f1bb 0f01 	cmp.w	fp, #1
 800ab12:	eba6 0600 	sub.w	r6, r6, r0
 800ab16:	d0a4      	beq.n	800aa62 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 800ab18:	981c      	ldr	r0, [sp, #112]	; 0x70
 800ab1a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800ab1c:	f990 1009 	ldrsb.w	r1, [r0, #9]
 800ab20:	f9b3 7000 	ldrsh.w	r7, [r3]
 800ab24:	7b43      	ldrb	r3, [r0, #13]
 800ab26:	015b      	lsls	r3, r3, #5
 800ab28:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800ab2c:	7983      	ldrb	r3, [r0, #6]
 800ab2e:	4431      	add	r1, r6
 800ab30:	4313      	orrs	r3, r2
 800ab32:	440b      	add	r3, r1
 800ab34:	42bb      	cmp	r3, r7
 800ab36:	db5d      	blt.n	800abf4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 800ab38:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ab3a:	4299      	cmp	r1, r3
 800ab3c:	da5a      	bge.n	800abf4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 800ab3e:	f8d8 0000 	ldr.w	r0, [r8]
 800ab42:	6803      	ldr	r3, [r0, #0]
 800ab44:	42b7      	cmp	r7, r6
 800ab46:	bfc8      	it	gt
 800ab48:	1bbf      	subgt	r7, r7, r6
 800ab4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab4c:	bfcc      	ite	gt
 800ab4e:	b2bf      	uxthgt	r7, r7
 800ab50:	2700      	movle	r7, #0
 800ab52:	4798      	blx	r3
 800ab54:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ab56:	7b5a      	ldrb	r2, [r3, #13]
 800ab58:	00d1      	lsls	r1, r2, #3
 800ab5a:	f401 7580 	and.w	r5, r1, #256	; 0x100
 800ab5e:	7a19      	ldrb	r1, [r3, #8]
 800ab60:	4329      	orrs	r1, r5
 800ab62:	0655      	lsls	r5, r2, #25
 800ab64:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800ab66:	bf44      	itt	mi
 800ab68:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 800ab6c:	b209      	sxthmi	r1, r1
 800ab6e:	1945      	adds	r5, r0, r5
 800ab70:	1a6d      	subs	r5, r5, r1
 800ab72:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800ab74:	b2ad      	uxth	r5, r5
 800ab76:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800ab7a:	fa0f fa85 	sxth.w	sl, r5
 800ab7e:	4551      	cmp	r1, sl
 800ab80:	dd3c      	ble.n	800abfc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 800ab82:	0112      	lsls	r2, r2, #4
 800ab84:	79d8      	ldrb	r0, [r3, #7]
 800ab86:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800ab8a:	4302      	orrs	r2, r0
 800ab8c:	4492      	add	sl, r2
 800ab8e:	4551      	cmp	r1, sl
 800ab90:	dc30      	bgt.n	800abf4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 800ab92:	1b4d      	subs	r5, r1, r5
 800ab94:	b22d      	sxth	r5, r5
 800ab96:	468a      	mov	sl, r1
 800ab98:	9319      	str	r3, [sp, #100]	; 0x64
 800ab9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab9c:	f8d8 0000 	ldr.w	r0, [r8]
 800aba0:	681a      	ldr	r2, [r3, #0]
 800aba2:	6801      	ldr	r1, [r0, #0]
 800aba4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800aba6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800aba8:	9313      	str	r3, [sp, #76]	; 0x4c
 800abaa:	9218      	str	r2, [sp, #96]	; 0x60
 800abac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800abae:	4788      	blx	r1
 800abb0:	f898 1006 	ldrb.w	r1, [r8, #6]
 800abb4:	910b      	str	r1, [sp, #44]	; 0x2c
 800abb6:	f898 100e 	ldrb.w	r1, [r8, #14]
 800abba:	910a      	str	r1, [sp, #40]	; 0x28
 800abbc:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 800abc0:	9109      	str	r1, [sp, #36]	; 0x24
 800abc2:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800abc6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800abc8:	9305      	str	r3, [sp, #20]
 800abca:	b2ad      	uxth	r5, r5
 800abcc:	e9cd 0107 	strd	r0, r1, [sp, #28]
 800abd0:	e9cd 7502 	strd	r7, r5, [sp, #8]
 800abd4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800abd6:	9304      	str	r3, [sp, #16]
 800abd8:	4437      	add	r7, r6
 800abda:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800abdc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800abde:	9206      	str	r2, [sp, #24]
 800abe0:	b23f      	sxth	r7, r7
 800abe2:	f8cd a004 	str.w	sl, [sp, #4]
 800abe6:	9700      	str	r7, [sp, #0]
 800abe8:	681a      	ldr	r2, [r3, #0]
 800abea:	9916      	ldr	r1, [sp, #88]	; 0x58
 800abec:	685b      	ldr	r3, [r3, #4]
 800abee:	9811      	ldr	r0, [sp, #68]	; 0x44
 800abf0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800abf2:	47a8      	blx	r5
 800abf4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800abf6:	3301      	adds	r3, #1
 800abf8:	930e      	str	r3, [sp, #56]	; 0x38
 800abfa:	e6e1      	b.n	800a9c0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 800abfc:	2500      	movs	r5, #0
 800abfe:	e7cb      	b.n	800ab98 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x234>
 800ac00:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800ac02:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ac04:	3501      	adds	r5, #1
 800ac06:	429d      	cmp	r5, r3
 800ac08:	f6bf af75 	bge.w	800aaf6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 800ac0c:	4659      	mov	r1, fp
 800ac0e:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800ac10:	f7fb fc6e 	bl	80064f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800ac14:	4604      	mov	r4, r0
 800ac16:	b110      	cbz	r0, 800ac1e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2ba>
 800ac18:	280a      	cmp	r0, #10
 800ac1a:	d1f2      	bne.n	800ac02 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29e>
 800ac1c:	e76a      	b.n	800aaf4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 800ac1e:	2400      	movs	r4, #0
 800ac20:	e769      	b.n	800aaf6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 800ac22:	f1bb 0f00 	cmp.w	fp, #0
 800ac26:	f43f af5a 	beq.w	800aade <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 800ac2a:	e775      	b.n	800ab18 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

0800ac2c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 800ac2c:	b530      	push	{r4, r5, lr}
 800ac2e:	8ac4      	ldrh	r4, [r0, #22]
 800ac30:	8b45      	ldrh	r5, [r0, #26]
 800ac32:	8343      	strh	r3, [r0, #26]
 800ac34:	442c      	add	r4, r5
 800ac36:	1ae4      	subs	r4, r4, r3
 800ac38:	82c4      	strh	r4, [r0, #22]
 800ac3a:	8b83      	ldrh	r3, [r0, #28]
 800ac3c:	8b04      	ldrh	r4, [r0, #24]
 800ac3e:	4422      	add	r2, r4
 800ac40:	440c      	add	r4, r1
 800ac42:	1a59      	subs	r1, r3, r1
 800ac44:	83c2      	strh	r2, [r0, #30]
 800ac46:	8304      	strh	r4, [r0, #24]
 800ac48:	8381      	strh	r1, [r0, #28]
 800ac4a:	bd30      	pop	{r4, r5, pc}

0800ac4c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 800ac4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac50:	4604      	mov	r4, r0
 800ac52:	8a47      	ldrh	r7, [r0, #18]
 800ac54:	68c0      	ldr	r0, [r0, #12]
 800ac56:	6803      	ldr	r3, [r0, #0]
 800ac58:	b085      	sub	sp, #20
 800ac5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac5c:	4798      	blx	r3
 800ac5e:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 800ac62:	7a63      	ldrb	r3, [r4, #9]
 800ac64:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 800ac68:	42b7      	cmp	r7, r6
 800ac6a:	f103 33ff 	add.w	r3, r3, #4294967295
 800ac6e:	bfac      	ite	ge
 800ac70:	f04f 0900 	movge.w	r9, #0
 800ac74:	f04f 0901 	movlt.w	r9, #1
 800ac78:	2b05      	cmp	r3, #5
 800ac7a:	d804      	bhi.n	800ac86 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3a>
 800ac7c:	e8df f003 	tbb	[pc, r3]
 800ac80:	470e0854 	.word	0x470e0854
 800ac84:	4c4c      	.short	0x4c4c
 800ac86:	2500      	movs	r5, #0
 800ac88:	46a9      	mov	r9, r5
 800ac8a:	462e      	mov	r6, r5
 800ac8c:	462f      	mov	r7, r5
 800ac8e:	e00d      	b.n	800acac <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 800ac90:	42b7      	cmp	r7, r6
 800ac92:	bfb4      	ite	lt
 800ac94:	2600      	movlt	r6, #0
 800ac96:	2601      	movge	r6, #1
 800ac98:	2500      	movs	r5, #0
 800ac9a:	e7f7      	b.n	800ac8c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x40>
 800ac9c:	42b7      	cmp	r7, r6
 800ac9e:	464d      	mov	r5, r9
 800aca0:	f04f 0900 	mov.w	r9, #0
 800aca4:	bfb4      	ite	lt
 800aca6:	2600      	movlt	r6, #0
 800aca8:	2601      	movge	r6, #1
 800acaa:	464f      	mov	r7, r9
 800acac:	f04f 0800 	mov.w	r8, #0
 800acb0:	f8a4 8016 	strh.w	r8, [r4, #22]
 800acb4:	f8a4 8018 	strh.w	r8, [r4, #24]
 800acb8:	f8cd 8004 	str.w	r8, [sp, #4]
 800acbc:	2300      	movs	r3, #0
 800acbe:	9303      	str	r3, [sp, #12]
 800acc0:	8823      	ldrh	r3, [r4, #0]
 800acc2:	2b20      	cmp	r3, #32
 800acc4:	d034      	beq.n	800ad30 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe4>
 800acc6:	f242 010b 	movw	r1, #8203	; 0x200b
 800acca:	1a5a      	subs	r2, r3, r1
 800accc:	f1d2 0a00 	rsbs	sl, r2, #0
 800acd0:	eb4a 0a02 	adc.w	sl, sl, r2
 800acd4:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 800acd8:	4293      	cmp	r3, r2
 800acda:	d009      	beq.n	800acf0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa4>
 800acdc:	428b      	cmp	r3, r1
 800acde:	9a01      	ldr	r2, [sp, #4]
 800ace0:	bf18      	it	ne
 800ace2:	461a      	movne	r2, r3
 800ace4:	9201      	str	r2, [sp, #4]
 800ace6:	bf0c      	ite	eq
 800ace8:	f04f 0a01 	moveq.w	sl, #1
 800acec:	f04f 0a00 	movne.w	sl, #0
 800acf0:	ab03      	add	r3, sp, #12
 800acf2:	68e2      	ldr	r2, [r4, #12]
 800acf4:	7a21      	ldrb	r1, [r4, #8]
 800acf6:	6860      	ldr	r0, [r4, #4]
 800acf8:	f002 fd08 	bl	800d70c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800acfc:	8020      	strh	r0, [r4, #0]
 800acfe:	b9d8      	cbnz	r0, 800ad38 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xec>
 800ad00:	8ba2      	ldrh	r2, [r4, #28]
 800ad02:	2300      	movs	r3, #0
 800ad04:	4611      	mov	r1, r2
 800ad06:	4620      	mov	r0, r4
 800ad08:	f7ff ff90 	bl	800ac2c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800ad0c:	e06e      	b.n	800adec <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1a0>
 800ad0e:	2500      	movs	r5, #0
 800ad10:	46a9      	mov	r9, r5
 800ad12:	462e      	mov	r6, r5
 800ad14:	2701      	movs	r7, #1
 800ad16:	e7c9      	b.n	800acac <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 800ad18:	42b7      	cmp	r7, r6
 800ad1a:	f04f 0500 	mov.w	r5, #0
 800ad1e:	bfb4      	ite	lt
 800ad20:	2700      	movlt	r7, #0
 800ad22:	2701      	movge	r7, #1
 800ad24:	462e      	mov	r6, r5
 800ad26:	e7c1      	b.n	800acac <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 800ad28:	2500      	movs	r5, #0
 800ad2a:	46a9      	mov	r9, r5
 800ad2c:	2601      	movs	r6, #1
 800ad2e:	e7ad      	b.n	800ac8c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x40>
 800ad30:	9301      	str	r3, [sp, #4]
 800ad32:	f04f 0a01 	mov.w	sl, #1
 800ad36:	e7db      	b.n	800acf0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa4>
 800ad38:	8b63      	ldrh	r3, [r4, #26]
 800ad3a:	280a      	cmp	r0, #10
 800ad3c:	f103 0301 	add.w	r3, r3, #1
 800ad40:	8363      	strh	r3, [r4, #26]
 800ad42:	d0dd      	beq.n	800ad00 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb4>
 800ad44:	9a03      	ldr	r2, [sp, #12]
 800ad46:	bb62      	cbnz	r2, 800ada2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x156>
 800ad48:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800ad4c:	4298      	cmp	r0, r3
 800ad4e:	d003      	beq.n	800ad58 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10c>
 800ad50:	f242 030b 	movw	r3, #8203	; 0x200b
 800ad54:	4298      	cmp	r0, r3
 800ad56:	d1b1      	bne.n	800acbc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800ad58:	8823      	ldrh	r3, [r4, #0]
 800ad5a:	8ba1      	ldrh	r1, [r4, #28]
 800ad5c:	2b20      	cmp	r3, #32
 800ad5e:	d003      	beq.n	800ad68 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11c>
 800ad60:	f242 000b 	movw	r0, #8203	; 0x200b
 800ad64:	4283      	cmp	r3, r0
 800ad66:	d131      	bne.n	800adcc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x180>
 800ad68:	f1ba 0f00 	cmp.w	sl, #0
 800ad6c:	bf0a      	itet	eq
 800ad6e:	4688      	moveq	r8, r1
 800ad70:	4650      	movne	r0, sl
 800ad72:	2001      	moveq	r0, #1
 800ad74:	440a      	add	r2, r1
 800ad76:	8b23      	ldrh	r3, [r4, #24]
 800ad78:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 800ad7c:	b292      	uxth	r2, r2
 800ad7e:	83a2      	strh	r2, [r4, #28]
 800ad80:	4413      	add	r3, r2
 800ad82:	f1b9 0f00 	cmp.w	r9, #0
 800ad86:	d102      	bne.n	800ad8e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x142>
 800ad88:	2d00      	cmp	r5, #0
 800ad8a:	d042      	beq.n	800ae12 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c6>
 800ad8c:	b300      	cbz	r0, 800add0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x184>
 800ad8e:	8c21      	ldrh	r1, [r4, #32]
 800ad90:	4419      	add	r1, r3
 800ad92:	458c      	cmp	ip, r1
 800ad94:	da37      	bge.n	800ae06 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ba>
 800ad96:	8ae1      	ldrh	r1, [r4, #22]
 800ad98:	2900      	cmp	r1, #0
 800ad9a:	d034      	beq.n	800ae06 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ba>
 800ad9c:	4563      	cmp	r3, ip
 800ad9e:	dd8d      	ble.n	800acbc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800ada0:	e01d      	b.n	800adde <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x192>
 800ada2:	8893      	ldrh	r3, [r2, #4]
 800ada4:	8023      	strh	r3, [r4, #0]
 800ada6:	f892 b00d 	ldrb.w	fp, [r2, #13]
 800adaa:	9901      	ldr	r1, [sp, #4]
 800adac:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 800adb0:	f40b 7080 	and.w	r0, fp, #256	; 0x100
 800adb4:	f892 b00a 	ldrb.w	fp, [r2, #10]
 800adb8:	ea4b 0b00 	orr.w	fp, fp, r0
 800adbc:	68e0      	ldr	r0, [r4, #12]
 800adbe:	6803      	ldr	r3, [r0, #0]
 800adc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adc2:	4798      	blx	r3
 800adc4:	eb0b 0200 	add.w	r2, fp, r0
 800adc8:	b292      	uxth	r2, r2
 800adca:	e7c5      	b.n	800ad58 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10c>
 800adcc:	2000      	movs	r0, #0
 800adce:	e7d1      	b.n	800ad74 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x128>
 800add0:	4563      	cmp	r3, ip
 800add2:	f77f af73 	ble.w	800acbc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800add6:	8ae3      	ldrh	r3, [r4, #22]
 800add8:	2b00      	cmp	r3, #0
 800adda:	f43f af6f 	beq.w	800acbc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800adde:	2301      	movs	r3, #1
 800ade0:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 800ade4:	8c22      	ldrh	r2, [r4, #32]
 800ade6:	8be3      	ldrh	r3, [r4, #30]
 800ade8:	4413      	add	r3, r2
 800adea:	83e3      	strh	r3, [r4, #30]
 800adec:	68e0      	ldr	r0, [r4, #12]
 800adee:	6803      	ldr	r3, [r0, #0]
 800adf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adf2:	4798      	blx	r3
 800adf4:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800adf8:	4418      	add	r0, r3
 800adfa:	8a63      	ldrh	r3, [r4, #18]
 800adfc:	1a18      	subs	r0, r3, r0
 800adfe:	8260      	strh	r0, [r4, #18]
 800ae00:	b005      	add	sp, #20
 800ae02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae06:	2300      	movs	r3, #0
 800ae08:	4611      	mov	r1, r2
 800ae0a:	4620      	mov	r0, r4
 800ae0c:	f7ff ff0e 	bl	800ac2c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800ae10:	e754      	b.n	800acbc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800ae12:	4563      	cmp	r3, ip
 800ae14:	dd14      	ble.n	800ae40 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f4>
 800ae16:	b117      	cbz	r7, 800ae1e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d2>
 800ae18:	2301      	movs	r3, #1
 800ae1a:	460a      	mov	r2, r1
 800ae1c:	e772      	b.n	800ad04 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 800ae1e:	2e00      	cmp	r6, #0
 800ae20:	f43f af4c 	beq.w	800acbc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800ae24:	2800      	cmp	r0, #0
 800ae26:	f47f af49 	bne.w	800acbc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800ae2a:	f1ba 0f00 	cmp.w	sl, #0
 800ae2e:	d002      	beq.n	800ae36 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ea>
 800ae30:	2301      	movs	r3, #1
 800ae32:	4642      	mov	r2, r8
 800ae34:	e767      	b.n	800ad06 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xba>
 800ae36:	8ae3      	ldrh	r3, [r4, #22]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	f43f af3f 	beq.w	800acbc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800ae3e:	e7d5      	b.n	800adec <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1a0>
 800ae40:	2800      	cmp	r0, #0
 800ae42:	f47f af3b 	bne.w	800acbc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800ae46:	f1ba 0f00 	cmp.w	sl, #0
 800ae4a:	f43f af37 	beq.w	800acbc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800ae4e:	2301      	movs	r3, #1
 800ae50:	4642      	mov	r2, r8
 800ae52:	e7da      	b.n	800ae0a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1be>

0800ae54 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 800ae54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae56:	4605      	mov	r5, r0
 800ae58:	b08f      	sub	sp, #60	; 0x3c
 800ae5a:	4617      	mov	r7, r2
 800ae5c:	461c      	mov	r4, r3
 800ae5e:	460e      	mov	r6, r1
 800ae60:	b1d1      	cbz	r1, 800ae98 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	4620      	mov	r0, r4
 800ae66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae68:	4798      	blx	r3
 800ae6a:	4240      	negs	r0, r0
 800ae6c:	b200      	sxth	r0, r0
 800ae6e:	e9cd 4001 	strd	r4, r0, [sp, #4]
 800ae72:	9603      	str	r6, [sp, #12]
 800ae74:	9700      	str	r7, [sp, #0]
 800ae76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ae7a:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 800ae7e:	4629      	mov	r1, r5
 800ae80:	a805      	add	r0, sp, #20
 800ae82:	f7ff fcbf 	bl	800a804 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 800ae86:	2401      	movs	r4, #1
 800ae88:	a805      	add	r0, sp, #20
 800ae8a:	f7ff fedf 	bl	800ac4c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 800ae8e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800ae92:	b163      	cbz	r3, 800aeae <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 800ae94:	3401      	adds	r4, #1
 800ae96:	e7f7      	b.n	800ae88 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 800ae98:	f002 fd06 	bl	800d8a8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800ae9c:	2401      	movs	r4, #1
 800ae9e:	280a      	cmp	r0, #10
 800aea0:	4628      	mov	r0, r5
 800aea2:	bf08      	it	eq
 800aea4:	3401      	addeq	r4, #1
 800aea6:	f002 fcff 	bl	800d8a8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800aeaa:	2800      	cmp	r0, #0
 800aeac:	d1f7      	bne.n	800ae9e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 800aeae:	b2a0      	uxth	r0, r4
 800aeb0:	b00f      	add	sp, #60	; 0x3c
 800aeb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aeb4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 800aeb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeb8:	b0e3      	sub	sp, #396	; 0x18c
 800aeba:	461c      	mov	r4, r3
 800aebc:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
 800aebe:	4683      	mov	fp, r0
 800aec0:	4688      	mov	r8, r1
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	f000 810f 	beq.w	800b0e6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 800aec8:	6823      	ldr	r3, [r4, #0]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	f000 810b 	beq.w	800b0e6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 800aed0:	7ba3      	ldrb	r3, [r4, #14]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	f000 8107 	beq.w	800b0e6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 800aed8:	6810      	ldr	r0, [r2, #0]
 800aeda:	6851      	ldr	r1, [r2, #4]
 800aedc:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 800aee0:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 800aee4:	ad0a      	add	r5, sp, #40	; 0x28
 800aee6:	462b      	mov	r3, r5
 800aee8:	c303      	stmia	r3!, {r0, r1}
 800aeea:	2100      	movs	r1, #0
 800aeec:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 800aef0:	910c      	str	r1, [sp, #48]	; 0x30
 800aef2:	79a2      	ldrb	r2, [r4, #6]
 800aef4:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800aef8:	a90c      	add	r1, sp, #48	; 0x30
 800aefa:	4628      	mov	r0, r5
 800aefc:	f7ff fd01 	bl	800a902 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800af00:	a90c      	add	r1, sp, #48	; 0x30
 800af02:	4608      	mov	r0, r1
 800af04:	79a2      	ldrb	r2, [r4, #6]
 800af06:	f7ff fcfc 	bl	800a902 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800af0a:	a817      	add	r0, sp, #92	; 0x5c
 800af0c:	f002 f8a0 	bl	800d050 <_ZN8touchgfx12TextProviderC1Ev>
 800af10:	6820      	ldr	r0, [r4, #0]
 800af12:	6803      	ldr	r3, [r0, #0]
 800af14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af16:	4798      	blx	r3
 800af18:	4606      	mov	r6, r0
 800af1a:	6820      	ldr	r0, [r4, #0]
 800af1c:	6803      	ldr	r3, [r0, #0]
 800af1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af20:	4798      	blx	r3
 800af22:	4633      	mov	r3, r6
 800af24:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 800af26:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 800af28:	9000      	str	r0, [sp, #0]
 800af2a:	a817      	add	r0, sp, #92	; 0x5c
 800af2c:	f002 f8eb 	bl	800d106 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800af30:	6820      	ldr	r0, [r4, #0]
 800af32:	f894 a004 	ldrb.w	sl, [r4, #4]
 800af36:	6803      	ldr	r3, [r0, #0]
 800af38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af3a:	4798      	blx	r3
 800af3c:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 800af40:	6823      	ldr	r3, [r4, #0]
 800af42:	4607      	mov	r7, r0
 800af44:	4406      	add	r6, r0
 800af46:	a830      	add	r0, sp, #192	; 0xc0
 800af48:	f893 9009 	ldrb.w	r9, [r3, #9]
 800af4c:	f002 f880 	bl	800d050 <_ZN8touchgfx12TextProviderC1Ev>
 800af50:	7c23      	ldrb	r3, [r4, #16]
 800af52:	b17b      	cbz	r3, 800af74 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 800af54:	6820      	ldr	r0, [r4, #0]
 800af56:	6803      	ldr	r3, [r0, #0]
 800af58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af5a:	4798      	blx	r3
 800af5c:	9009      	str	r0, [sp, #36]	; 0x24
 800af5e:	6820      	ldr	r0, [r4, #0]
 800af60:	6802      	ldr	r2, [r0, #0]
 800af62:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800af64:	4790      	blx	r2
 800af66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af68:	9000      	str	r0, [sp, #0]
 800af6a:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 800af6c:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 800af6e:	a830      	add	r0, sp, #192	; 0xc0
 800af70:	f002 f8c9 	bl	800d106 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800af74:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 800af78:	7be2      	ldrb	r2, [r4, #15]
 800af7a:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800af7e:	1a8a      	subs	r2, r1, r2
 800af80:	7c21      	ldrb	r1, [r4, #16]
 800af82:	9103      	str	r1, [sp, #12]
 800af84:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 800af88:	9102      	str	r1, [sp, #8]
 800af8a:	6821      	ldr	r1, [r4, #0]
 800af8c:	9101      	str	r1, [sp, #4]
 800af8e:	7961      	ldrb	r1, [r4, #5]
 800af90:	9100      	str	r1, [sp, #0]
 800af92:	b292      	uxth	r2, r2
 800af94:	a930      	add	r1, sp, #192	; 0xc0
 800af96:	a80e      	add	r0, sp, #56	; 0x38
 800af98:	f7ff fc34 	bl	800a804 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 800af9c:	2e00      	cmp	r6, #0
 800af9e:	dc5b      	bgt.n	800b058 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 800afa0:	af17      	add	r7, sp, #92	; 0x5c
 800afa2:	f04f 0900 	mov.w	r9, #0
 800afa6:	7c23      	ldrb	r3, [r4, #16]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	f000 80ae 	beq.w	800b10a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 800afae:	a80e      	add	r0, sp, #56	; 0x38
 800afb0:	f7ff fe4c 	bl	800ac4c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 800afb4:	f1ba 0f00 	cmp.w	sl, #0
 800afb8:	f000 80a2 	beq.w	800b100 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
 800afbc:	7c23      	ldrb	r3, [r4, #16]
 800afbe:	9309      	str	r3, [sp, #36]	; 0x24
 800afc0:	2264      	movs	r2, #100	; 0x64
 800afc2:	4639      	mov	r1, r7
 800afc4:	a849      	add	r0, sp, #292	; 0x124
 800afc6:	f004 fd03 	bl	800f9d0 <memcpy>
 800afca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afcc:	2b00      	cmp	r3, #0
 800afce:	f000 80a4 	beq.w	800b11a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
 800afd2:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 800afd6:	7922      	ldrb	r2, [r4, #4]
 800afd8:	2a01      	cmp	r2, #1
 800afda:	f040 8087 	bne.w	800b0ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 800afde:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
 800afe2:	1ac0      	subs	r0, r0, r3
 800afe4:	2302      	movs	r3, #2
 800afe6:	fb90 f0f3 	sdiv	r0, r0, r3
 800afea:	b200      	sxth	r0, r0
 800afec:	7c23      	ldrb	r3, [r4, #16]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	f000 8088 	beq.w	800b104 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x250>
 800aff4:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 800aff8:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
 800affc:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 800b000:	e9cd 2105 	strd	r2, r1, [sp, #20]
 800b004:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 800b008:	4410      	add	r0, r2
 800b00a:	b200      	sxth	r0, r0
 800b00c:	9000      	str	r0, [sp, #0]
 800b00e:	e9cd 9703 	strd	r9, r7, [sp, #12]
 800b012:	e9cd 5401 	strd	r5, r4, [sp, #4]
 800b016:	4642      	mov	r2, r8
 800b018:	2100      	movs	r1, #0
 800b01a:	4658      	mov	r0, fp
 800b01c:	f7ff fca2 	bl	800a964 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 800b020:	2800      	cmp	r0, #0
 800b022:	d160      	bne.n	800b0e6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 800b024:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 800b028:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 800b02c:	b2b2      	uxth	r2, r6
 800b02e:	4413      	add	r3, r2
 800b030:	1a8a      	subs	r2, r1, r2
 800b032:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 800b036:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
 800b03a:	b21b      	sxth	r3, r3
 800b03c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 800b040:	2a00      	cmp	r2, #0
 800b042:	d150      	bne.n	800b0e6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 800b044:	6822      	ldr	r2, [r4, #0]
 800b046:	8869      	ldrh	r1, [r5, #2]
 800b048:	7a12      	ldrb	r2, [r2, #8]
 800b04a:	1a9b      	subs	r3, r3, r2
 800b04c:	88ea      	ldrh	r2, [r5, #6]
 800b04e:	440a      	add	r2, r1
 800b050:	b212      	sxth	r2, r2
 800b052:	4293      	cmp	r3, r2
 800b054:	dda7      	ble.n	800afa6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 800b056:	e046      	b.n	800b0e6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 800b058:	7c23      	ldrb	r3, [r4, #16]
 800b05a:	444f      	add	r7, r9
 800b05c:	b1c3      	cbz	r3, 800b090 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 800b05e:	f64f 79ff 	movw	r9, #65535	; 0xffff
 800b062:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 800b066:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800b06a:	443b      	add	r3, r7
 800b06c:	4293      	cmp	r3, r2
 800b06e:	da97      	bge.n	800afa0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 800b070:	a80e      	add	r0, sp, #56	; 0x38
 800b072:	f7ff fdeb 	bl	800ac4c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 800b076:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 800b07a:	3b01      	subs	r3, #1
 800b07c:	b29b      	uxth	r3, r3
 800b07e:	454b      	cmp	r3, r9
 800b080:	9309      	str	r3, [sp, #36]	; 0x24
 800b082:	d021      	beq.n	800b0c8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 800b084:	7961      	ldrb	r1, [r4, #5]
 800b086:	a817      	add	r0, sp, #92	; 0x5c
 800b088:	f7fb fa32 	bl	80064f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800b08c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b08e:	e7f4      	b.n	800b07a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 800b090:	fa1f f986 	uxth.w	r9, r6
 800b094:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 800b098:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800b09c:	443b      	add	r3, r7
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	f6bf af7e 	bge.w	800afa0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 800b0a4:	a817      	add	r0, sp, #92	; 0x5c
 800b0a6:	f002 fbff 	bl	800d8a8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800b0aa:	b1e0      	cbz	r0, 800b0e6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 800b0ac:	280a      	cmp	r0, #10
 800b0ae:	d1f1      	bne.n	800b094 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 800b0b0:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 800b0b4:	444b      	add	r3, r9
 800b0b6:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 800b0ba:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800b0be:	eba3 0309 	sub.w	r3, r3, r9
 800b0c2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800b0c6:	e7e5      	b.n	800b094 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 800b0c8:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 800b0cc:	b2b3      	uxth	r3, r6
 800b0ce:	441a      	add	r2, r3
 800b0d0:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 800b0d4:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 800b0d8:	1ad3      	subs	r3, r2, r3
 800b0da:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800b0de:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d1bd      	bne.n	800b062 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 800b0e6:	b063      	add	sp, #396	; 0x18c
 800b0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0ec:	2a02      	cmp	r2, #2
 800b0ee:	d105      	bne.n	800b0fc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 800b0f0:	7be2      	ldrb	r2, [r4, #15]
 800b0f2:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 800b0f6:	1a80      	subs	r0, r0, r2
 800b0f8:	1ac0      	subs	r0, r0, r3
 800b0fa:	e776      	b.n	800afea <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 800b0fc:	2000      	movs	r0, #0
 800b0fe:	e775      	b.n	800afec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 800b100:	7be0      	ldrb	r0, [r4, #15]
 800b102:	e773      	b.n	800afec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 800b104:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b108:	e776      	b.n	800aff8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 800b10a:	f1ba 0f00 	cmp.w	sl, #0
 800b10e:	d0f7      	beq.n	800b100 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
 800b110:	2264      	movs	r2, #100	; 0x64
 800b112:	4639      	mov	r1, r7
 800b114:	a849      	add	r0, sp, #292	; 0x124
 800b116:	f004 fc5b 	bl	800f9d0 <memcpy>
 800b11a:	2300      	movs	r3, #0
 800b11c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b120:	6821      	ldr	r1, [r4, #0]
 800b122:	a849      	add	r0, sp, #292	; 0x124
 800b124:	f7ff fbb1 	bl	800a88a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 800b128:	b203      	sxth	r3, r0
 800b12a:	e754      	b.n	800afd6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

0800b12c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 800b12c:	2b03      	cmp	r3, #3
 800b12e:	d818      	bhi.n	800b162 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 800b130:	e8df f003 	tbb	[pc, r3]
 800b134:	130d0602 	.word	0x130d0602
 800b138:	f9b0 2000 	ldrsh.w	r2, [r0]
 800b13c:	1850      	adds	r0, r2, r1
 800b13e:	4770      	bx	lr
 800b140:	8803      	ldrh	r3, [r0, #0]
 800b142:	8880      	ldrh	r0, [r0, #4]
 800b144:	4418      	add	r0, r3
 800b146:	b200      	sxth	r0, r0
 800b148:	1a80      	subs	r0, r0, r2
 800b14a:	3801      	subs	r0, #1
 800b14c:	4770      	bx	lr
 800b14e:	8803      	ldrh	r3, [r0, #0]
 800b150:	8880      	ldrh	r0, [r0, #4]
 800b152:	4418      	add	r0, r3
 800b154:	b200      	sxth	r0, r0
 800b156:	1a40      	subs	r0, r0, r1
 800b158:	e7f7      	b.n	800b14a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 800b15a:	f9b0 0000 	ldrsh.w	r0, [r0]
 800b15e:	4410      	add	r0, r2
 800b160:	4770      	bx	lr
 800b162:	2000      	movs	r0, #0
 800b164:	4770      	bx	lr

0800b166 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 800b166:	2b03      	cmp	r3, #3
 800b168:	d817      	bhi.n	800b19a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 800b16a:	e8df f003 	tbb	[pc, r3]
 800b16e:	0602      	.short	0x0602
 800b170:	1009      	.short	0x1009
 800b172:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800b176:	1850      	adds	r0, r2, r1
 800b178:	4770      	bx	lr
 800b17a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800b17e:	e7fa      	b.n	800b176 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 800b180:	8843      	ldrh	r3, [r0, #2]
 800b182:	88c0      	ldrh	r0, [r0, #6]
 800b184:	4418      	add	r0, r3
 800b186:	b200      	sxth	r0, r0
 800b188:	1a80      	subs	r0, r0, r2
 800b18a:	3801      	subs	r0, #1
 800b18c:	4770      	bx	lr
 800b18e:	8843      	ldrh	r3, [r0, #2]
 800b190:	88c0      	ldrh	r0, [r0, #6]
 800b192:	4418      	add	r0, r3
 800b194:	b200      	sxth	r0, r0
 800b196:	1a40      	subs	r0, r0, r1
 800b198:	e7f7      	b.n	800b18a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 800b19a:	2000      	movs	r0, #0
 800b19c:	4770      	bx	lr
	...

0800b1a0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 800b1a0:	4b01      	ldr	r3, [pc, #4]	; (800b1a8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	601a      	str	r2, [r3, #0]
 800b1a6:	4770      	bx	lr
 800b1a8:	200012dc 	.word	0x200012dc

0800b1ac <_ZN8touchgfx16TouchCalibration4clzuEm>:
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	b1c8      	cbz	r0, 800b1e4 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 800b1b0:	0c02      	lsrs	r2, r0, #16
 800b1b2:	0412      	lsls	r2, r2, #16
 800b1b4:	b9a2      	cbnz	r2, 800b1e0 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 800b1b6:	0403      	lsls	r3, r0, #16
 800b1b8:	2010      	movs	r0, #16
 800b1ba:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b1be:	bf04      	itt	eq
 800b1c0:	021b      	lsleq	r3, r3, #8
 800b1c2:	3008      	addeq	r0, #8
 800b1c4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b1c8:	bf04      	itt	eq
 800b1ca:	011b      	lsleq	r3, r3, #4
 800b1cc:	3004      	addeq	r0, #4
 800b1ce:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b1d2:	bf04      	itt	eq
 800b1d4:	009b      	lsleq	r3, r3, #2
 800b1d6:	3002      	addeq	r0, #2
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	db04      	blt.n	800b1e6 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 800b1dc:	3001      	adds	r0, #1
 800b1de:	4770      	bx	lr
 800b1e0:	2000      	movs	r0, #0
 800b1e2:	e7ea      	b.n	800b1ba <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 800b1e4:	2020      	movs	r0, #32
 800b1e6:	4770      	bx	lr

0800b1e8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 800b1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1ec:	b087      	sub	sp, #28
 800b1ee:	4681      	mov	r9, r0
 800b1f0:	4698      	mov	r8, r3
 800b1f2:	4610      	mov	r0, r2
 800b1f4:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 800b1f8:	460d      	mov	r5, r1
 800b1fa:	b981      	cbnz	r1, 800b21e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 800b1fc:	b14b      	cbz	r3, 800b212 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 800b1fe:	460b      	mov	r3, r1
 800b200:	e9cd 4700 	strd	r4, r7, [sp]
 800b204:	464a      	mov	r2, r9
 800b206:	4641      	mov	r1, r8
 800b208:	f7ff ffee 	bl	800b1e8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800b20c:	b007      	add	sp, #28
 800b20e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b212:	f04f 33ff 	mov.w	r3, #4294967295
 800b216:	603b      	str	r3, [r7, #0]
 800b218:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800b21c:	e7f6      	b.n	800b20c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 800b21e:	fa32 fa01 	lsrs.w	sl, r2, r1
 800b222:	d107      	bne.n	800b234 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 800b224:	fb09 f602 	mul.w	r6, r9, r2
 800b228:	fbb6 f0f4 	udiv	r0, r6, r4
 800b22c:	fb04 6610 	mls	r6, r4, r0, r6
 800b230:	603e      	str	r6, [r7, #0]
 800b232:	e7eb      	b.n	800b20c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 800b234:	2601      	movs	r6, #1
 800b236:	408e      	lsls	r6, r1
 800b238:	3e01      	subs	r6, #1
 800b23a:	4016      	ands	r6, r2
 800b23c:	fa09 fb01 	lsl.w	fp, r9, r1
 800b240:	4630      	mov	r0, r6
 800b242:	fbbb f3f4 	udiv	r3, fp, r4
 800b246:	9302      	str	r3, [sp, #8]
 800b248:	fb0a f303 	mul.w	r3, sl, r3
 800b24c:	9303      	str	r3, [sp, #12]
 800b24e:	f7ff ffad 	bl	800b1ac <_ZN8touchgfx16TouchCalibration4clzuEm>
 800b252:	464a      	mov	r2, r9
 800b254:	460b      	mov	r3, r1
 800b256:	e9cd 4700 	strd	r4, r7, [sp]
 800b25a:	4601      	mov	r1, r0
 800b25c:	4630      	mov	r0, r6
 800b25e:	f7ff ffc3 	bl	800b1e8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800b262:	9b02      	ldr	r3, [sp, #8]
 800b264:	fb04 bb13 	mls	fp, r4, r3, fp
 800b268:	4606      	mov	r6, r0
 800b26a:	4658      	mov	r0, fp
 800b26c:	eb05 0108 	add.w	r1, r5, r8
 800b270:	f7ff ff9c 	bl	800b1ac <_ZN8touchgfx16TouchCalibration4clzuEm>
 800b274:	ab05      	add	r3, sp, #20
 800b276:	e9cd 4300 	strd	r4, r3, [sp]
 800b27a:	465a      	mov	r2, fp
 800b27c:	4603      	mov	r3, r0
 800b27e:	4650      	mov	r0, sl
 800b280:	f7ff ffb2 	bl	800b1e8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800b284:	6839      	ldr	r1, [r7, #0]
 800b286:	9a05      	ldr	r2, [sp, #20]
 800b288:	9b03      	ldr	r3, [sp, #12]
 800b28a:	4411      	add	r1, r2
 800b28c:	fbb1 f2f4 	udiv	r2, r1, r4
 800b290:	18d3      	adds	r3, r2, r3
 800b292:	441e      	add	r6, r3
 800b294:	fb04 1412 	mls	r4, r4, r2, r1
 800b298:	4430      	add	r0, r6
 800b29a:	603c      	str	r4, [r7, #0]
 800b29c:	e7b6      	b.n	800b20c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0800b29e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 800b29e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b2a2:	b085      	sub	sp, #20
 800b2a4:	f1b0 0900 	subs.w	r9, r0, #0
 800b2a8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b2aa:	461d      	mov	r5, r3
 800b2ac:	bfbf      	itttt	lt
 800b2ae:	6823      	ldrlt	r3, [r4, #0]
 800b2b0:	425b      	neglt	r3, r3
 800b2b2:	f1c9 0900 	rsblt	r9, r9, #0
 800b2b6:	6023      	strlt	r3, [r4, #0]
 800b2b8:	bfb4      	ite	lt
 800b2ba:	f04f 36ff 	movlt.w	r6, #4294967295
 800b2be:	2601      	movge	r6, #1
 800b2c0:	2a00      	cmp	r2, #0
 800b2c2:	4617      	mov	r7, r2
 800b2c4:	da04      	bge.n	800b2d0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 800b2c6:	6823      	ldr	r3, [r4, #0]
 800b2c8:	425b      	negs	r3, r3
 800b2ca:	4257      	negs	r7, r2
 800b2cc:	4276      	negs	r6, r6
 800b2ce:	6023      	str	r3, [r4, #0]
 800b2d0:	2d00      	cmp	r5, #0
 800b2d2:	4638      	mov	r0, r7
 800b2d4:	bfba      	itte	lt
 800b2d6:	426d      	neglt	r5, r5
 800b2d8:	f04f 38ff 	movlt.w	r8, #4294967295
 800b2dc:	f04f 0801 	movge.w	r8, #1
 800b2e0:	f7ff ff64 	bl	800b1ac <_ZN8touchgfx16TouchCalibration4clzuEm>
 800b2e4:	ab03      	add	r3, sp, #12
 800b2e6:	e9cd 5300 	strd	r5, r3, [sp]
 800b2ea:	463a      	mov	r2, r7
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	4648      	mov	r0, r9
 800b2f0:	f7ff ff7a 	bl	800b1e8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800b2f4:	6823      	ldr	r3, [r4, #0]
 800b2f6:	9a03      	ldr	r2, [sp, #12]
 800b2f8:	4546      	cmp	r6, r8
 800b2fa:	441a      	add	r2, r3
 800b2fc:	fb92 f3f5 	sdiv	r3, r2, r5
 800b300:	4418      	add	r0, r3
 800b302:	bf18      	it	ne
 800b304:	4240      	negne	r0, r0
 800b306:	fb05 2313 	mls	r3, r5, r3, r2
 800b30a:	1c72      	adds	r2, r6, #1
 800b30c:	6023      	str	r3, [r4, #0]
 800b30e:	d105      	bne.n	800b31c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 800b310:	2b00      	cmp	r3, #0
 800b312:	f1c3 0200 	rsb	r2, r3, #0
 800b316:	db0b      	blt.n	800b330 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 800b318:	6022      	str	r2, [r4, #0]
 800b31a:	e006      	b.n	800b32a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800b31c:	2e01      	cmp	r6, #1
 800b31e:	d104      	bne.n	800b32a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800b320:	2b00      	cmp	r3, #0
 800b322:	da02      	bge.n	800b32a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800b324:	442b      	add	r3, r5
 800b326:	3801      	subs	r0, #1
 800b328:	6023      	str	r3, [r4, #0]
 800b32a:	b005      	add	sp, #20
 800b32c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b330:	3801      	subs	r0, #1
 800b332:	1b52      	subs	r2, r2, r5
 800b334:	e7f0      	b.n	800b318 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0800b338 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 800b338:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800b33c:	4c1c      	ldr	r4, [pc, #112]	; (800b3b0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 800b33e:	6807      	ldr	r7, [r0, #0]
 800b340:	69a3      	ldr	r3, [r4, #24]
 800b342:	4605      	mov	r5, r0
 800b344:	b92b      	cbnz	r3, 800b352 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 800b346:	6840      	ldr	r0, [r0, #4]
 800b348:	e9c5 7000 	strd	r7, r0, [r5]
 800b34c:	b004      	add	sp, #16
 800b34e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b352:	68a2      	ldr	r2, [r4, #8]
 800b354:	6820      	ldr	r0, [r4, #0]
 800b356:	ae04      	add	r6, sp, #16
 800b358:	f04f 0802 	mov.w	r8, #2
 800b35c:	fb93 f1f8 	sdiv	r1, r3, r8
 800b360:	440a      	add	r2, r1
 800b362:	f846 2d04 	str.w	r2, [r6, #-4]!
 800b366:	69e1      	ldr	r1, [r4, #28]
 800b368:	9600      	str	r6, [sp, #0]
 800b36a:	463a      	mov	r2, r7
 800b36c:	f7ff ff97 	bl	800b29e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800b370:	69a3      	ldr	r3, [r4, #24]
 800b372:	686a      	ldr	r2, [r5, #4]
 800b374:	6a21      	ldr	r1, [r4, #32]
 800b376:	9600      	str	r6, [sp, #0]
 800b378:	4607      	mov	r7, r0
 800b37a:	6860      	ldr	r0, [r4, #4]
 800b37c:	f7ff ff8f 	bl	800b29e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800b380:	6962      	ldr	r2, [r4, #20]
 800b382:	69a3      	ldr	r3, [r4, #24]
 800b384:	fb93 f8f8 	sdiv	r8, r3, r8
 800b388:	4442      	add	r2, r8
 800b38a:	9203      	str	r2, [sp, #12]
 800b38c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b38e:	682a      	ldr	r2, [r5, #0]
 800b390:	9600      	str	r6, [sp, #0]
 800b392:	4407      	add	r7, r0
 800b394:	68e0      	ldr	r0, [r4, #12]
 800b396:	f7ff ff82 	bl	800b29e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800b39a:	9600      	str	r6, [sp, #0]
 800b39c:	4680      	mov	r8, r0
 800b39e:	69a3      	ldr	r3, [r4, #24]
 800b3a0:	686a      	ldr	r2, [r5, #4]
 800b3a2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800b3a4:	6920      	ldr	r0, [r4, #16]
 800b3a6:	f7ff ff7a 	bl	800b29e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800b3aa:	4440      	add	r0, r8
 800b3ac:	e7cc      	b.n	800b348 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 800b3ae:	bf00      	nop
 800b3b0:	200012e0 	.word	0x200012e0

0800b3b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 800b3b4:	4b07      	ldr	r3, [pc, #28]	; (800b3d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 800b3b6:	781b      	ldrb	r3, [r3, #0]
 800b3b8:	2b01      	cmp	r3, #1
 800b3ba:	d109      	bne.n	800b3d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 800b3bc:	f9b1 3000 	ldrsh.w	r3, [r1]
 800b3c0:	f9b0 2000 	ldrsh.w	r2, [r0]
 800b3c4:	8003      	strh	r3, [r0, #0]
 800b3c6:	4b04      	ldr	r3, [pc, #16]	; (800b3d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 800b3c8:	881b      	ldrh	r3, [r3, #0]
 800b3ca:	3b01      	subs	r3, #1
 800b3cc:	1a9b      	subs	r3, r3, r2
 800b3ce:	800b      	strh	r3, [r1, #0]
 800b3d0:	4770      	bx	lr
 800b3d2:	bf00      	nop
 800b3d4:	200012cc 	.word	0x200012cc
 800b3d8:	200012c8 	.word	0x200012c8

0800b3dc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 800b3dc:	b510      	push	{r4, lr}
 800b3de:	4b07      	ldr	r3, [pc, #28]	; (800b3fc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 800b3e0:	781b      	ldrb	r3, [r3, #0]
 800b3e2:	2b01      	cmp	r3, #1
 800b3e4:	d108      	bne.n	800b3f8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 800b3e6:	4b06      	ldr	r3, [pc, #24]	; (800b400 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 800b3e8:	880c      	ldrh	r4, [r1, #0]
 800b3ea:	881b      	ldrh	r3, [r3, #0]
 800b3ec:	f9b0 2000 	ldrsh.w	r2, [r0]
 800b3f0:	3b01      	subs	r3, #1
 800b3f2:	1b1b      	subs	r3, r3, r4
 800b3f4:	8003      	strh	r3, [r0, #0]
 800b3f6:	800a      	strh	r2, [r1, #0]
 800b3f8:	bd10      	pop	{r4, pc}
 800b3fa:	bf00      	nop
 800b3fc:	200012cc 	.word	0x200012cc
 800b400:	200012c8 	.word	0x200012c8

0800b404 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 800b404:	b510      	push	{r4, lr}
 800b406:	4b0a      	ldr	r3, [pc, #40]	; (800b430 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 800b408:	781b      	ldrb	r3, [r3, #0]
 800b40a:	2b01      	cmp	r3, #1
 800b40c:	d10e      	bne.n	800b42c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 800b40e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800b412:	8843      	ldrh	r3, [r0, #2]
 800b414:	f9b0 4000 	ldrsh.w	r4, [r0]
 800b418:	8044      	strh	r4, [r0, #2]
 800b41a:	18ca      	adds	r2, r1, r3
 800b41c:	4b05      	ldr	r3, [pc, #20]	; (800b434 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 800b41e:	881b      	ldrh	r3, [r3, #0]
 800b420:	1a9b      	subs	r3, r3, r2
 800b422:	8003      	strh	r3, [r0, #0]
 800b424:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800b428:	80c3      	strh	r3, [r0, #6]
 800b42a:	8081      	strh	r1, [r0, #4]
 800b42c:	bd10      	pop	{r4, pc}
 800b42e:	bf00      	nop
 800b430:	200012cc 	.word	0x200012cc
 800b434:	200012c8 	.word	0x200012c8

0800b438 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 800b438:	4b08      	ldr	r3, [pc, #32]	; (800b45c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 800b43a:	781b      	ldrb	r3, [r3, #0]
 800b43c:	2b01      	cmp	r3, #1
 800b43e:	d10c      	bne.n	800b45a <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 800b440:	8803      	ldrh	r3, [r0, #0]
 800b442:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 800b446:	8842      	ldrh	r2, [r0, #2]
 800b448:	8002      	strh	r2, [r0, #0]
 800b44a:	185a      	adds	r2, r3, r1
 800b44c:	4b04      	ldr	r3, [pc, #16]	; (800b460 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 800b44e:	881b      	ldrh	r3, [r3, #0]
 800b450:	1a9b      	subs	r3, r3, r2
 800b452:	8043      	strh	r3, [r0, #2]
 800b454:	88c3      	ldrh	r3, [r0, #6]
 800b456:	8083      	strh	r3, [r0, #4]
 800b458:	80c1      	strh	r1, [r0, #6]
 800b45a:	4770      	bx	lr
 800b45c:	200012cc 	.word	0x200012cc
 800b460:	200012c8 	.word	0x200012c8

0800b464 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 800b464:	b510      	push	{r4, lr}
 800b466:	4b07      	ldr	r3, [pc, #28]	; (800b484 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 800b468:	781b      	ldrb	r3, [r3, #0]
 800b46a:	2b01      	cmp	r3, #1
 800b46c:	d108      	bne.n	800b480 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 800b46e:	f9b1 3000 	ldrsh.w	r3, [r1]
 800b472:	f9b0 4000 	ldrsh.w	r4, [r0]
 800b476:	8003      	strh	r3, [r0, #0]
 800b478:	8893      	ldrh	r3, [r2, #4]
 800b47a:	3b01      	subs	r3, #1
 800b47c:	1b1b      	subs	r3, r3, r4
 800b47e:	800b      	strh	r3, [r1, #0]
 800b480:	bd10      	pop	{r4, pc}
 800b482:	bf00      	nop
 800b484:	200012cc 	.word	0x200012cc

0800b488 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 800b488:	b510      	push	{r4, lr}
 800b48a:	4b0a      	ldr	r3, [pc, #40]	; (800b4b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 800b48c:	781b      	ldrb	r3, [r3, #0]
 800b48e:	2b01      	cmp	r3, #1
 800b490:	460a      	mov	r2, r1
 800b492:	d10d      	bne.n	800b4b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 800b494:	8881      	ldrh	r1, [r0, #4]
 800b496:	8803      	ldrh	r3, [r0, #0]
 800b498:	440b      	add	r3, r1
 800b49a:	4601      	mov	r1, r0
 800b49c:	3b01      	subs	r3, #1
 800b49e:	f821 3b02 	strh.w	r3, [r1], #2
 800b4a2:	f7ff ffdf 	bl	800b464 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 800b4a6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800b4aa:	88c2      	ldrh	r2, [r0, #6]
 800b4ac:	8082      	strh	r2, [r0, #4]
 800b4ae:	80c3      	strh	r3, [r0, #6]
 800b4b0:	bd10      	pop	{r4, pc}
 800b4b2:	bf00      	nop
 800b4b4:	200012cc 	.word	0x200012cc

0800b4b8 <_ZN8touchgfx11Application13requestRedrawEv>:
 800b4b8:	4b06      	ldr	r3, [pc, #24]	; (800b4d4 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 800b4ba:	f9b3 2000 	ldrsh.w	r2, [r3]
 800b4be:	4b06      	ldr	r3, [pc, #24]	; (800b4d8 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 800b4c0:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
 800b4c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b4c8:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
 800b4cc:	2100      	movs	r1, #0
 800b4ce:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 800b4d2:	4770      	bx	lr
 800b4d4:	200012c8 	.word	0x200012c8
 800b4d8:	200012ca 	.word	0x200012ca

0800b4dc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 800b4dc:	4b03      	ldr	r3, [pc, #12]	; (800b4ec <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 800b4de:	6818      	ldr	r0, [r3, #0]
 800b4e0:	b110      	cbz	r0, 800b4e8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 800b4e2:	6803      	ldr	r3, [r0, #0]
 800b4e4:	699b      	ldr	r3, [r3, #24]
 800b4e6:	4718      	bx	r3
 800b4e8:	4770      	bx	lr
 800b4ea:	bf00      	nop
 800b4ec:	20001310 	.word	0x20001310

0800b4f0 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 800b4f0:	4770      	bx	lr
	...

0800b4f4 <_ZN8touchgfx11Application4drawEv>:
 800b4f4:	b507      	push	{r0, r1, r2, lr}
 800b4f6:	4b09      	ldr	r3, [pc, #36]	; (800b51c <_ZN8touchgfx11Application4drawEv+0x28>)
 800b4f8:	f9b3 2000 	ldrsh.w	r2, [r3]
 800b4fc:	4b08      	ldr	r3, [pc, #32]	; (800b520 <_ZN8touchgfx11Application4drawEv+0x2c>)
 800b4fe:	f8ad 2004 	strh.w	r2, [sp, #4]
 800b502:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b506:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b50a:	6803      	ldr	r3, [r0, #0]
 800b50c:	2100      	movs	r1, #0
 800b50e:	9100      	str	r1, [sp, #0]
 800b510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b512:	4669      	mov	r1, sp
 800b514:	4798      	blx	r3
 800b516:	b003      	add	sp, #12
 800b518:	f85d fb04 	ldr.w	pc, [sp], #4
 800b51c:	200012c8 	.word	0x200012c8
 800b520:	200012ca 	.word	0x200012ca

0800b524 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 800b524:	4b03      	ldr	r3, [pc, #12]	; (800b534 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 800b526:	6818      	ldr	r0, [r3, #0]
 800b528:	b110      	cbz	r0, 800b530 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 800b52a:	6803      	ldr	r3, [r0, #0]
 800b52c:	69db      	ldr	r3, [r3, #28]
 800b52e:	4718      	bx	r3
 800b530:	4770      	bx	lr
 800b532:	bf00      	nop
 800b534:	20001310 	.word	0x20001310

0800b538 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 800b538:	4b03      	ldr	r3, [pc, #12]	; (800b548 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 800b53a:	6818      	ldr	r0, [r3, #0]
 800b53c:	b110      	cbz	r0, 800b544 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 800b53e:	6803      	ldr	r3, [r0, #0]
 800b540:	6a1b      	ldr	r3, [r3, #32]
 800b542:	4718      	bx	r3
 800b544:	4770      	bx	lr
 800b546:	bf00      	nop
 800b548:	20001310 	.word	0x20001310

0800b54c <_ZN8touchgfx11Application16clearCachedAreasEv>:
 800b54c:	2300      	movs	r3, #0
 800b54e:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
 800b552:	4770      	bx	lr

0800b554 <_ZN8touchgfx11Application14handleKeyEventEh>:
 800b554:	4b03      	ldr	r3, [pc, #12]	; (800b564 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 800b556:	6818      	ldr	r0, [r3, #0]
 800b558:	b110      	cbz	r0, 800b560 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 800b55a:	6803      	ldr	r3, [r0, #0]
 800b55c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b55e:	4718      	bx	r3
 800b560:	4770      	bx	lr
 800b562:	bf00      	nop
 800b564:	20001310 	.word	0x20001310

0800b568 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 800b568:	b510      	push	{r4, lr}
 800b56a:	f9b1 4000 	ldrsh.w	r4, [r1]
 800b56e:	888a      	ldrh	r2, [r1, #4]
 800b570:	f9b0 3000 	ldrsh.w	r3, [r0]
 800b574:	4422      	add	r2, r4
 800b576:	b212      	sxth	r2, r2
 800b578:	4293      	cmp	r3, r2
 800b57a:	da15      	bge.n	800b5a8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800b57c:	8882      	ldrh	r2, [r0, #4]
 800b57e:	4413      	add	r3, r2
 800b580:	b21b      	sxth	r3, r3
 800b582:	429c      	cmp	r4, r3
 800b584:	da10      	bge.n	800b5a8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800b586:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800b58a:	88c9      	ldrh	r1, [r1, #6]
 800b58c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800b590:	4419      	add	r1, r3
 800b592:	b209      	sxth	r1, r1
 800b594:	428a      	cmp	r2, r1
 800b596:	da07      	bge.n	800b5a8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800b598:	88c0      	ldrh	r0, [r0, #6]
 800b59a:	4410      	add	r0, r2
 800b59c:	b200      	sxth	r0, r0
 800b59e:	4283      	cmp	r3, r0
 800b5a0:	bfac      	ite	ge
 800b5a2:	2000      	movge	r0, #0
 800b5a4:	2001      	movlt	r0, #1
 800b5a6:	bd10      	pop	{r4, pc}
 800b5a8:	2000      	movs	r0, #0
 800b5aa:	e7fc      	b.n	800b5a6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0800b5ac <_ZN8touchgfx4Rect10restrictToEss>:
 800b5ac:	f9b0 3000 	ldrsh.w	r3, [r0]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	b510      	push	{r4, lr}
 800b5b4:	da04      	bge.n	800b5c0 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 800b5b6:	8884      	ldrh	r4, [r0, #4]
 800b5b8:	4423      	add	r3, r4
 800b5ba:	8083      	strh	r3, [r0, #4]
 800b5bc:	2300      	movs	r3, #0
 800b5be:	8003      	strh	r3, [r0, #0]
 800b5c0:	f9b0 4000 	ldrsh.w	r4, [r0]
 800b5c4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800b5c8:	1b09      	subs	r1, r1, r4
 800b5ca:	428b      	cmp	r3, r1
 800b5cc:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800b5d0:	bfc8      	it	gt
 800b5d2:	8081      	strhgt	r1, [r0, #4]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	da04      	bge.n	800b5e2 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 800b5d8:	88c1      	ldrh	r1, [r0, #6]
 800b5da:	440b      	add	r3, r1
 800b5dc:	80c3      	strh	r3, [r0, #6]
 800b5de:	2300      	movs	r3, #0
 800b5e0:	8043      	strh	r3, [r0, #2]
 800b5e2:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800b5e6:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800b5ea:	1a52      	subs	r2, r2, r1
 800b5ec:	4293      	cmp	r3, r2
 800b5ee:	bfc8      	it	gt
 800b5f0:	80c2      	strhgt	r2, [r0, #6]
 800b5f2:	bd10      	pop	{r4, pc}

0800b5f4 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 800b5f4:	b510      	push	{r4, lr}
 800b5f6:	4b10      	ldr	r3, [pc, #64]	; (800b638 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 800b5f8:	f9b3 2000 	ldrsh.w	r2, [r3]
 800b5fc:	4b0f      	ldr	r3, [pc, #60]	; (800b63c <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 800b5fe:	460c      	mov	r4, r1
 800b600:	4620      	mov	r0, r4
 800b602:	f9b3 1000 	ldrsh.w	r1, [r3]
 800b606:	f7ff ffd1 	bl	800b5ac <_ZN8touchgfx4Rect10restrictToEss>
 800b60a:	4b0d      	ldr	r3, [pc, #52]	; (800b640 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 800b60c:	6818      	ldr	r0, [r3, #0]
 800b60e:	b190      	cbz	r0, 800b636 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 800b610:	6803      	ldr	r3, [r0, #0]
 800b612:	4621      	mov	r1, r4
 800b614:	689b      	ldr	r3, [r3, #8]
 800b616:	4798      	blx	r3
 800b618:	4b0a      	ldr	r3, [pc, #40]	; (800b644 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 800b61a:	6818      	ldr	r0, [r3, #0]
 800b61c:	b118      	cbz	r0, 800b626 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 800b61e:	6803      	ldr	r3, [r0, #0]
 800b620:	4621      	mov	r1, r4
 800b622:	689b      	ldr	r3, [r3, #8]
 800b624:	4798      	blx	r3
 800b626:	4b08      	ldr	r3, [pc, #32]	; (800b648 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 800b628:	6818      	ldr	r0, [r3, #0]
 800b62a:	6803      	ldr	r3, [r0, #0]
 800b62c:	4621      	mov	r1, r4
 800b62e:	69db      	ldr	r3, [r3, #28]
 800b630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b634:	4718      	bx	r3
 800b636:	bd10      	pop	{r4, pc}
 800b638:	200012ca 	.word	0x200012ca
 800b63c:	200012c8 	.word	0x200012c8
 800b640:	20001310 	.word	0x20001310
 800b644:	2000130c 	.word	0x2000130c
 800b648:	200012d4 	.word	0x200012d4

0800b64c <_ZNK8touchgfx4Rect8includesERKS0_>:
 800b64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b64e:	4606      	mov	r6, r0
 800b650:	4608      	mov	r0, r1
 800b652:	460f      	mov	r7, r1
 800b654:	f7fc ffe1 	bl	800861a <_ZNK8touchgfx4Rect7isEmptyEv>
 800b658:	b9e8      	cbnz	r0, 800b696 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800b65a:	f9b7 5000 	ldrsh.w	r5, [r7]
 800b65e:	f9b6 4000 	ldrsh.w	r4, [r6]
 800b662:	42a5      	cmp	r5, r4
 800b664:	db17      	blt.n	800b696 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800b666:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800b66a:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 800b66e:	429a      	cmp	r2, r3
 800b670:	db11      	blt.n	800b696 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800b672:	88b9      	ldrh	r1, [r7, #4]
 800b674:	440d      	add	r5, r1
 800b676:	88b1      	ldrh	r1, [r6, #4]
 800b678:	440c      	add	r4, r1
 800b67a:	b22d      	sxth	r5, r5
 800b67c:	b224      	sxth	r4, r4
 800b67e:	42a5      	cmp	r5, r4
 800b680:	dc09      	bgt.n	800b696 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800b682:	88f8      	ldrh	r0, [r7, #6]
 800b684:	4410      	add	r0, r2
 800b686:	88f2      	ldrh	r2, [r6, #6]
 800b688:	4413      	add	r3, r2
 800b68a:	b200      	sxth	r0, r0
 800b68c:	b21b      	sxth	r3, r3
 800b68e:	4298      	cmp	r0, r3
 800b690:	bfcc      	ite	gt
 800b692:	2000      	movgt	r0, #0
 800b694:	2001      	movle	r0, #1
 800b696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b698 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 800b698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b69a:	4604      	mov	r4, r0
 800b69c:	4608      	mov	r0, r1
 800b69e:	460d      	mov	r5, r1
 800b6a0:	f7fc ffbb 	bl	800861a <_ZNK8touchgfx4Rect7isEmptyEv>
 800b6a4:	b978      	cbnz	r0, 800b6c6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 800b6a6:	4620      	mov	r0, r4
 800b6a8:	f7fc ffb7 	bl	800861a <_ZNK8touchgfx4Rect7isEmptyEv>
 800b6ac:	f9b5 6000 	ldrsh.w	r6, [r5]
 800b6b0:	b150      	cbz	r0, 800b6c8 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 800b6b2:	8026      	strh	r6, [r4, #0]
 800b6b4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800b6b8:	8063      	strh	r3, [r4, #2]
 800b6ba:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800b6be:	80a3      	strh	r3, [r4, #4]
 800b6c0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800b6c4:	80e3      	strh	r3, [r4, #6]
 800b6c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6c8:	f9b4 1000 	ldrsh.w	r1, [r4]
 800b6cc:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800b6d0:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800b6d4:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 800b6d8:	88ed      	ldrh	r5, [r5, #6]
 800b6da:	42b1      	cmp	r1, r6
 800b6dc:	460f      	mov	r7, r1
 800b6de:	bfa8      	it	ge
 800b6e0:	4637      	movge	r7, r6
 800b6e2:	4293      	cmp	r3, r2
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	4466      	add	r6, ip
 800b6e8:	bfa8      	it	ge
 800b6ea:	4610      	movge	r0, r2
 800b6ec:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800b6f0:	8027      	strh	r7, [r4, #0]
 800b6f2:	442a      	add	r2, r5
 800b6f4:	88e5      	ldrh	r5, [r4, #6]
 800b6f6:	8060      	strh	r0, [r4, #2]
 800b6f8:	4461      	add	r1, ip
 800b6fa:	442b      	add	r3, r5
 800b6fc:	b236      	sxth	r6, r6
 800b6fe:	b209      	sxth	r1, r1
 800b700:	b212      	sxth	r2, r2
 800b702:	b21b      	sxth	r3, r3
 800b704:	428e      	cmp	r6, r1
 800b706:	bfac      	ite	ge
 800b708:	ebc7 0106 	rsbge	r1, r7, r6
 800b70c:	ebc7 0101 	rsblt	r1, r7, r1
 800b710:	429a      	cmp	r2, r3
 800b712:	bfac      	ite	ge
 800b714:	ebc0 0202 	rsbge	r2, r0, r2
 800b718:	ebc0 0203 	rsblt	r2, r0, r3
 800b71c:	80a1      	strh	r1, [r4, #4]
 800b71e:	80e2      	strh	r2, [r4, #6]
 800b720:	e7d1      	b.n	800b6c6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0800b724 <_ZN8touchgfx11Application11getInstanceEv>:
 800b724:	4b01      	ldr	r3, [pc, #4]	; (800b72c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 800b726:	6818      	ldr	r0, [r3, #0]
 800b728:	4770      	bx	lr
 800b72a:	bf00      	nop
 800b72c:	20001320 	.word	0x20001320

0800b730 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 800b730:	b510      	push	{r4, lr}
 800b732:	2300      	movs	r3, #0
 800b734:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 800b738:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 800b73c:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 800b740:	4604      	mov	r4, r0
 800b742:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 800b746:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d90e      	bls.n	800b76c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 800b74e:	18e2      	adds	r2, r4, r3
 800b750:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 800b754:	b122      	cbz	r2, 800b760 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 800b756:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800b75a:	6803      	ldr	r3, [r0, #0]
 800b75c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b75e:	4798      	blx	r3
 800b760:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 800b764:	3301      	adds	r3, #1
 800b766:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 800b76a:	e7ea      	b.n	800b742 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 800b76c:	bd10      	pop	{r4, pc}

0800b76e <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 800b76e:	2300      	movs	r3, #0
 800b770:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 800b774:	f100 0284 	add.w	r2, r0, #132	; 0x84
 800b778:	30a4      	adds	r0, #164	; 0xa4
 800b77a:	f802 3b01 	strb.w	r3, [r2], #1
 800b77e:	4282      	cmp	r2, r0
 800b780:	d1fb      	bne.n	800b77a <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 800b782:	4770      	bx	lr

0800b784 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 800b784:	b570      	push	{r4, r5, r6, lr}
 800b786:	4c0b      	ldr	r4, [pc, #44]	; (800b7b4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 800b788:	4605      	mov	r5, r0
 800b78a:	6820      	ldr	r0, [r4, #0]
 800b78c:	460e      	mov	r6, r1
 800b78e:	b110      	cbz	r0, 800b796 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 800b790:	6803      	ldr	r3, [r0, #0]
 800b792:	695b      	ldr	r3, [r3, #20]
 800b794:	4798      	blx	r3
 800b796:	1d28      	adds	r0, r5, #4
 800b798:	f7ff ffe9 	bl	800b76e <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 800b79c:	6026      	str	r6, [r4, #0]
 800b79e:	6833      	ldr	r3, [r6, #0]
 800b7a0:	4630      	mov	r0, r6
 800b7a2:	68db      	ldr	r3, [r3, #12]
 800b7a4:	4798      	blx	r3
 800b7a6:	682b      	ldr	r3, [r5, #0]
 800b7a8:	4628      	mov	r0, r5
 800b7aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b7b0:	4718      	bx	r3
 800b7b2:	bf00      	nop
 800b7b4:	20001310 	.word	0x20001310

0800b7b8 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
 800b7be:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
 800b7c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7c4:	461a      	mov	r2, r3
 800b7c6:	461c      	mov	r4, r3
 800b7c8:	461d      	mov	r5, r3
 800b7ca:	459c      	cmp	ip, r3
 800b7cc:	dd1a      	ble.n	800b804 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 800b7ce:	18c6      	adds	r6, r0, r3
 800b7d0:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
 800b7d4:	b16e      	cbz	r6, 800b7f2 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 800b7d6:	429a      	cmp	r2, r3
 800b7d8:	d008      	beq.n	800b7ec <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 800b7da:	fa1f fe82 	uxth.w	lr, r2
 800b7de:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 800b7e2:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 800b7e6:	1887      	adds	r7, r0, r2
 800b7e8:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
 800b7ec:	3201      	adds	r2, #1
 800b7ee:	3301      	adds	r3, #1
 800b7f0:	e7eb      	b.n	800b7ca <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 800b7f2:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
 800b7f6:	4299      	cmp	r1, r3
 800b7f8:	bfa8      	it	ge
 800b7fa:	3501      	addge	r5, #1
 800b7fc:	429e      	cmp	r6, r3
 800b7fe:	bfc8      	it	gt
 800b800:	3401      	addgt	r4, #1
 800b802:	e7f4      	b.n	800b7ee <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 800b804:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 800b808:	1b49      	subs	r1, r1, r5
 800b80a:	1b1b      	subs	r3, r3, r4
 800b80c:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 800b810:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 800b814:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 800b818:	4293      	cmp	r3, r2
 800b81a:	dd03      	ble.n	800b824 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 800b81c:	3b01      	subs	r3, #1
 800b81e:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 800b822:	e7f7      	b.n	800b814 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 800b824:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800b828 <_ZN8touchgfx11Application15handleTickEventEv>:
 800b828:	b570      	push	{r4, r5, r6, lr}
 800b82a:	4d16      	ldr	r5, [pc, #88]	; (800b884 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 800b82c:	4604      	mov	r4, r0
 800b82e:	6828      	ldr	r0, [r5, #0]
 800b830:	b140      	cbz	r0, 800b844 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800b832:	7a03      	ldrb	r3, [r0, #8]
 800b834:	b933      	cbnz	r3, 800b844 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800b836:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 800b83a:	6803      	ldr	r3, [r0, #0]
 800b83c:	689b      	ldr	r3, [r3, #8]
 800b83e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b842:	4718      	bx	r3
 800b844:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 800b848:	4e0f      	ldr	r6, [pc, #60]	; (800b888 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 800b84a:	b973      	cbnz	r3, 800b86a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800b84c:	b168      	cbz	r0, 800b86a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800b84e:	7a03      	ldrb	r3, [r0, #8]
 800b850:	b15b      	cbz	r3, 800b86a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800b852:	6830      	ldr	r0, [r6, #0]
 800b854:	b110      	cbz	r0, 800b85c <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 800b856:	6803      	ldr	r3, [r0, #0]
 800b858:	691b      	ldr	r3, [r3, #16]
 800b85a:	4798      	blx	r3
 800b85c:	6828      	ldr	r0, [r5, #0]
 800b85e:	6803      	ldr	r3, [r0, #0]
 800b860:	68db      	ldr	r3, [r3, #12]
 800b862:	4798      	blx	r3
 800b864:	2301      	movs	r3, #1
 800b866:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 800b86a:	3404      	adds	r4, #4
 800b86c:	4620      	mov	r0, r4
 800b86e:	f7ff ff5f 	bl	800b730 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 800b872:	4620      	mov	r0, r4
 800b874:	f7ff ffa0 	bl	800b7b8 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 800b878:	6830      	ldr	r0, [r6, #0]
 800b87a:	b110      	cbz	r0, 800b882 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 800b87c:	6803      	ldr	r3, [r0, #0]
 800b87e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b880:	e7dd      	b.n	800b83e <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 800b882:	bd70      	pop	{r4, r5, r6, pc}
 800b884:	20001314 	.word	0x20001314
 800b888:	20001310 	.word	0x20001310

0800b88c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 800b88c:	4603      	mov	r3, r0
 800b88e:	f100 0140 	add.w	r1, r0, #64	; 0x40
 800b892:	2200      	movs	r2, #0
 800b894:	801a      	strh	r2, [r3, #0]
 800b896:	805a      	strh	r2, [r3, #2]
 800b898:	809a      	strh	r2, [r3, #4]
 800b89a:	80da      	strh	r2, [r3, #6]
 800b89c:	3308      	adds	r3, #8
 800b89e:	428b      	cmp	r3, r1
 800b8a0:	d1f8      	bne.n	800b894 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 800b8a2:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 800b8a6:	4770      	bx	lr

0800b8a8 <_ZN8touchgfx11ApplicationC1Ev>:
 800b8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8aa:	4606      	mov	r6, r0
 800b8ac:	4b1c      	ldr	r3, [pc, #112]	; (800b920 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 800b8ae:	f846 3b04 	str.w	r3, [r6], #4
 800b8b2:	4604      	mov	r4, r0
 800b8b4:	2500      	movs	r5, #0
 800b8b6:	22a8      	movs	r2, #168	; 0xa8
 800b8b8:	2100      	movs	r1, #0
 800b8ba:	4630      	mov	r0, r6
 800b8bc:	f004 f896 	bl	800f9ec <memset>
 800b8c0:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
 800b8c4:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 800b8c8:	f7ff ffe0 	bl	800b88c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800b8cc:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 800b8d0:	f7ff ffdc 	bl	800b88c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800b8d4:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 800b8d8:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 800b8dc:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 800b8e0:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
 800b8e4:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 800b8e8:	490e      	ldr	r1, [pc, #56]	; (800b924 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 800b8ea:	480f      	ldr	r0, [pc, #60]	; (800b928 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 800b8ec:	4f0f      	ldr	r7, [pc, #60]	; (800b92c <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 800b8ee:	f003 fecd 	bl	800f68c <CRC_Lock>
 800b8f2:	4b0f      	ldr	r3, [pc, #60]	; (800b930 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 800b8f4:	b158      	cbz	r0, 800b90e <_ZN8touchgfx11ApplicationC1Ev+0x66>
 800b8f6:	801d      	strh	r5, [r3, #0]
 800b8f8:	4a0e      	ldr	r2, [pc, #56]	; (800b934 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	6013      	str	r3, [r2, #0]
 800b8fe:	4a0e      	ldr	r2, [pc, #56]	; (800b938 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 800b900:	603b      	str	r3, [r7, #0]
 800b902:	4630      	mov	r0, r6
 800b904:	6013      	str	r3, [r2, #0]
 800b906:	f7ff ff32 	bl	800b76e <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 800b90a:	4620      	mov	r0, r4
 800b90c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b90e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b912:	2002      	movs	r0, #2
 800b914:	801a      	strh	r2, [r3, #0]
 800b916:	6038      	str	r0, [r7, #0]
 800b918:	f001 fa20 	bl	800cd5c <_ZN8touchgfx6Screen4drawEv>
 800b91c:	e7ec      	b.n	800b8f8 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 800b91e:	bf00      	nop
 800b920:	08012824 	.word	0x08012824
 800b924:	b5e8b5cd 	.word	0xb5e8b5cd
 800b928:	f407a5c2 	.word	0xf407a5c2
 800b92c:	20001310 	.word	0x20001310
 800b930:	20000018 	.word	0x20000018
 800b934:	20001320 	.word	0x20001320
 800b938:	20001314 	.word	0x20001314

0800b93c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 800b93c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800b940:	3b01      	subs	r3, #1
 800b942:	b29b      	uxth	r3, r3
 800b944:	428b      	cmp	r3, r1
 800b946:	b510      	push	{r4, lr}
 800b948:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 800b94c:	d908      	bls.n	800b960 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 800b94e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800b952:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 800b956:	681a      	ldr	r2, [r3, #0]
 800b958:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 800b95c:	685a      	ldr	r2, [r3, #4]
 800b95e:	6062      	str	r2, [r4, #4]
 800b960:	bd10      	pop	{r4, pc}
	...

0800b964 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 800b964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b968:	4b8f      	ldr	r3, [pc, #572]	; (800bba8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 800b96a:	b08f      	sub	sp, #60	; 0x3c
 800b96c:	ac0a      	add	r4, sp, #40	; 0x28
 800b96e:	e884 0006 	stmia.w	r4, {r1, r2}
 800b972:	f9b3 2000 	ldrsh.w	r2, [r3]
 800b976:	4b8d      	ldr	r3, [pc, #564]	; (800bbac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 800b978:	4683      	mov	fp, r0
 800b97a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800b97e:	4620      	mov	r0, r4
 800b980:	f7ff fe14 	bl	800b5ac <_ZN8touchgfx4Rect10restrictToEss>
 800b984:	4620      	mov	r0, r4
 800b986:	f7fc fe48 	bl	800861a <_ZNK8touchgfx4Rect7isEmptyEv>
 800b98a:	2800      	cmp	r0, #0
 800b98c:	d16a      	bne.n	800ba64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800b98e:	9403      	str	r4, [sp, #12]
 800b990:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 800b994:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 800b998:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 800b99c:	35a4      	adds	r5, #164	; 0xa4
 800b99e:	9301      	str	r3, [sp, #4]
 800b9a0:	b15c      	cbz	r4, 800b9ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 800b9a2:	4629      	mov	r1, r5
 800b9a4:	9803      	ldr	r0, [sp, #12]
 800b9a6:	f7ff fe51 	bl	800b64c <_ZNK8touchgfx4Rect8includesERKS0_>
 800b9aa:	3c01      	subs	r4, #1
 800b9ac:	b118      	cbz	r0, 800b9b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 800b9ae:	b2a1      	uxth	r1, r4
 800b9b0:	9801      	ldr	r0, [sp, #4]
 800b9b2:	f7ff ffc3 	bl	800b93c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800b9b6:	3d08      	subs	r5, #8
 800b9b8:	e7f2      	b.n	800b9a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 800b9ba:	f8bb 80ec 	ldrh.w	r8, [fp, #236]	; 0xec
 800b9be:	f8cd 8010 	str.w	r8, [sp, #16]
 800b9c2:	f108 33ff 	add.w	r3, r8, #4294967295
 800b9c6:	9302      	str	r3, [sp, #8]
 800b9c8:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800b9cc:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 800b9d0:	9306      	str	r3, [sp, #24]
 800b9d2:	445c      	add	r4, fp
 800b9d4:	2500      	movs	r5, #0
 800b9d6:	4626      	mov	r6, r4
 800b9d8:	f8cd 8014 	str.w	r8, [sp, #20]
 800b9dc:	462f      	mov	r7, r5
 800b9de:	9b05      	ldr	r3, [sp, #20]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d073      	beq.n	800bacc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 800b9e4:	9903      	ldr	r1, [sp, #12]
 800b9e6:	4630      	mov	r0, r6
 800b9e8:	f7ff fdbe 	bl	800b568 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800b9ec:	b350      	cbz	r0, 800ba44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 800b9ee:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 800b9f2:	f9b6 c000 	ldrsh.w	ip, [r6]
 800b9f6:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 800b9fa:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 800b9fe:	45e6      	cmp	lr, ip
 800ba00:	db33      	blt.n	800ba6a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 800ba02:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 800ba06:	88b3      	ldrh	r3, [r6, #4]
 800ba08:	4472      	add	r2, lr
 800ba0a:	4463      	add	r3, ip
 800ba0c:	b212      	sxth	r2, r2
 800ba0e:	b21b      	sxth	r3, r3
 800ba10:	429a      	cmp	r2, r3
 800ba12:	dc2a      	bgt.n	800ba6a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 800ba14:	88f3      	ldrh	r3, [r6, #6]
 800ba16:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 800ba1a:	fa1f f289 	uxth.w	r2, r9
 800ba1e:	4413      	add	r3, r2
 800ba20:	b29b      	uxth	r3, r3
 800ba22:	45ca      	cmp	sl, r9
 800ba24:	fa0f fe83 	sxth.w	lr, r3
 800ba28:	fa1f fc8a 	uxth.w	ip, sl
 800ba2c:	db0f      	blt.n	800ba4e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 800ba2e:	eba3 030c 	sub.w	r3, r3, ip
 800ba32:	1ac9      	subs	r1, r1, r3
 800ba34:	b209      	sxth	r1, r1
 800ba36:	2900      	cmp	r1, #0
 800ba38:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 800ba3c:	dd12      	ble.n	800ba64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800ba3e:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 800ba42:	4605      	mov	r5, r0
 800ba44:	9b05      	ldr	r3, [sp, #20]
 800ba46:	3b01      	subs	r3, #1
 800ba48:	9305      	str	r3, [sp, #20]
 800ba4a:	3e08      	subs	r6, #8
 800ba4c:	e7c7      	b.n	800b9de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 800ba4e:	4461      	add	r1, ip
 800ba50:	b209      	sxth	r1, r1
 800ba52:	4571      	cmp	r1, lr
 800ba54:	dc38      	bgt.n	800bac8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800ba56:	eba2 020c 	sub.w	r2, r2, ip
 800ba5a:	b212      	sxth	r2, r2
 800ba5c:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 800ba60:	2a00      	cmp	r2, #0
 800ba62:	dcee      	bgt.n	800ba42 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 800ba64:	b00f      	add	sp, #60	; 0x3c
 800ba66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba6a:	45ca      	cmp	sl, r9
 800ba6c:	db2c      	blt.n	800bac8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800ba6e:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 800ba72:	449a      	add	sl, r3
 800ba74:	88f3      	ldrh	r3, [r6, #6]
 800ba76:	4499      	add	r9, r3
 800ba78:	fa0f fa8a 	sxth.w	sl, sl
 800ba7c:	fa0f f989 	sxth.w	r9, r9
 800ba80:	45ca      	cmp	sl, r9
 800ba82:	dc21      	bgt.n	800bac8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800ba84:	88b3      	ldrh	r3, [r6, #4]
 800ba86:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 800ba8a:	fa1f f28c 	uxth.w	r2, ip
 800ba8e:	4413      	add	r3, r2
 800ba90:	b29b      	uxth	r3, r3
 800ba92:	45e6      	cmp	lr, ip
 800ba94:	fa1f f98e 	uxth.w	r9, lr
 800ba98:	fa0f fa83 	sxth.w	sl, r3
 800ba9c:	db0a      	blt.n	800bab4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 800ba9e:	eba3 0309 	sub.w	r3, r3, r9
 800baa2:	1ac9      	subs	r1, r1, r3
 800baa4:	b209      	sxth	r1, r1
 800baa6:	2900      	cmp	r1, #0
 800baa8:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 800baac:	ddda      	ble.n	800ba64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800baae:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 800bab2:	e7c6      	b.n	800ba42 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 800bab4:	4449      	add	r1, r9
 800bab6:	b209      	sxth	r1, r1
 800bab8:	4551      	cmp	r1, sl
 800baba:	dc05      	bgt.n	800bac8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800babc:	eba2 0209 	sub.w	r2, r2, r9
 800bac0:	b212      	sxth	r2, r2
 800bac2:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 800bac6:	e7cb      	b.n	800ba60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 800bac8:	4607      	mov	r7, r0
 800baca:	e7bb      	b.n	800ba44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 800bacc:	2d00      	cmp	r5, #0
 800bace:	d181      	bne.n	800b9d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 800bad0:	2f00      	cmp	r7, #0
 800bad2:	f000 81dd 	beq.w	800be90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 800bad6:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 800bada:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 800bade:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 800bae2:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 800bae6:	b2b9      	uxth	r1, r7
 800bae8:	b2b3      	uxth	r3, r6
 800baea:	441a      	add	r2, r3
 800baec:	448a      	add	sl, r1
 800baee:	b292      	uxth	r2, r2
 800baf0:	fa1f fa8a 	uxth.w	sl, sl
 800baf4:	fa0f f882 	sxth.w	r8, r2
 800baf8:	9105      	str	r1, [sp, #20]
 800bafa:	fa0f f98a 	sxth.w	r9, sl
 800bafe:	e9cd 2307 	strd	r2, r3, [sp, #28]
 800bb02:	9b04      	ldr	r3, [sp, #16]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d053      	beq.n	800bbb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 800bb08:	9903      	ldr	r1, [sp, #12]
 800bb0a:	4620      	mov	r0, r4
 800bb0c:	f7ff fd2c 	bl	800b568 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800bb10:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800bb14:	b1c0      	cbz	r0, 800bb48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 800bb16:	f9b4 e000 	ldrsh.w	lr, [r4]
 800bb1a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800bb1e:	4576      	cmp	r6, lr
 800bb20:	dc23      	bgt.n	800bb6a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 800bb22:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800bb26:	44f4      	add	ip, lr
 800bb28:	fa0f fc8c 	sxth.w	ip, ip
 800bb2c:	45e0      	cmp	r8, ip
 800bb2e:	db1c      	blt.n	800bb6a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 800bb30:	428f      	cmp	r7, r1
 800bb32:	fa1f fc81 	uxth.w	ip, r1
 800bb36:	88e1      	ldrh	r1, [r4, #6]
 800bb38:	dc0d      	bgt.n	800bb56 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 800bb3a:	ebaa 0c0c 	sub.w	ip, sl, ip
 800bb3e:	eba1 010c 	sub.w	r1, r1, ip
 800bb42:	f8a4 9002 	strh.w	r9, [r4, #2]
 800bb46:	80e1      	strh	r1, [r4, #6]
 800bb48:	4628      	mov	r0, r5
 800bb4a:	9904      	ldr	r1, [sp, #16]
 800bb4c:	3901      	subs	r1, #1
 800bb4e:	9104      	str	r1, [sp, #16]
 800bb50:	3c08      	subs	r4, #8
 800bb52:	4605      	mov	r5, r0
 800bb54:	e7d3      	b.n	800bafe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19a>
 800bb56:	4461      	add	r1, ip
 800bb58:	b209      	sxth	r1, r1
 800bb5a:	4549      	cmp	r1, r9
 800bb5c:	dcf5      	bgt.n	800bb4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800bb5e:	9905      	ldr	r1, [sp, #20]
 800bb60:	eba1 0c0c 	sub.w	ip, r1, ip
 800bb64:	f8a4 c006 	strh.w	ip, [r4, #6]
 800bb68:	e7ee      	b.n	800bb48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 800bb6a:	428f      	cmp	r7, r1
 800bb6c:	dced      	bgt.n	800bb4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800bb6e:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 800bb72:	4461      	add	r1, ip
 800bb74:	b209      	sxth	r1, r1
 800bb76:	4589      	cmp	r9, r1
 800bb78:	dbe7      	blt.n	800bb4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800bb7a:	4576      	cmp	r6, lr
 800bb7c:	fa1f fc8e 	uxth.w	ip, lr
 800bb80:	88a1      	ldrh	r1, [r4, #4]
 800bb82:	dc07      	bgt.n	800bb94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 800bb84:	eba2 0c0c 	sub.w	ip, r2, ip
 800bb88:	eba1 010c 	sub.w	r1, r1, ip
 800bb8c:	f8a4 8000 	strh.w	r8, [r4]
 800bb90:	80a1      	strh	r1, [r4, #4]
 800bb92:	e7d9      	b.n	800bb48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 800bb94:	4461      	add	r1, ip
 800bb96:	b209      	sxth	r1, r1
 800bb98:	4588      	cmp	r8, r1
 800bb9a:	dbd6      	blt.n	800bb4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800bb9c:	eba3 0c0c 	sub.w	ip, r3, ip
 800bba0:	f8a4 c004 	strh.w	ip, [r4, #4]
 800bba4:	e7d0      	b.n	800bb48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 800bba6:	bf00      	nop
 800bba8:	200012ca 	.word	0x200012ca
 800bbac:	200012c8 	.word	0x200012c8
 800bbb0:	2d00      	cmp	r5, #0
 800bbb2:	f000 816d 	beq.w	800be90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 800bbb6:	9b06      	ldr	r3, [sp, #24]
 800bbb8:	445b      	add	r3, fp
 800bbba:	461c      	mov	r4, r3
 800bbbc:	9b02      	ldr	r3, [sp, #8]
 800bbbe:	3301      	adds	r3, #1
 800bbc0:	f000 8166 	beq.w	800be90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 800bbc4:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 800bbc8:	4629      	mov	r1, r5
 800bbca:	9803      	ldr	r0, [sp, #12]
 800bbcc:	f7ff fd3e 	bl	800b64c <_ZNK8touchgfx4Rect8includesERKS0_>
 800bbd0:	b120      	cbz	r0, 800bbdc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 800bbd2:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800bbd6:	9801      	ldr	r0, [sp, #4]
 800bbd8:	f7ff feb0 	bl	800b93c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800bbdc:	9903      	ldr	r1, [sp, #12]
 800bbde:	4628      	mov	r0, r5
 800bbe0:	f7ff fcc2 	bl	800b568 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800bbe4:	2800      	cmp	r0, #0
 800bbe6:	f000 809c 	beq.w	800bd22 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 800bbea:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
 800bbee:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 800bbf2:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 800bbf6:	9309      	str	r3, [sp, #36]	; 0x24
 800bbf8:	fa1f f189 	uxth.w	r1, r9
 800bbfc:	eb01 0c03 	add.w	ip, r1, r3
 800bc00:	fa1f fa8c 	uxth.w	sl, ip
 800bc04:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 800bc08:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 800bc0c:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
 800bc10:	b283      	uxth	r3, r0
 800bc12:	eb03 050c 	add.w	r5, r3, ip
 800bc16:	b2ad      	uxth	r5, r5
 800bc18:	9505      	str	r5, [sp, #20]
 800bc1a:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 800bc1e:	9504      	str	r5, [sp, #16]
 800bc20:	4548      	cmp	r0, r9
 800bc22:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
 800bc26:	f340 8099 	ble.w	800bd5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 800bc2a:	1a5b      	subs	r3, r3, r1
 800bc2c:	b29b      	uxth	r3, r3
 800bc2e:	4596      	cmp	lr, r2
 800bc30:	fa0f f08a 	sxth.w	r0, sl
 800bc34:	b21e      	sxth	r6, r3
 800bc36:	dd2e      	ble.n	800bc96 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 800bc38:	9f02      	ldr	r7, [sp, #8]
 800bc3a:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 800bc3e:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 800bc42:	9f04      	ldr	r7, [sp, #16]
 800bc44:	1a3f      	subs	r7, r7, r0
 800bc46:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
 800bc4a:	fa1f fe8e 	uxth.w	lr, lr
 800bc4e:	b292      	uxth	r2, r2
 800bc50:	ebae 0102 	sub.w	r1, lr, r2
 800bc54:	44a6      	add	lr, r4
 800bc56:	4402      	add	r2, r0
 800bc58:	b289      	uxth	r1, r1
 800bc5a:	fa0f fe8e 	sxth.w	lr, lr
 800bc5e:	b212      	sxth	r2, r2
 800bc60:	b20d      	sxth	r5, r1
 800bc62:	ebae 0202 	sub.w	r2, lr, r2
 800bc66:	436f      	muls	r7, r5
 800bc68:	4372      	muls	r2, r6
 800bc6a:	4297      	cmp	r7, r2
 800bc6c:	db09      	blt.n	800bc82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 800bc6e:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
 800bc72:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
 800bc76:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 800bc7a:	449c      	add	ip, r3
 800bc7c:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 800bc80:	e686      	b.n	800b990 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800bc82:	4421      	add	r1, r4
 800bc84:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 800bc88:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
 800bc8c:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 800bc90:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 800bc94:	e67c      	b.n	800b990 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800bc96:	9f04      	ldr	r7, [sp, #16]
 800bc98:	42b8      	cmp	r0, r7
 800bc9a:	da27      	bge.n	800bcec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 800bc9c:	9902      	ldr	r1, [sp, #8]
 800bc9e:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 800bca2:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 800bca6:	eb05 010e 	add.w	r1, r5, lr
 800bcaa:	fa1f f881 	uxth.w	r8, r1
 800bcae:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
 800bcb2:	4411      	add	r1, r2
 800bcb4:	eba1 0108 	sub.w	r1, r1, r8
 800bcb8:	b289      	uxth	r1, r1
 800bcba:	fa0f f988 	sxth.w	r9, r8
 800bcbe:	eba2 020e 	sub.w	r2, r2, lr
 800bcc2:	fa0f f881 	sxth.w	r8, r1
 800bcc6:	1a3f      	subs	r7, r7, r0
 800bcc8:	4372      	muls	r2, r6
 800bcca:	fb08 f707 	mul.w	r7, r8, r7
 800bcce:	42ba      	cmp	r2, r7
 800bcd0:	dc06      	bgt.n	800bce0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 800bcd2:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
 800bcd6:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
 800bcda:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 800bcde:	e7ca      	b.n	800bc76 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 800bce0:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 800bce4:	4429      	add	r1, r5
 800bce6:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 800bcea:	e651      	b.n	800b990 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800bcec:	9805      	ldr	r0, [sp, #20]
 800bcee:	ebaa 0000 	sub.w	r0, sl, r0
 800bcf2:	b280      	uxth	r0, r0
 800bcf4:	2d06      	cmp	r5, #6
 800bcf6:	fa0f fe80 	sxth.w	lr, r0
 800bcfa:	d817      	bhi.n	800bd2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 800bcfc:	9b04      	ldr	r3, [sp, #16]
 800bcfe:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 800bd02:	1c6b      	adds	r3, r5, #1
 800bd04:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 800bd08:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
 800bd0c:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 800bd10:	9b01      	ldr	r3, [sp, #4]
 800bd12:	9801      	ldr	r0, [sp, #4]
 800bd14:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800bd18:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 800bd1c:	805a      	strh	r2, [r3, #2]
 800bd1e:	809e      	strh	r6, [r3, #4]
 800bd20:	80d9      	strh	r1, [r3, #6]
 800bd22:	9b02      	ldr	r3, [sp, #8]
 800bd24:	3b01      	subs	r3, #1
 800bd26:	9302      	str	r3, [sp, #8]
 800bd28:	3c08      	subs	r4, #8
 800bd2a:	e747      	b.n	800bbbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 800bd2c:	9a02      	ldr	r2, [sp, #8]
 800bd2e:	45b6      	cmp	lr, r6
 800bd30:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800bd34:	db0d      	blt.n	800bd52 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 800bd36:	449c      	add	ip, r3
 800bd38:	fa1f fc8c 	uxth.w	ip, ip
 800bd3c:	445a      	add	r2, fp
 800bd3e:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 800bd42:	448c      	add	ip, r1
 800bd44:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 800bd48:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
 800bd4c:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
 800bd50:	e61e      	b.n	800b990 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800bd52:	445a      	add	r2, fp
 800bd54:	4484      	add	ip, r0
 800bd56:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 800bd5a:	e78f      	b.n	800bc7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 800bd5c:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 800bd60:	fa1f f18e 	uxth.w	r1, lr
 800bd64:	eb01 0806 	add.w	r8, r1, r6
 800bd68:	b293      	uxth	r3, r2
 800bd6a:	fa1f f888 	uxth.w	r8, r8
 800bd6e:	9306      	str	r3, [sp, #24]
 800bd70:	fa0f f388 	sxth.w	r3, r8
 800bd74:	9307      	str	r3, [sp, #28]
 800bd76:	9f06      	ldr	r7, [sp, #24]
 800bd78:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 800bd7c:	443b      	add	r3, r7
 800bd7e:	b29b      	uxth	r3, r3
 800bd80:	4596      	cmp	lr, r2
 800bd82:	9308      	str	r3, [sp, #32]
 800bd84:	da24      	bge.n	800bdd0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 800bd86:	9905      	ldr	r1, [sp, #20]
 800bd88:	eba3 0308 	sub.w	r3, r3, r8
 800bd8c:	ebaa 0401 	sub.w	r4, sl, r1
 800bd90:	b2a4      	uxth	r4, r4
 800bd92:	b29b      	uxth	r3, r3
 800bd94:	b225      	sxth	r5, r4
 800bd96:	b219      	sxth	r1, r3
 800bd98:	eba2 020e 	sub.w	r2, r2, lr
 800bd9c:	eba9 0000 	sub.w	r0, r9, r0
 800bda0:	436a      	muls	r2, r5
 800bda2:	4348      	muls	r0, r1
 800bda4:	4282      	cmp	r2, r0
 800bda6:	9a02      	ldr	r2, [sp, #8]
 800bda8:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800bdac:	445a      	add	r2, fp
 800bdae:	dc06      	bgt.n	800bdbe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 800bdb0:	9b07      	ldr	r3, [sp, #28]
 800bdb2:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
 800bdb6:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 800bdba:	44a4      	add	ip, r4
 800bdbc:	e75e      	b.n	800bc7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 800bdbe:	9904      	ldr	r1, [sp, #16]
 800bdc0:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
 800bdc4:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
 800bdc8:	4433      	add	r3, r6
 800bdca:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 800bdce:	e5df      	b.n	800b990 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800bdd0:	9f06      	ldr	r7, [sp, #24]
 800bdd2:	9b04      	ldr	r3, [sp, #16]
 800bdd4:	1bc9      	subs	r1, r1, r7
 800bdd6:	fa0f f78a 	sxth.w	r7, sl
 800bdda:	b289      	uxth	r1, r1
 800bddc:	429f      	cmp	r7, r3
 800bdde:	fa0f fe81 	sxth.w	lr, r1
 800bde2:	dd23      	ble.n	800be2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 800bde4:	9a05      	ldr	r2, [sp, #20]
 800bde6:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 800bdea:	9d07      	ldr	r5, [sp, #28]
 800bdec:	ebaa 0202 	sub.w	r2, sl, r2
 800bdf0:	b292      	uxth	r2, r2
 800bdf2:	eba5 0a03 	sub.w	sl, r5, r3
 800bdf6:	b214      	sxth	r4, r2
 800bdf8:	eba9 0000 	sub.w	r0, r9, r0
 800bdfc:	9b02      	ldr	r3, [sp, #8]
 800bdfe:	fb0e f000 	mul.w	r0, lr, r0
 800be02:	fb04 fa0a 	mul.w	sl, r4, sl
 800be06:	00db      	lsls	r3, r3, #3
 800be08:	4550      	cmp	r0, sl
 800be0a:	445b      	add	r3, fp
 800be0c:	db03      	blt.n	800be16 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 800be0e:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
 800be12:	4494      	add	ip, r2
 800be14:	e732      	b.n	800bc7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 800be16:	9a04      	ldr	r2, [sp, #16]
 800be18:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 800be1c:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
 800be20:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 800be24:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 800be28:	4431      	add	r1, r6
 800be2a:	e75c      	b.n	800bce6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 800be2c:	9b08      	ldr	r3, [sp, #32]
 800be2e:	eba3 0308 	sub.w	r3, r3, r8
 800be32:	b29b      	uxth	r3, r3
 800be34:	2d06      	cmp	r5, #6
 800be36:	b218      	sxth	r0, r3
 800be38:	d813      	bhi.n	800be62 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 800be3a:	9b07      	ldr	r3, [sp, #28]
 800be3c:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 800be40:	1c6b      	adds	r3, r5, #1
 800be42:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 800be46:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 800be4a:	9b01      	ldr	r3, [sp, #4]
 800be4c:	9901      	ldr	r1, [sp, #4]
 800be4e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800be52:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 800be56:	805a      	strh	r2, [r3, #2]
 800be58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be5a:	809a      	strh	r2, [r3, #4]
 800be5c:	f8a3 e006 	strh.w	lr, [r3, #6]
 800be60:	e75f      	b.n	800bd22 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 800be62:	9c02      	ldr	r4, [sp, #8]
 800be64:	4570      	cmp	r0, lr
 800be66:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800be6a:	db0d      	blt.n	800be88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 800be6c:	4431      	add	r1, r6
 800be6e:	9b06      	ldr	r3, [sp, #24]
 800be70:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 800be74:	b289      	uxth	r1, r1
 800be76:	445c      	add	r4, fp
 800be78:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 800be7c:	4419      	add	r1, r3
 800be7e:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
 800be82:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 800be86:	e583      	b.n	800b990 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800be88:	445c      	add	r4, fp
 800be8a:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
 800be8e:	e79b      	b.n	800bdc8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 800be90:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
 800be94:	2e07      	cmp	r6, #7
 800be96:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 800be9a:	d812      	bhi.n	800bec2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x55e>
 800be9c:	1c75      	adds	r5, r6, #1
 800be9e:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
 800bea2:	9d01      	ldr	r5, [sp, #4]
 800bea4:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 800bea8:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 800beac:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 800beb0:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 800beb4:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 800beb8:	442c      	add	r4, r5
 800beba:	8061      	strh	r1, [r4, #2]
 800bebc:	80a2      	strh	r2, [r4, #4]
 800bebe:	80e3      	strh	r3, [r4, #6]
 800bec0:	e5d0      	b.n	800ba64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800bec2:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 800bec6:	3e01      	subs	r6, #1
 800bec8:	445c      	add	r4, fp
 800beca:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 800bece:	f04f 37ff 	mov.w	r7, #4294967295
 800bed2:	2500      	movs	r5, #0
 800bed4:	9305      	str	r3, [sp, #20]
 800bed6:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 800beda:	9302      	str	r3, [sp, #8]
 800bedc:	1e72      	subs	r2, r6, #1
 800bede:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 800bee2:	9304      	str	r3, [sp, #16]
 800bee4:	4691      	mov	r9, r2
 800bee6:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 800beea:	f1b9 3fff 	cmp.w	r9, #4294967295
 800beee:	bf14      	ite	ne
 800bef0:	9905      	ldrne	r1, [sp, #20]
 800bef2:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 800bef6:	6818      	ldr	r0, [r3, #0]
 800bef8:	9207      	str	r2, [sp, #28]
 800befa:	bf18      	it	ne
 800befc:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 800bf00:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800bf04:	f8be 1006 	ldrh.w	r1, [lr, #6]
 800bf08:	f8be 8004 	ldrh.w	r8, [lr, #4]
 800bf0c:	9306      	str	r3, [sp, #24]
 800bf0e:	fb18 f801 	smulbb	r8, r8, r1
 800bf12:	6859      	ldr	r1, [r3, #4]
 800bf14:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800bf18:	4671      	mov	r1, lr
 800bf1a:	a80c      	add	r0, sp, #48	; 0x30
 800bf1c:	f7ff fbbc 	bl	800b698 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800bf20:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 800bf24:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 800bf28:	9b04      	ldr	r3, [sp, #16]
 800bf2a:	9a02      	ldr	r2, [sp, #8]
 800bf2c:	fb10 f001 	smulbb	r0, r0, r1
 800bf30:	fb02 8803 	mla	r8, r2, r3, r8
 800bf34:	eba0 0108 	sub.w	r1, r0, r8
 800bf38:	f04f 0c08 	mov.w	ip, #8
 800bf3c:	fb90 f0fc 	sdiv	r0, r0, ip
 800bf40:	4288      	cmp	r0, r1
 800bf42:	dc20      	bgt.n	800bf86 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x622>
 800bf44:	4551      	cmp	r1, sl
 800bf46:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800bf4a:	da03      	bge.n	800bf54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
 800bf4c:	b1d9      	cbz	r1, 800bf86 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x622>
 800bf4e:	468a      	mov	sl, r1
 800bf50:	464f      	mov	r7, r9
 800bf52:	4635      	mov	r5, r6
 800bf54:	f109 39ff 	add.w	r9, r9, #4294967295
 800bf58:	f119 0f02 	cmn.w	r9, #2
 800bf5c:	d1c5      	bne.n	800beea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x586>
 800bf5e:	4616      	mov	r6, r2
 800bf60:	3201      	adds	r2, #1
 800bf62:	f1a4 0408 	sub.w	r4, r4, #8
 800bf66:	d1b6      	bne.n	800bed6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x572>
 800bf68:	9b01      	ldr	r3, [sp, #4]
 800bf6a:	b2ac      	uxth	r4, r5
 800bf6c:	00ed      	lsls	r5, r5, #3
 800bf6e:	1958      	adds	r0, r3, r5
 800bf70:	1c7b      	adds	r3, r7, #1
 800bf72:	d10b      	bne.n	800bf8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x628>
 800bf74:	4601      	mov	r1, r0
 800bf76:	9803      	ldr	r0, [sp, #12]
 800bf78:	f7ff fb8e 	bl	800b698 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800bf7c:	4621      	mov	r1, r4
 800bf7e:	9801      	ldr	r0, [sp, #4]
 800bf80:	f7ff fcdc 	bl	800b93c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800bf84:	e504      	b.n	800b990 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800bf86:	464f      	mov	r7, r9
 800bf88:	4635      	mov	r5, r6
 800bf8a:	e7ed      	b.n	800bf68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x604>
 800bf8c:	9b01      	ldr	r3, [sp, #4]
 800bf8e:	00ff      	lsls	r7, r7, #3
 800bf90:	19d9      	adds	r1, r3, r7
 800bf92:	f7ff fb81 	bl	800b698 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800bf96:	9b03      	ldr	r3, [sp, #12]
 800bf98:	cb03      	ldmia	r3!, {r0, r1}
 800bf9a:	445f      	add	r7, fp
 800bf9c:	445d      	add	r5, fp
 800bf9e:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 800bfa2:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 800bfa6:	f855 0fac 	ldr.w	r0, [r5, #172]!
 800bfaa:	9b03      	ldr	r3, [sp, #12]
 800bfac:	6869      	ldr	r1, [r5, #4]
 800bfae:	c303      	stmia	r3!, {r0, r1}
 800bfb0:	e7e4      	b.n	800bf7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x618>
 800bfb2:	bf00      	nop

0800bfb4 <_ZN8touchgfx11Application10invalidateEv>:
 800bfb4:	4b09      	ldr	r3, [pc, #36]	; (800bfdc <_ZN8touchgfx11Application10invalidateEv+0x28>)
 800bfb6:	f9b3 2000 	ldrsh.w	r2, [r3]
 800bfba:	4b09      	ldr	r3, [pc, #36]	; (800bfe0 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 800bfbc:	b082      	sub	sp, #8
 800bfbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bfc2:	f8ad 3006 	strh.w	r3, [sp, #6]
 800bfc6:	2100      	movs	r1, #0
 800bfc8:	9100      	str	r1, [sp, #0]
 800bfca:	f8ad 2004 	strh.w	r2, [sp, #4]
 800bfce:	ab02      	add	r3, sp, #8
 800bfd0:	e913 0006 	ldmdb	r3, {r1, r2}
 800bfd4:	b002      	add	sp, #8
 800bfd6:	f7ff bcc5 	b.w	800b964 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800bfda:	bf00      	nop
 800bfdc:	200012c8 	.word	0x200012c8
 800bfe0:	200012ca 	.word	0x200012ca

0800bfe4 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 800bfe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfe8:	f500 7698 	add.w	r6, r0, #304	; 0x130
 800bfec:	b09b      	sub	sp, #108	; 0x6c
 800bfee:	4604      	mov	r4, r0
 800bff0:	4630      	mov	r0, r6
 800bff2:	f7fc fb12 	bl	800861a <_ZNK8touchgfx4Rect7isEmptyEv>
 800bff6:	4605      	mov	r5, r0
 800bff8:	b940      	cbnz	r0, 800c00c <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 800bffa:	e896 0006 	ldmia.w	r6, {r1, r2}
 800bffe:	4620      	mov	r0, r4
 800c000:	f7ff fcb0 	bl	800b964 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800c004:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 800c008:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 800c00c:	4bc9      	ldr	r3, [pc, #804]	; (800c334 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d03e      	beq.n	800c092 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 800c014:	4dc8      	ldr	r5, [pc, #800]	; (800c338 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 800c016:	4628      	mov	r0, r5
 800c018:	f7fc faff 	bl	800861a <_ZNK8touchgfx4Rect7isEmptyEv>
 800c01c:	4606      	mov	r6, r0
 800c01e:	2800      	cmp	r0, #0
 800c020:	d137      	bne.n	800c092 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 800c022:	4628      	mov	r0, r5
 800c024:	f7ff f9ee 	bl	800b404 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800c028:	6829      	ldr	r1, [r5, #0]
 800c02a:	686a      	ldr	r2, [r5, #4]
 800c02c:	4620      	mov	r0, r4
 800c02e:	f7ff fc99 	bl	800b964 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800c032:	802e      	strh	r6, [r5, #0]
 800c034:	806e      	strh	r6, [r5, #2]
 800c036:	80ae      	strh	r6, [r5, #4]
 800c038:	80ee      	strh	r6, [r5, #6]
 800c03a:	ae09      	add	r6, sp, #36	; 0x24
 800c03c:	4630      	mov	r0, r6
 800c03e:	f7ff fc25 	bl	800b88c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800c042:	4abe      	ldr	r2, [pc, #760]	; (800c33c <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 800c044:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 800c048:	8815      	ldrh	r5, [r2, #0]
 800c04a:	9202      	str	r2, [sp, #8]
 800c04c:	462b      	mov	r3, r5
 800c04e:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 800c052:	429f      	cmp	r7, r3
 800c054:	d924      	bls.n	800c0a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 800c056:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 800c05a:	2907      	cmp	r1, #7
 800c05c:	d816      	bhi.n	800c08c <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 800c05e:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 800c062:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 800c066:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 800c06a:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 800c06e:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 800c072:	1c4a      	adds	r2, r1, #1
 800c074:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 800c078:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 800c07c:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 800c080:	f8a2 9002 	strh.w	r9, [r2, #2]
 800c084:	f8a2 e004 	strh.w	lr, [r2, #4]
 800c088:	f8a2 c006 	strh.w	ip, [r2, #6]
 800c08c:	3301      	adds	r3, #1
 800c08e:	b29b      	uxth	r3, r3
 800c090:	e7df      	b.n	800c052 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 800c092:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 800c096:	2b00      	cmp	r3, #0
 800c098:	d1cf      	bne.n	800c03a <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 800c09a:	b01b      	add	sp, #108	; 0x6c
 800c09c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0a0:	462f      	mov	r7, r5
 800c0a2:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
 800c0a6:	42bb      	cmp	r3, r7
 800c0a8:	d90b      	bls.n	800c0c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 800c0aa:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 800c0ae:	4620      	mov	r0, r4
 800c0b0:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
 800c0b4:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
 800c0b8:	3701      	adds	r7, #1
 800c0ba:	f7ff fc53 	bl	800b964 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800c0be:	b2bf      	uxth	r7, r7
 800c0c0:	e7ef      	b.n	800c0a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 800c0c2:	4a9f      	ldr	r2, [pc, #636]	; (800c340 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 800c0c4:	6813      	ldr	r3, [r2, #0]
 800c0c6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800c0ca:	2b01      	cmp	r3, #1
 800c0cc:	4690      	mov	r8, r2
 800c0ce:	f040 80e6 	bne.w	800c29e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ba>
 800c0d2:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 800c0d6:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 800c0da:	4629      	mov	r1, r5
 800c0dc:	33ae      	adds	r3, #174	; 0xae
 800c0de:	2500      	movs	r5, #0
 800c0e0:	428f      	cmp	r7, r1
 800c0e2:	f103 0308 	add.w	r3, r3, #8
 800c0e6:	dd0a      	ble.n	800c0fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 800c0e8:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 800c0ec:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 800c0f0:	4402      	add	r2, r0
 800c0f2:	b212      	sxth	r2, r2
 800c0f4:	4295      	cmp	r5, r2
 800c0f6:	bfb8      	it	lt
 800c0f8:	4615      	movlt	r5, r2
 800c0fa:	3101      	adds	r1, #1
 800c0fc:	e7f0      	b.n	800c0e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 800c0fe:	4b91      	ldr	r3, [pc, #580]	; (800c344 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 800c100:	f8df b23c 	ldr.w	fp, [pc, #572]	; 800c340 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>
 800c104:	881b      	ldrh	r3, [r3, #0]
 800c106:	2b0f      	cmp	r3, #15
 800c108:	bf88      	it	hi
 800c10a:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 800c10e:	f04f 0300 	mov.w	r3, #0
 800c112:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800c116:	bf98      	it	ls
 800c118:	f04f 0a01 	movls.w	sl, #1
 800c11c:	46d8      	mov	r8, fp
 800c11e:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 800c122:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 800c126:	4438      	add	r0, r7
 800c128:	b207      	sxth	r7, r0
 800c12a:	f8db 0000 	ldr.w	r0, [fp]
 800c12e:	42bd      	cmp	r5, r7
 800c130:	6803      	ldr	r3, [r0, #0]
 800c132:	f340 8084 	ble.w	800c23e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 800c136:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c13a:	4798      	blx	r3
 800c13c:	eb07 030a 	add.w	r3, r7, sl
 800c140:	4298      	cmp	r0, r3
 800c142:	da07      	bge.n	800c154 <_ZN8touchgfx11Application15drawCachedAreasEv+0x170>
 800c144:	4285      	cmp	r5, r0
 800c146:	dd05      	ble.n	800c154 <_ZN8touchgfx11Application15drawCachedAreasEv+0x170>
 800c148:	4287      	cmp	r7, r0
 800c14a:	dd6d      	ble.n	800c228 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 800c14c:	2f00      	cmp	r7, #0
 800c14e:	dd6b      	ble.n	800c228 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 800c150:	4628      	mov	r0, r5
 800c152:	e004      	b.n	800c15e <_ZN8touchgfx11Application15drawCachedAreasEv+0x17a>
 800c154:	4287      	cmp	r7, r0
 800c156:	dcfb      	bgt.n	800c150 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 800c158:	42a8      	cmp	r0, r5
 800c15a:	bfa8      	it	ge
 800c15c:	4628      	movge	r0, r5
 800c15e:	4b7a      	ldr	r3, [pc, #488]	; (800c348 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 800c160:	f8ad 7016 	strh.w	r7, [sp, #22]
 800c164:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c168:	f8ad 3018 	strh.w	r3, [sp, #24]
 800c16c:	9b02      	ldr	r3, [sp, #8]
 800c16e:	1bc0      	subs	r0, r0, r7
 800c170:	2200      	movs	r2, #0
 800c172:	881f      	ldrh	r7, [r3, #0]
 800c174:	f8ad 2014 	strh.w	r2, [sp, #20]
 800c178:	f8ad 001a 	strh.w	r0, [sp, #26]
 800c17c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 800c180:	42bb      	cmp	r3, r7
 800c182:	d9cc      	bls.n	800c11e <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 800c184:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 800c188:	ab07      	add	r3, sp, #28
 800c18a:	f852 0fac 	ldr.w	r0, [r2, #172]!
 800c18e:	6851      	ldr	r1, [r2, #4]
 800c190:	c303      	stmia	r3!, {r0, r1}
 800c192:	a905      	add	r1, sp, #20
 800c194:	a807      	add	r0, sp, #28
 800c196:	f7ff f9e7 	bl	800b568 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800c19a:	2800      	cmp	r0, #0
 800c19c:	d04c      	beq.n	800c238 <_ZN8touchgfx11Application15drawCachedAreasEv+0x254>
 800c19e:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 800c1a2:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 800c1a6:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 800c1aa:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 800c1ae:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800c1b2:	9303      	str	r3, [sp, #12]
 800c1b4:	4686      	mov	lr, r0
 800c1b6:	4290      	cmp	r0, r2
 800c1b8:	4448      	add	r0, r9
 800c1ba:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 800c1be:	bfb8      	it	lt
 800c1c0:	4696      	movlt	lr, r2
 800c1c2:	444a      	add	r2, r9
 800c1c4:	4299      	cmp	r1, r3
 800c1c6:	b280      	uxth	r0, r0
 800c1c8:	b292      	uxth	r2, r2
 800c1ca:	468c      	mov	ip, r1
 800c1cc:	fa0f f982 	sxth.w	r9, r2
 800c1d0:	bfb8      	it	lt
 800c1d2:	469c      	movlt	ip, r3
 800c1d4:	b203      	sxth	r3, r0
 800c1d6:	454b      	cmp	r3, r9
 800c1d8:	bfb8      	it	lt
 800c1da:	4602      	movlt	r2, r0
 800c1dc:	eba2 020e 	sub.w	r2, r2, lr
 800c1e0:	f8ad 2020 	strh.w	r2, [sp, #32]
 800c1e4:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 800c1e8:	9b03      	ldr	r3, [sp, #12]
 800c1ea:	f8ad e01c 	strh.w	lr, [sp, #28]
 800c1ee:	4411      	add	r1, r2
 800c1f0:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800c1f4:	f8ad c01e 	strh.w	ip, [sp, #30]
 800c1f8:	4413      	add	r3, r2
 800c1fa:	b289      	uxth	r1, r1
 800c1fc:	b29b      	uxth	r3, r3
 800c1fe:	b208      	sxth	r0, r1
 800c200:	b21a      	sxth	r2, r3
 800c202:	4290      	cmp	r0, r2
 800c204:	bfb8      	it	lt
 800c206:	460b      	movlt	r3, r1
 800c208:	eba3 030c 	sub.w	r3, r3, ip
 800c20c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800c210:	a807      	add	r0, sp, #28
 800c212:	f7fc fa02 	bl	800861a <_ZNK8touchgfx4Rect7isEmptyEv>
 800c216:	b920      	cbnz	r0, 800c222 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23e>
 800c218:	6823      	ldr	r3, [r4, #0]
 800c21a:	a907      	add	r1, sp, #28
 800c21c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c21e:	4620      	mov	r0, r4
 800c220:	4798      	blx	r3
 800c222:	3701      	adds	r7, #1
 800c224:	b2bf      	uxth	r7, r7
 800c226:	e7a9      	b.n	800c17c <_ZN8touchgfx11Application15drawCachedAreasEv+0x198>
 800c228:	f8d8 0000 	ldr.w	r0, [r8]
 800c22c:	6803      	ldr	r3, [r0, #0]
 800c22e:	2101      	movs	r1, #1
 800c230:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c234:	4798      	blx	r3
 800c236:	e772      	b.n	800c11e <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 800c238:	e9cd 0007 	strd	r0, r0, [sp, #28]
 800c23c:	e7e8      	b.n	800c210 <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 800c23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c240:	4798      	blx	r3
 800c242:	4b42      	ldr	r3, [pc, #264]	; (800c34c <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 800c244:	781b      	ldrb	r3, [r3, #0]
 800c246:	2b00      	cmp	r3, #0
 800c248:	f43f af27 	beq.w	800c09a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 800c24c:	2300      	movs	r3, #0
 800c24e:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
 800c252:	9b02      	ldr	r3, [sp, #8]
 800c254:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 800c258:	881b      	ldrh	r3, [r3, #0]
 800c25a:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 800c25e:	429d      	cmp	r5, r3
 800c260:	f67f af1b 	bls.w	800c09a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 800c264:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
 800c268:	2907      	cmp	r1, #7
 800c26a:	d815      	bhi.n	800c298 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b4>
 800c26c:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800c270:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 800c274:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 800c278:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 800c27c:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 800c280:	1c4a      	adds	r2, r1, #1
 800c282:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 800c286:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 800c28a:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 800c28e:	f8a2 e002 	strh.w	lr, [r2, #2]
 800c292:	f8a2 c004 	strh.w	ip, [r2, #4]
 800c296:	80d7      	strh	r7, [r2, #6]
 800c298:	3301      	adds	r3, #1
 800c29a:	b29b      	uxth	r3, r3
 800c29c:	e7df      	b.n	800c25e <_ZN8touchgfx11Application15drawCachedAreasEv+0x27a>
 800c29e:	2b02      	cmp	r3, #2
 800c2a0:	f040 8136 	bne.w	800c510 <_ZN8touchgfx11Application15drawCachedAreasEv+0x52c>
 800c2a4:	4b2a      	ldr	r3, [pc, #168]	; (800c350 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>)
 800c2a6:	781b      	ldrb	r3, [r3, #0]
 800c2a8:	2b01      	cmp	r3, #1
 800c2aa:	f104 09ac 	add.w	r9, r4, #172	; 0xac
 800c2ae:	f000 809c 	beq.w	800c3ea <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 800c2b2:	9b02      	ldr	r3, [sp, #8]
 800c2b4:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
 800c2b8:	f8b3 b000 	ldrh.w	fp, [r3]
 800c2bc:	f10b 0b01 	add.w	fp, fp, #1
 800c2c0:	fa1f fb8b 	uxth.w	fp, fp
 800c2c4:	2a00      	cmp	r2, #0
 800c2c6:	d0bc      	beq.n	800c242 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 800c2c8:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	; 0xae
 800c2cc:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 800c2d0:	441d      	add	r5, r3
 800c2d2:	b22d      	sxth	r5, r5
 800c2d4:	4659      	mov	r1, fp
 800c2d6:	f04f 0800 	mov.w	r8, #0
 800c2da:	b28b      	uxth	r3, r1
 800c2dc:	429a      	cmp	r2, r3
 800c2de:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 800c2e2:	f240 80c1 	bls.w	800c468 <_ZN8touchgfx11Application15drawCachedAreasEv+0x484>
 800c2e6:	4427      	add	r7, r4
 800c2e8:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 800c2ec:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 800c2f0:	f9be c0ae 	ldrsh.w	ip, [lr, #174]	; 0xae
 800c2f4:	4563      	cmp	r3, ip
 800c2f6:	4608      	mov	r0, r1
 800c2f8:	f340 80a3 	ble.w	800c442 <_ZN8touchgfx11Application15drawCachedAreasEv+0x45e>
 800c2fc:	f8be 50b2 	ldrh.w	r5, [lr, #178]	; 0xb2
 800c300:	4465      	add	r5, ip
 800c302:	b22d      	sxth	r5, r5
 800c304:	429d      	cmp	r5, r3
 800c306:	bfa8      	it	ge
 800c308:	461d      	movge	r5, r3
 800c30a:	3101      	adds	r1, #1
 800c30c:	4680      	mov	r8, r0
 800c30e:	e7e4      	b.n	800c2da <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 800c310:	d10b      	bne.n	800c32a <_ZN8touchgfx11Application15drawCachedAreasEv+0x346>
 800c312:	f9b5 c0b2 	ldrsh.w	ip, [r5, #178]	; 0xb2
 800c316:	f9ba 10b2 	ldrsh.w	r1, [sl, #178]	; 0xb2
 800c31a:	458c      	cmp	ip, r1
 800c31c:	bfb4      	ite	lt
 800c31e:	469c      	movlt	ip, r3
 800c320:	46bc      	movge	ip, r7
 800c322:	4572      	cmp	r2, lr
 800c324:	bfb8      	it	lt
 800c326:	4672      	movlt	r2, lr
 800c328:	e088      	b.n	800c43c <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 800c32a:	428a      	cmp	r2, r1
 800c32c:	bfb8      	it	lt
 800c32e:	460a      	movlt	r2, r1
 800c330:	46bc      	mov	ip, r7
 800c332:	e083      	b.n	800c43c <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 800c334:	2000130c 	.word	0x2000130c
 800c338:	20001318 	.word	0x20001318
 800c33c:	20000018 	.word	0x20000018
 800c340:	200012d4 	.word	0x200012d4
 800c344:	200012ca 	.word	0x200012ca
 800c348:	200012c8 	.word	0x200012c8
 800c34c:	200012d2 	.word	0x200012d2
 800c350:	200012cc 	.word	0x200012cc
 800c354:	1961      	adds	r1, r4, r5
 800c356:	ab07      	add	r3, sp, #28
 800c358:	f851 0fac 	ldr.w	r0, [r1, #172]!
 800c35c:	6849      	ldr	r1, [r1, #4]
 800c35e:	c303      	stmia	r3!, {r0, r1}
 800c360:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 800c364:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800c368:	2b13      	cmp	r3, #19
 800c36a:	bfd8      	it	le
 800c36c:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 800c370:	f8ad 201c 	strh.w	r2, [sp, #28]
 800c374:	440b      	add	r3, r1
 800c376:	1a9b      	subs	r3, r3, r2
 800c378:	a807      	add	r0, sp, #28
 800c37a:	f8ad 3020 	strh.w	r3, [sp, #32]
 800c37e:	f7ff f85b 	bl	800b438 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800c382:	a807      	add	r0, sp, #28
 800c384:	f7fc f949 	bl	800861a <_ZNK8touchgfx4Rect7isEmptyEv>
 800c388:	bb78      	cbnz	r0, 800c3ea <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 800c38a:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 800c38e:	f8d8 0000 	ldr.w	r0, [r8]
 800c392:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800c396:	f8d0 e000 	ldr.w	lr, [r0]
 800c39a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800c39e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800c3a2:	f1bc 0f14 	cmp.w	ip, #20
 800c3a6:	bfa8      	it	ge
 800c3a8:	f04f 0c14 	movge.w	ip, #20
 800c3ac:	fa1f fc8c 	uxth.w	ip, ip
 800c3b0:	f8cd c000 	str.w	ip, [sp]
 800c3b4:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 800c3b8:	47d0      	blx	sl
 800c3ba:	4682      	mov	sl, r0
 800c3bc:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 800c3c0:	a807      	add	r0, sp, #28
 800c3c2:	f7ff f81f 	bl	800b404 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800c3c6:	6823      	ldr	r3, [r4, #0]
 800c3c8:	4425      	add	r5, r4
 800c3ca:	4620      	mov	r0, r4
 800c3cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3ce:	a907      	add	r1, sp, #28
 800c3d0:	4798      	blx	r3
 800c3d2:	f8b5 00b0 	ldrh.w	r0, [r5, #176]	; 0xb0
 800c3d6:	eba0 000a 	sub.w	r0, r0, sl
 800c3da:	b200      	sxth	r0, r0
 800c3dc:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
 800c3e0:	b918      	cbnz	r0, 800c3ea <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 800c3e2:	b2b9      	uxth	r1, r7
 800c3e4:	4648      	mov	r0, r9
 800c3e6:	f7ff faa9 	bl	800b93c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800c3ea:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
 800c3ee:	f1bb 0f00 	cmp.w	fp, #0
 800c3f2:	f43f af26 	beq.w	800c242 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 800c3f6:	9b02      	ldr	r3, [sp, #8]
 800c3f8:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 800c3fc:	881b      	ldrh	r3, [r3, #0]
 800c3fe:	3301      	adds	r3, #1
 800c400:	b29b      	uxth	r3, r3
 800c402:	2700      	movs	r7, #0
 800c404:	b299      	uxth	r1, r3
 800c406:	458b      	cmp	fp, r1
 800c408:	ea4f 05c7 	mov.w	r5, r7, lsl #3
 800c40c:	d9a2      	bls.n	800c354 <_ZN8touchgfx11Application15drawCachedAreasEv+0x370>
 800c40e:	4425      	add	r5, r4
 800c410:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 800c414:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
 800c418:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 800c41c:	f9ba e0ac 	ldrsh.w	lr, [sl, #172]	; 0xac
 800c420:	4408      	add	r0, r1
 800c422:	f8ba 10b0 	ldrh.w	r1, [sl, #176]	; 0xb0
 800c426:	4471      	add	r1, lr
 800c428:	b200      	sxth	r0, r0
 800c42a:	b209      	sxth	r1, r1
 800c42c:	4288      	cmp	r0, r1
 800c42e:	469c      	mov	ip, r3
 800c430:	f6bf af6e 	bge.w	800c310 <_ZN8touchgfx11Application15drawCachedAreasEv+0x32c>
 800c434:	4586      	cmp	lr, r0
 800c436:	4672      	mov	r2, lr
 800c438:	bfb8      	it	lt
 800c43a:	4602      	movlt	r2, r0
 800c43c:	3301      	adds	r3, #1
 800c43e:	4667      	mov	r7, ip
 800c440:	e7e0      	b.n	800c404 <_ZN8touchgfx11Application15drawCachedAreasEv+0x420>
 800c442:	d10c      	bne.n	800c45e <_ZN8touchgfx11Application15drawCachedAreasEv+0x47a>
 800c444:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
 800c448:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
 800c44c:	4287      	cmp	r7, r0
 800c44e:	bfb4      	ite	lt
 800c450:	4608      	movlt	r0, r1
 800c452:	4640      	movge	r0, r8
 800c454:	f8be 70b2 	ldrh.w	r7, [lr, #178]	; 0xb2
 800c458:	443b      	add	r3, r7
 800c45a:	b21b      	sxth	r3, r3
 800c45c:	e752      	b.n	800c304 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 800c45e:	4565      	cmp	r5, ip
 800c460:	bfa8      	it	ge
 800c462:	4665      	movge	r5, ip
 800c464:	4640      	mov	r0, r8
 800c466:	e750      	b.n	800c30a <_ZN8touchgfx11Application15drawCachedAreasEv+0x326>
 800c468:	eb09 0007 	add.w	r0, r9, r7
 800c46c:	4427      	add	r7, r4
 800c46e:	9203      	str	r2, [sp, #12]
 800c470:	f9b7 a0b2 	ldrsh.w	sl, [r7, #178]	; 0xb2
 800c474:	f1ba 0f13 	cmp.w	sl, #19
 800c478:	bfde      	ittt	le
 800c47a:	f8b7 50ae 	ldrhle.w	r5, [r7, #174]	; 0xae
 800c47e:	4455      	addle	r5, sl
 800c480:	b22d      	sxthle	r5, r5
 800c482:	f7fc f8ca 	bl	800861a <_ZNK8touchgfx4Rect7isEmptyEv>
 800c486:	9a03      	ldr	r2, [sp, #12]
 800c488:	2800      	cmp	r0, #0
 800c48a:	f47f af1b 	bne.w	800c2c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e0>
 800c48e:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 800c492:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 800c496:	482a      	ldr	r0, [pc, #168]	; (800c540 <_ZN8touchgfx11Application15drawCachedAreasEv+0x55c>)
 800c498:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 800c49c:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 800c4a0:	6800      	ldr	r0, [r0, #0]
 800c4a2:	f8ad 101c 	strh.w	r1, [sp, #28]
 800c4a6:	1aad      	subs	r5, r5, r2
 800c4a8:	2d14      	cmp	r5, #20
 800c4aa:	f8ad 201e 	strh.w	r2, [sp, #30]
 800c4ae:	f8ad 3020 	strh.w	r3, [sp, #32]
 800c4b2:	bfa8      	it	ge
 800c4b4:	2514      	movge	r5, #20
 800c4b6:	f8d0 c000 	ldr.w	ip, [r0]
 800c4ba:	b2ad      	uxth	r5, r5
 800c4bc:	fa1f fa8a 	uxth.w	sl, sl
 800c4c0:	4555      	cmp	r5, sl
 800c4c2:	bf94      	ite	ls
 800c4c4:	9500      	strls	r5, [sp, #0]
 800c4c6:	f8cd a000 	strhi.w	sl, [sp]
 800c4ca:	b292      	uxth	r2, r2
 800c4cc:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 800c4d0:	b29b      	uxth	r3, r3
 800c4d2:	b289      	uxth	r1, r1
 800c4d4:	47a8      	blx	r5
 800c4d6:	6823      	ldr	r3, [r4, #0]
 800c4d8:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 800c4dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4de:	a907      	add	r1, sp, #28
 800c4e0:	4620      	mov	r0, r4
 800c4e2:	4798      	blx	r3
 800c4e4:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800c4e8:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800c4ec:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 800c4f0:	1a5b      	subs	r3, r3, r1
 800c4f2:	440a      	add	r2, r1
 800c4f4:	b21b      	sxth	r3, r3
 800c4f6:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 800c4fa:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	f47f aed7 	bne.w	800c2b2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ce>
 800c504:	fa1f f188 	uxth.w	r1, r8
 800c508:	4648      	mov	r0, r9
 800c50a:	f7ff fa17 	bl	800b93c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800c50e:	e6d0      	b.n	800c2b2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ce>
 800c510:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 800c514:	42ab      	cmp	r3, r5
 800c516:	f67f ae94 	bls.w	800c242 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 800c51a:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 800c51e:	ab07      	add	r3, sp, #28
 800c520:	f852 0fac 	ldr.w	r0, [r2, #172]!
 800c524:	6851      	ldr	r1, [r2, #4]
 800c526:	c303      	stmia	r3!, {r0, r1}
 800c528:	a807      	add	r0, sp, #28
 800c52a:	f7fc f876 	bl	800861a <_ZNK8touchgfx4Rect7isEmptyEv>
 800c52e:	b920      	cbnz	r0, 800c53a <_ZN8touchgfx11Application15drawCachedAreasEv+0x556>
 800c530:	6823      	ldr	r3, [r4, #0]
 800c532:	a907      	add	r1, sp, #28
 800c534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c536:	4620      	mov	r0, r4
 800c538:	4798      	blx	r3
 800c53a:	3501      	adds	r5, #1
 800c53c:	b2ad      	uxth	r5, r5
 800c53e:	e7e7      	b.n	800c510 <_ZN8touchgfx11Application15drawCachedAreasEv+0x52c>
 800c540:	200012d4 	.word	0x200012d4

0800c544 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 800c544:	4b03      	ldr	r3, [pc, #12]	; (800c554 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 800c546:	2200      	movs	r2, #0
 800c548:	801a      	strh	r2, [r3, #0]
 800c54a:	805a      	strh	r2, [r3, #2]
 800c54c:	809a      	strh	r2, [r3, #4]
 800c54e:	80da      	strh	r2, [r3, #6]
 800c550:	4770      	bx	lr
 800c552:	bf00      	nop
 800c554:	20001318 	.word	0x20001318

0800c558 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 800c558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c55c:	4606      	mov	r6, r0
 800c55e:	b09d      	sub	sp, #116	; 0x74
 800c560:	a803      	add	r0, sp, #12
 800c562:	4614      	mov	r4, r2
 800c564:	468a      	mov	sl, r1
 800c566:	461d      	mov	r5, r3
 800c568:	f000 fd72 	bl	800d050 <_ZN8touchgfx12TextProviderC1Ev>
 800c56c:	6833      	ldr	r3, [r6, #0]
 800c56e:	4630      	mov	r0, r6
 800c570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c572:	4798      	blx	r3
 800c574:	6833      	ldr	r3, [r6, #0]
 800c576:	4607      	mov	r7, r0
 800c578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c57a:	4630      	mov	r0, r6
 800c57c:	4798      	blx	r3
 800c57e:	462a      	mov	r2, r5
 800c580:	9000      	str	r0, [sp, #0]
 800c582:	4621      	mov	r1, r4
 800c584:	463b      	mov	r3, r7
 800c586:	a803      	add	r0, sp, #12
 800c588:	f000 fdbd 	bl	800d106 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800c58c:	2500      	movs	r5, #0
 800c58e:	462c      	mov	r4, r5
 800c590:	46a9      	mov	r9, r5
 800c592:	46a8      	mov	r8, r5
 800c594:	f242 0b0b 	movw	fp, #8203	; 0x200b
 800c598:	2300      	movs	r3, #0
 800c59a:	9302      	str	r3, [sp, #8]
 800c59c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800c5a0:	429c      	cmp	r4, r3
 800c5a2:	d002      	beq.n	800c5aa <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 800c5a4:	455c      	cmp	r4, fp
 800c5a6:	bf18      	it	ne
 800c5a8:	4625      	movne	r5, r4
 800c5aa:	ab02      	add	r3, sp, #8
 800c5ac:	4632      	mov	r2, r6
 800c5ae:	4651      	mov	r1, sl
 800c5b0:	a803      	add	r0, sp, #12
 800c5b2:	f001 f8ab 	bl	800d70c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800c5b6:	4604      	mov	r4, r0
 800c5b8:	b108      	cbz	r0, 800c5be <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 800c5ba:	280a      	cmp	r0, #10
 800c5bc:	d10a      	bne.n	800c5d4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 800c5be:	45c1      	cmp	r9, r8
 800c5c0:	bf38      	it	cc
 800c5c2:	46c1      	movcc	r9, r8
 800c5c4:	f04f 0800 	mov.w	r8, #0
 800c5c8:	2c00      	cmp	r4, #0
 800c5ca:	d1e5      	bne.n	800c598 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 800c5cc:	4648      	mov	r0, r9
 800c5ce:	b01d      	add	sp, #116	; 0x74
 800c5d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5d4:	9a02      	ldr	r2, [sp, #8]
 800c5d6:	2a00      	cmp	r2, #0
 800c5d8:	d0de      	beq.n	800c598 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 800c5da:	7b57      	ldrb	r7, [r2, #13]
 800c5dc:	6833      	ldr	r3, [r6, #0]
 800c5de:	8894      	ldrh	r4, [r2, #4]
 800c5e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5e2:	007f      	lsls	r7, r7, #1
 800c5e4:	f407 7080 	and.w	r0, r7, #256	; 0x100
 800c5e8:	7a97      	ldrb	r7, [r2, #10]
 800c5ea:	4629      	mov	r1, r5
 800c5ec:	4307      	orrs	r7, r0
 800c5ee:	4630      	mov	r0, r6
 800c5f0:	4798      	blx	r3
 800c5f2:	4438      	add	r0, r7
 800c5f4:	4480      	add	r8, r0
 800c5f6:	fa1f f888 	uxth.w	r8, r8
 800c5fa:	e7e5      	b.n	800c5c8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0800c5fc <_ZNK8touchgfx4Font12getCharWidthEt>:
 800c5fc:	b508      	push	{r3, lr}
 800c5fe:	6803      	ldr	r3, [r0, #0]
 800c600:	68db      	ldr	r3, [r3, #12]
 800c602:	4798      	blx	r3
 800c604:	b128      	cbz	r0, 800c612 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 800c606:	7b43      	ldrb	r3, [r0, #13]
 800c608:	7a80      	ldrb	r0, [r0, #10]
 800c60a:	005b      	lsls	r3, r3, #1
 800c60c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c610:	4318      	orrs	r0, r3
 800c612:	bd08      	pop	{r3, pc}

0800c614 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 800c614:	b40e      	push	{r1, r2, r3}
 800c616:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c618:	b09e      	sub	sp, #120	; 0x78
 800c61a:	ab23      	add	r3, sp, #140	; 0x8c
 800c61c:	4605      	mov	r5, r0
 800c61e:	f853 4b04 	ldr.w	r4, [r3], #4
 800c622:	9303      	str	r3, [sp, #12]
 800c624:	a805      	add	r0, sp, #20
 800c626:	f000 fd13 	bl	800d050 <_ZN8touchgfx12TextProviderC1Ev>
 800c62a:	682b      	ldr	r3, [r5, #0]
 800c62c:	4628      	mov	r0, r5
 800c62e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c630:	4798      	blx	r3
 800c632:	682b      	ldr	r3, [r5, #0]
 800c634:	4606      	mov	r6, r0
 800c636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c638:	4628      	mov	r0, r5
 800c63a:	4798      	blx	r3
 800c63c:	4633      	mov	r3, r6
 800c63e:	ae1e      	add	r6, sp, #120	; 0x78
 800c640:	4621      	mov	r1, r4
 800c642:	9000      	str	r0, [sp, #0]
 800c644:	9a03      	ldr	r2, [sp, #12]
 800c646:	2400      	movs	r4, #0
 800c648:	a805      	add	r0, sp, #20
 800c64a:	f000 fd5c 	bl	800d106 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800c64e:	f846 4d68 	str.w	r4, [r6, #-104]!
 800c652:	462a      	mov	r2, r5
 800c654:	4633      	mov	r3, r6
 800c656:	4621      	mov	r1, r4
 800c658:	a805      	add	r0, sp, #20
 800c65a:	f001 f857 	bl	800d70c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800c65e:	b1f0      	cbz	r0, 800c69e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 800c660:	280a      	cmp	r0, #10
 800c662:	d018      	beq.n	800c696 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 800c664:	9f04      	ldr	r7, [sp, #16]
 800c666:	b1b7      	cbz	r7, 800c696 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 800c668:	7b78      	ldrb	r0, [r7, #13]
 800c66a:	7a3b      	ldrb	r3, [r7, #8]
 800c66c:	88ea      	ldrh	r2, [r5, #6]
 800c66e:	00c1      	lsls	r1, r0, #3
 800c670:	f401 7180 	and.w	r1, r1, #256	; 0x100
 800c674:	4319      	orrs	r1, r3
 800c676:	0643      	lsls	r3, r0, #25
 800c678:	bf44      	itt	mi
 800c67a:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 800c67e:	b219      	sxthmi	r1, r3
 800c680:	0100      	lsls	r0, r0, #4
 800c682:	79fb      	ldrb	r3, [r7, #7]
 800c684:	f400 7080 	and.w	r0, r0, #256	; 0x100
 800c688:	4303      	orrs	r3, r0
 800c68a:	4413      	add	r3, r2
 800c68c:	1a5b      	subs	r3, r3, r1
 800c68e:	b21b      	sxth	r3, r3
 800c690:	429c      	cmp	r4, r3
 800c692:	bfb8      	it	lt
 800c694:	461c      	movlt	r4, r3
 800c696:	4633      	mov	r3, r6
 800c698:	462a      	mov	r2, r5
 800c69a:	2100      	movs	r1, #0
 800c69c:	e7dc      	b.n	800c658 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 800c69e:	b2a0      	uxth	r0, r4
 800c6a0:	b01e      	add	sp, #120	; 0x78
 800c6a2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c6a6:	b003      	add	sp, #12
 800c6a8:	4770      	bx	lr

0800c6aa <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 800c6aa:	7a43      	ldrb	r3, [r0, #9]
 800c6ac:	8880      	ldrh	r0, [r0, #4]
 800c6ae:	4418      	add	r0, r3
 800c6b0:	b280      	uxth	r0, r0
 800c6b2:	4770      	bx	lr

0800c6b4 <_ZNK8touchgfx4Font13getFontHeightEv>:
 800c6b4:	6803      	ldr	r3, [r0, #0]
 800c6b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6b8:	4718      	bx	r3

0800c6ba <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 800c6ba:	b40e      	push	{r1, r2, r3}
 800c6bc:	b570      	push	{r4, r5, r6, lr}
 800c6be:	b09d      	sub	sp, #116	; 0x74
 800c6c0:	ab21      	add	r3, sp, #132	; 0x84
 800c6c2:	4604      	mov	r4, r0
 800c6c4:	f853 5b04 	ldr.w	r5, [r3], #4
 800c6c8:	9302      	str	r3, [sp, #8]
 800c6ca:	a803      	add	r0, sp, #12
 800c6cc:	f000 fcc0 	bl	800d050 <_ZN8touchgfx12TextProviderC1Ev>
 800c6d0:	6823      	ldr	r3, [r4, #0]
 800c6d2:	4620      	mov	r0, r4
 800c6d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6d6:	4798      	blx	r3
 800c6d8:	6823      	ldr	r3, [r4, #0]
 800c6da:	4606      	mov	r6, r0
 800c6dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6de:	4620      	mov	r0, r4
 800c6e0:	4798      	blx	r3
 800c6e2:	4633      	mov	r3, r6
 800c6e4:	9000      	str	r0, [sp, #0]
 800c6e6:	9a02      	ldr	r2, [sp, #8]
 800c6e8:	4629      	mov	r1, r5
 800c6ea:	a803      	add	r0, sp, #12
 800c6ec:	f000 fd0b 	bl	800d106 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800c6f0:	a803      	add	r0, sp, #12
 800c6f2:	f001 f8d9 	bl	800d8a8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800c6f6:	2401      	movs	r4, #1
 800c6f8:	b2a3      	uxth	r3, r4
 800c6fa:	b140      	cbz	r0, 800c70e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 800c6fc:	280a      	cmp	r0, #10
 800c6fe:	bf08      	it	eq
 800c700:	3301      	addeq	r3, #1
 800c702:	a803      	add	r0, sp, #12
 800c704:	bf08      	it	eq
 800c706:	b21c      	sxtheq	r4, r3
 800c708:	f001 f8ce 	bl	800d8a8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800c70c:	e7f4      	b.n	800c6f8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 800c70e:	4618      	mov	r0, r3
 800c710:	b01d      	add	sp, #116	; 0x74
 800c712:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c716:	b003      	add	sp, #12
 800c718:	4770      	bx	lr

0800c71a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 800c71a:	b40e      	push	{r1, r2, r3}
 800c71c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c71e:	b09e      	sub	sp, #120	; 0x78
 800c720:	ab23      	add	r3, sp, #140	; 0x8c
 800c722:	4604      	mov	r4, r0
 800c724:	f853 5b04 	ldr.w	r5, [r3], #4
 800c728:	9303      	str	r3, [sp, #12]
 800c72a:	a805      	add	r0, sp, #20
 800c72c:	f000 fc90 	bl	800d050 <_ZN8touchgfx12TextProviderC1Ev>
 800c730:	6823      	ldr	r3, [r4, #0]
 800c732:	4620      	mov	r0, r4
 800c734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c736:	4798      	blx	r3
 800c738:	6823      	ldr	r3, [r4, #0]
 800c73a:	4606      	mov	r6, r0
 800c73c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c73e:	4620      	mov	r0, r4
 800c740:	4798      	blx	r3
 800c742:	4633      	mov	r3, r6
 800c744:	4629      	mov	r1, r5
 800c746:	9000      	str	r0, [sp, #0]
 800c748:	9a03      	ldr	r2, [sp, #12]
 800c74a:	a805      	add	r0, sp, #20
 800c74c:	ad1e      	add	r5, sp, #120	; 0x78
 800c74e:	f000 fcda 	bl	800d106 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800c752:	2100      	movs	r1, #0
 800c754:	f845 1d68 	str.w	r1, [r5, #-104]!
 800c758:	4622      	mov	r2, r4
 800c75a:	462b      	mov	r3, r5
 800c75c:	a805      	add	r0, sp, #20
 800c75e:	f000 ffd5 	bl	800d70c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800c762:	f647 76ff 	movw	r6, #32767	; 0x7fff
 800c766:	b1d8      	cbz	r0, 800c7a0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 800c768:	280a      	cmp	r0, #10
 800c76a:	d012      	beq.n	800c792 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 800c76c:	9804      	ldr	r0, [sp, #16]
 800c76e:	b180      	cbz	r0, 800c792 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 800c770:	7b47      	ldrb	r7, [r0, #13]
 800c772:	88e2      	ldrh	r2, [r4, #6]
 800c774:	00fb      	lsls	r3, r7, #3
 800c776:	f403 7180 	and.w	r1, r3, #256	; 0x100
 800c77a:	7a03      	ldrb	r3, [r0, #8]
 800c77c:	430b      	orrs	r3, r1
 800c77e:	0679      	lsls	r1, r7, #25
 800c780:	bf44      	itt	mi
 800c782:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800c786:	b21b      	sxthmi	r3, r3
 800c788:	1ad3      	subs	r3, r2, r3
 800c78a:	b21b      	sxth	r3, r3
 800c78c:	429e      	cmp	r6, r3
 800c78e:	bfa8      	it	ge
 800c790:	461e      	movge	r6, r3
 800c792:	462b      	mov	r3, r5
 800c794:	4622      	mov	r2, r4
 800c796:	2100      	movs	r1, #0
 800c798:	a805      	add	r0, sp, #20
 800c79a:	f000 ffb7 	bl	800d70c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800c79e:	e7e2      	b.n	800c766 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 800c7a0:	4630      	mov	r0, r6
 800c7a2:	b01e      	add	sp, #120	; 0x78
 800c7a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c7a8:	b003      	add	sp, #12
 800c7aa:	4770      	bx	lr

0800c7ac <_ZNK8touchgfx8Drawable10invalidateEv>:
 800c7ac:	b513      	push	{r0, r1, r4, lr}
 800c7ae:	6803      	ldr	r3, [r0, #0]
 800c7b0:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800c7b4:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800c7b8:	f8ad 1004 	strh.w	r1, [sp, #4]
 800c7bc:	2400      	movs	r4, #0
 800c7be:	9400      	str	r4, [sp, #0]
 800c7c0:	f8ad 2006 	strh.w	r2, [sp, #6]
 800c7c4:	691b      	ldr	r3, [r3, #16]
 800c7c6:	4669      	mov	r1, sp
 800c7c8:	4798      	blx	r3
 800c7ca:	b002      	add	sp, #8
 800c7cc:	bd10      	pop	{r4, pc}

0800c7ce <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 800c7ce:	b538      	push	{r3, r4, r5, lr}
 800c7d0:	680b      	ldr	r3, [r1, #0]
 800c7d2:	460c      	mov	r4, r1
 800c7d4:	68db      	ldr	r3, [r3, #12]
 800c7d6:	4605      	mov	r5, r0
 800c7d8:	4798      	blx	r3
 800c7da:	6823      	ldr	r3, [r4, #0]
 800c7dc:	4620      	mov	r0, r4
 800c7de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7e0:	4629      	mov	r1, r5
 800c7e2:	4798      	blx	r3
 800c7e4:	4628      	mov	r0, r5
 800c7e6:	bd38      	pop	{r3, r4, r5, pc}

0800c7e8 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 800c7e8:	b410      	push	{r4}
 800c7ea:	880a      	ldrh	r2, [r1, #0]
 800c7ec:	8884      	ldrh	r4, [r0, #4]
 800c7ee:	4422      	add	r2, r4
 800c7f0:	800a      	strh	r2, [r1, #0]
 800c7f2:	88c4      	ldrh	r4, [r0, #6]
 800c7f4:	884a      	ldrh	r2, [r1, #2]
 800c7f6:	4422      	add	r2, r4
 800c7f8:	804a      	strh	r2, [r1, #2]
 800c7fa:	6940      	ldr	r0, [r0, #20]
 800c7fc:	b120      	cbz	r0, 800c808 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 800c7fe:	6803      	ldr	r3, [r0, #0]
 800c800:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c806:	4718      	bx	r3
 800c808:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c80c:	4770      	bx	lr

0800c80e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 800c80e:	b570      	push	{r4, r5, r6, lr}
 800c810:	8882      	ldrh	r2, [r0, #4]
 800c812:	880b      	ldrh	r3, [r1, #0]
 800c814:	4413      	add	r3, r2
 800c816:	800b      	strh	r3, [r1, #0]
 800c818:	88c2      	ldrh	r2, [r0, #6]
 800c81a:	884b      	ldrh	r3, [r1, #2]
 800c81c:	460c      	mov	r4, r1
 800c81e:	4413      	add	r3, r2
 800c820:	804b      	strh	r3, [r1, #2]
 800c822:	4605      	mov	r5, r0
 800c824:	1d01      	adds	r1, r0, #4
 800c826:	4620      	mov	r0, r4
 800c828:	f7fb feb4 	bl	8008594 <_ZN8touchgfx4RectaNERKS0_>
 800c82c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800c830:	2b00      	cmp	r3, #0
 800c832:	dd0b      	ble.n	800c84c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800c834:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	dd07      	ble.n	800c84c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800c83c:	6968      	ldr	r0, [r5, #20]
 800c83e:	b128      	cbz	r0, 800c84c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800c840:	6803      	ldr	r3, [r0, #0]
 800c842:	4621      	mov	r1, r4
 800c844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c846:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c84a:	4718      	bx	r3
 800c84c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c850 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 800c850:	b570      	push	{r4, r5, r6, lr}
 800c852:	8882      	ldrh	r2, [r0, #4]
 800c854:	880b      	ldrh	r3, [r1, #0]
 800c856:	4413      	add	r3, r2
 800c858:	800b      	strh	r3, [r1, #0]
 800c85a:	88c2      	ldrh	r2, [r0, #6]
 800c85c:	884b      	ldrh	r3, [r1, #2]
 800c85e:	460c      	mov	r4, r1
 800c860:	4413      	add	r3, r2
 800c862:	804b      	strh	r3, [r1, #2]
 800c864:	4605      	mov	r5, r0
 800c866:	1d01      	adds	r1, r0, #4
 800c868:	4620      	mov	r0, r4
 800c86a:	f7fb fe93 	bl	8008594 <_ZN8touchgfx4RectaNERKS0_>
 800c86e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800c872:	2b00      	cmp	r3, #0
 800c874:	dd18      	ble.n	800c8a8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 800c876:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	dd14      	ble.n	800c8a8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 800c87e:	6968      	ldr	r0, [r5, #20]
 800c880:	b128      	cbz	r0, 800c88e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 800c882:	6803      	ldr	r3, [r0, #0]
 800c884:	4621      	mov	r1, r4
 800c886:	691b      	ldr	r3, [r3, #16]
 800c888:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c88c:	4718      	bx	r3
 800c88e:	4b07      	ldr	r3, [pc, #28]	; (800c8ac <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	3304      	adds	r3, #4
 800c894:	429d      	cmp	r5, r3
 800c896:	d107      	bne.n	800c8a8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 800c898:	f7fe ff44 	bl	800b724 <_ZN8touchgfx11Application11getInstanceEv>
 800c89c:	6821      	ldr	r1, [r4, #0]
 800c89e:	6862      	ldr	r2, [r4, #4]
 800c8a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c8a4:	f7ff b85e 	b.w	800b964 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800c8a8:	bd70      	pop	{r4, r5, r6, pc}
 800c8aa:	bf00      	nop
 800c8ac:	20001310 	.word	0x20001310

0800c8b0 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 800c8b0:	b570      	push	{r4, r5, r6, lr}
 800c8b2:	4604      	mov	r4, r0
 800c8b4:	4616      	mov	r6, r2
 800c8b6:	460d      	mov	r5, r1
 800c8b8:	b901      	cbnz	r1, 800c8bc <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 800c8ba:	b192      	cbz	r2, 800c8e2 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 800c8bc:	6823      	ldr	r3, [r4, #0]
 800c8be:	4620      	mov	r0, r4
 800c8c0:	699b      	ldr	r3, [r3, #24]
 800c8c2:	4798      	blx	r3
 800c8c4:	88e2      	ldrh	r2, [r4, #6]
 800c8c6:	88a1      	ldrh	r1, [r4, #4]
 800c8c8:	4432      	add	r2, r6
 800c8ca:	4429      	add	r1, r5
 800c8cc:	4620      	mov	r0, r4
 800c8ce:	b212      	sxth	r2, r2
 800c8d0:	b209      	sxth	r1, r1
 800c8d2:	f7f8 fd7c 	bl	80053ce <_ZN8touchgfx8Drawable5setXYEss>
 800c8d6:	6823      	ldr	r3, [r4, #0]
 800c8d8:	4620      	mov	r0, r4
 800c8da:	699b      	ldr	r3, [r3, #24]
 800c8dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c8e0:	4718      	bx	r3
 800c8e2:	bd70      	pop	{r4, r5, r6, pc}

0800c8e4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 800c8e4:	b510      	push	{r4, lr}
 800c8e6:	4604      	mov	r4, r0
 800c8e8:	4608      	mov	r0, r1
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	8023      	strh	r3, [r4, #0]
 800c8ee:	8063      	strh	r3, [r4, #2]
 800c8f0:	6803      	ldr	r3, [r0, #0]
 800c8f2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800c8f6:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 800c8fa:	80a1      	strh	r1, [r4, #4]
 800c8fc:	80e2      	strh	r2, [r4, #6]
 800c8fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c900:	4621      	mov	r1, r4
 800c902:	4798      	blx	r3
 800c904:	4620      	mov	r0, r4
 800c906:	bd10      	pop	{r4, pc}

0800c908 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 800c908:	b530      	push	{r4, r5, lr}
 800c90a:	8083      	strh	r3, [r0, #4]
 800c90c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800c910:	80c3      	strh	r3, [r0, #6]
 800c912:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800c916:	7203      	strb	r3, [r0, #8]
 800c918:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800c91c:	f89d 5018 	ldrb.w	r5, [sp, #24]
 800c920:	7243      	strb	r3, [r0, #9]
 800c922:	7a83      	ldrb	r3, [r0, #10]
 800c924:	6141      	str	r1, [r0, #20]
 800c926:	f365 0306 	bfi	r3, r5, #0, #7
 800c92a:	f89d 501c 	ldrb.w	r5, [sp, #28]
 800c92e:	8302      	strh	r2, [r0, #24]
 800c930:	f365 13c7 	bfi	r3, r5, #7, #1
 800c934:	7283      	strb	r3, [r0, #10]
 800c936:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800c93a:	72c3      	strb	r3, [r0, #11]
 800c93c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800c940:	7303      	strb	r3, [r0, #12]
 800c942:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 800c946:	81c3      	strh	r3, [r0, #14]
 800c948:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800c94c:	8203      	strh	r3, [r0, #16]
 800c94e:	4b01      	ldr	r3, [pc, #4]	; (800c954 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 800c950:	6003      	str	r3, [r0, #0]
 800c952:	bd30      	pop	{r4, r5, pc}
 800c954:	080128d8 	.word	0x080128d8

0800c958 <_ZNK8touchgfx9ConstFont4findEt>:
 800c958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c95a:	6944      	ldr	r4, [r0, #20]
 800c95c:	b3bc      	cbz	r4, 800c9ce <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800c95e:	88a3      	ldrh	r3, [r4, #4]
 800c960:	8b02      	ldrh	r2, [r0, #24]
 800c962:	1acb      	subs	r3, r1, r3
 800c964:	f102 32ff 	add.w	r2, r2, #4294967295
 800c968:	d431      	bmi.n	800c9ce <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800c96a:	4293      	cmp	r3, r2
 800c96c:	dd0c      	ble.n	800c988 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 800c96e:	230e      	movs	r3, #14
 800c970:	fb03 4302 	mla	r3, r3, r2, r4
 800c974:	889b      	ldrh	r3, [r3, #4]
 800c976:	1a5b      	subs	r3, r3, r1
 800c978:	1ad3      	subs	r3, r2, r3
 800c97a:	429a      	cmp	r2, r3
 800c97c:	db27      	blt.n	800c9ce <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800c97e:	2b00      	cmp	r3, #0
 800c980:	bfbc      	itt	lt
 800c982:	2302      	movlt	r3, #2
 800c984:	fb92 f3f3 	sdivlt	r3, r2, r3
 800c988:	2500      	movs	r5, #0
 800c98a:	260e      	movs	r6, #14
 800c98c:	4295      	cmp	r5, r2
 800c98e:	dc1e      	bgt.n	800c9ce <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800c990:	fb06 4003 	mla	r0, r6, r3, r4
 800c994:	8887      	ldrh	r7, [r0, #4]
 800c996:	42b9      	cmp	r1, r7
 800c998:	d01a      	beq.n	800c9d0 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 800c99a:	d20d      	bcs.n	800c9b8 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 800c99c:	1e5a      	subs	r2, r3, #1
 800c99e:	4295      	cmp	r5, r2
 800c9a0:	dc15      	bgt.n	800c9ce <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800c9a2:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 800c9a6:	1a5b      	subs	r3, r3, r1
 800c9a8:	1ad3      	subs	r3, r2, r3
 800c9aa:	429a      	cmp	r2, r3
 800c9ac:	db0f      	blt.n	800c9ce <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800c9ae:	429d      	cmp	r5, r3
 800c9b0:	ddec      	ble.n	800c98c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800c9b2:	1953      	adds	r3, r2, r5
 800c9b4:	105b      	asrs	r3, r3, #1
 800c9b6:	e7e9      	b.n	800c98c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800c9b8:	1c5d      	adds	r5, r3, #1
 800c9ba:	42aa      	cmp	r2, r5
 800c9bc:	db07      	blt.n	800c9ce <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800c9be:	8a43      	ldrh	r3, [r0, #18]
 800c9c0:	1acb      	subs	r3, r1, r3
 800c9c2:	442b      	add	r3, r5
 800c9c4:	429d      	cmp	r5, r3
 800c9c6:	dc02      	bgt.n	800c9ce <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800c9c8:	429a      	cmp	r2, r3
 800c9ca:	dadf      	bge.n	800c98c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800c9cc:	e7f1      	b.n	800c9b2 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 800c9ce:	2000      	movs	r0, #0
 800c9d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c9d2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 800c9d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9d4:	4604      	mov	r4, r0
 800c9d6:	4617      	mov	r7, r2
 800c9d8:	461e      	mov	r6, r3
 800c9da:	b911      	cbnz	r1, 800c9e2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 800c9dc:	2500      	movs	r5, #0
 800c9de:	4628      	mov	r0, r5
 800c9e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9e2:	290a      	cmp	r1, #10
 800c9e4:	d0fa      	beq.n	800c9dc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800c9e6:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 800c9ea:	4291      	cmp	r1, r2
 800c9ec:	d0f6      	beq.n	800c9dc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800c9ee:	f242 020b 	movw	r2, #8203	; 0x200b
 800c9f2:	4291      	cmp	r1, r2
 800c9f4:	d0f2      	beq.n	800c9dc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800c9f6:	f7ff ffaf 	bl	800c958 <_ZNK8touchgfx9ConstFont4findEt>
 800c9fa:	4605      	mov	r5, r0
 800c9fc:	b950      	cbnz	r0, 800ca14 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 800c9fe:	6823      	ldr	r3, [r4, #0]
 800ca00:	4620      	mov	r0, r4
 800ca02:	691b      	ldr	r3, [r3, #16]
 800ca04:	4798      	blx	r3
 800ca06:	4601      	mov	r1, r0
 800ca08:	4620      	mov	r0, r4
 800ca0a:	f7ff ffa5 	bl	800c958 <_ZNK8touchgfx9ConstFont4findEt>
 800ca0e:	4605      	mov	r5, r0
 800ca10:	2800      	cmp	r0, #0
 800ca12:	d0e3      	beq.n	800c9dc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800ca14:	6823      	ldr	r3, [r4, #0]
 800ca16:	4629      	mov	r1, r5
 800ca18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca1a:	4620      	mov	r0, r4
 800ca1c:	4798      	blx	r3
 800ca1e:	6038      	str	r0, [r7, #0]
 800ca20:	6823      	ldr	r3, [r4, #0]
 800ca22:	4620      	mov	r0, r4
 800ca24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca26:	4798      	blx	r3
 800ca28:	7030      	strb	r0, [r6, #0]
 800ca2a:	e7d8      	b.n	800c9de <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0800ca2c <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 800ca2c:	2000      	movs	r0, #0
 800ca2e:	4770      	bx	lr

0800ca30 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 800ca30:	2001      	movs	r0, #1
 800ca32:	4770      	bx	lr

0800ca34 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 800ca34:	2002      	movs	r0, #2
 800ca36:	4770      	bx	lr

0800ca38 <_ZN8touchgfx12GestureEventD1Ev>:
 800ca38:	4770      	bx	lr

0800ca3a <_ZN8touchgfx9DragEventD1Ev>:
 800ca3a:	4770      	bx	lr

0800ca3c <_ZN8touchgfx10ClickEventD1Ev>:
 800ca3c:	4770      	bx	lr

0800ca3e <_ZN8touchgfx10ClickEventD0Ev>:
 800ca3e:	b510      	push	{r4, lr}
 800ca40:	210c      	movs	r1, #12
 800ca42:	4604      	mov	r4, r0
 800ca44:	f002 ff26 	bl	800f894 <_ZdlPvj>
 800ca48:	4620      	mov	r0, r4
 800ca4a:	bd10      	pop	{r4, pc}

0800ca4c <_ZN8touchgfx9DragEventD0Ev>:
 800ca4c:	b510      	push	{r4, lr}
 800ca4e:	2110      	movs	r1, #16
 800ca50:	4604      	mov	r4, r0
 800ca52:	f002 ff1f 	bl	800f894 <_ZdlPvj>
 800ca56:	4620      	mov	r0, r4
 800ca58:	bd10      	pop	{r4, pc}

0800ca5a <_ZN8touchgfx12GestureEventD0Ev>:
 800ca5a:	b510      	push	{r4, lr}
 800ca5c:	210c      	movs	r1, #12
 800ca5e:	4604      	mov	r4, r0
 800ca60:	f002 ff18 	bl	800f894 <_ZdlPvj>
 800ca64:	4620      	mov	r0, r4
 800ca66:	bd10      	pop	{r4, pc}

0800ca68 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 800ca68:	b530      	push	{r4, r5, lr}
 800ca6a:	460d      	mov	r5, r1
 800ca6c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800ca6e:	b087      	sub	sp, #28
 800ca70:	4604      	mov	r4, r0
 800ca72:	b301      	cbz	r1, 800cab6 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 800ca74:	a801      	add	r0, sp, #4
 800ca76:	f7ff ff35 	bl	800c8e4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800ca7a:	892a      	ldrh	r2, [r5, #8]
 800ca7c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800ca80:	7928      	ldrb	r0, [r5, #4]
 800ca82:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 800ca86:	f88d 0010 	strb.w	r0, [sp, #16]
 800ca8a:	1ad2      	subs	r2, r2, r3
 800ca8c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800ca8e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800ca90:	f8ad 1012 	strh.w	r1, [sp, #18]
 800ca94:	441a      	add	r2, r3
 800ca96:	896b      	ldrh	r3, [r5, #10]
 800ca98:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 800ca9c:	f8ad 2014 	strh.w	r2, [sp, #20]
 800caa0:	1b5b      	subs	r3, r3, r5
 800caa2:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 800caa4:	442b      	add	r3, r5
 800caa6:	4d05      	ldr	r5, [pc, #20]	; (800cabc <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 800caa8:	9503      	str	r5, [sp, #12]
 800caaa:	f8ad 3016 	strh.w	r3, [sp, #22]
 800caae:	6803      	ldr	r3, [r0, #0]
 800cab0:	a903      	add	r1, sp, #12
 800cab2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cab4:	4798      	blx	r3
 800cab6:	b007      	add	sp, #28
 800cab8:	bd30      	pop	{r4, r5, pc}
 800caba:	bf00      	nop
 800cabc:	08012960 	.word	0x08012960

0800cac0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 800cac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cac4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800cac6:	b08a      	sub	sp, #40	; 0x28
 800cac8:	4604      	mov	r4, r0
 800caca:	460d      	mov	r5, r1
 800cacc:	b113      	cbz	r3, 800cad4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 800cace:	790b      	ldrb	r3, [r1, #4]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d044      	beq.n	800cb5e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800cad4:	f104 0804 	add.w	r8, r4, #4
 800cad8:	4641      	mov	r1, r8
 800cada:	a803      	add	r0, sp, #12
 800cadc:	f7ff ff02 	bl	800c8e4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800cae0:	792b      	ldrb	r3, [r5, #4]
 800cae2:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 800cae6:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 800caea:	b983      	cbnz	r3, 800cb0e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 800caec:	892a      	ldrh	r2, [r5, #8]
 800caee:	88e9      	ldrh	r1, [r5, #6]
 800caf0:	f104 0336 	add.w	r3, r4, #54	; 0x36
 800caf4:	1b92      	subs	r2, r2, r6
 800caf6:	1bc9      	subs	r1, r1, r7
 800caf8:	9301      	str	r3, [sp, #4]
 800cafa:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800cafe:	9300      	str	r3, [sp, #0]
 800cb00:	b212      	sxth	r2, r2
 800cb02:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800cb06:	b209      	sxth	r1, r1
 800cb08:	4640      	mov	r0, r8
 800cb0a:	f7fb fc5f 	bl	80083cc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 800cb0e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800cb10:	b329      	cbz	r1, 800cb5e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800cb12:	a805      	add	r0, sp, #20
 800cb14:	f7ff fee6 	bl	800c8e4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800cb18:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800cb1c:	792b      	ldrb	r3, [r5, #4]
 800cb1e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800cb20:	f88d 3020 	strb.w	r3, [sp, #32]
 800cb24:	1abf      	subs	r7, r7, r2
 800cb26:	88ea      	ldrh	r2, [r5, #6]
 800cb28:	4417      	add	r7, r2
 800cb2a:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 800cb2c:	4417      	add	r7, r2
 800cb2e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800cb32:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 800cb36:	1ab6      	subs	r6, r6, r2
 800cb38:	892a      	ldrh	r2, [r5, #8]
 800cb3a:	4416      	add	r6, r2
 800cb3c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800cb3e:	4416      	add	r6, r2
 800cb40:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 800cb44:	4a07      	ldr	r2, [pc, #28]	; (800cb64 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 800cb46:	9207      	str	r2, [sp, #28]
 800cb48:	2600      	movs	r6, #0
 800cb4a:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 800cb4e:	6803      	ldr	r3, [r0, #0]
 800cb50:	a907      	add	r1, sp, #28
 800cb52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb54:	4798      	blx	r3
 800cb56:	792b      	ldrb	r3, [r5, #4]
 800cb58:	b10b      	cbz	r3, 800cb5e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800cb5a:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 800cb5e:	b00a      	add	sp, #40	; 0x28
 800cb60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb64:	08012938 	.word	0x08012938

0800cb68 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 800cb68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb6c:	460c      	mov	r4, r1
 800cb6e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800cb70:	b088      	sub	sp, #32
 800cb72:	4605      	mov	r5, r0
 800cb74:	2900      	cmp	r1, #0
 800cb76:	d06d      	beq.n	800cc54 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 800cb78:	4668      	mov	r0, sp
 800cb7a:	f7ff feb3 	bl	800c8e4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800cb7e:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 800cb80:	88e3      	ldrh	r3, [r4, #6]
 800cb82:	f9bd 8000 	ldrsh.w	r8, [sp]
 800cb86:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 800cb8a:	440b      	add	r3, r1
 800cb8c:	b21b      	sxth	r3, r3
 800cb8e:	4543      	cmp	r3, r8
 800cb90:	db31      	blt.n	800cbf6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800cb92:	f8bd c004 	ldrh.w	ip, [sp, #4]
 800cb96:	44c4      	add	ip, r8
 800cb98:	fa0f fc8c 	sxth.w	ip, ip
 800cb9c:	4563      	cmp	r3, ip
 800cb9e:	da2a      	bge.n	800cbf6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800cba0:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 800cba2:	8926      	ldrh	r6, [r4, #8]
 800cba4:	4416      	add	r6, r2
 800cba6:	b236      	sxth	r6, r6
 800cba8:	42be      	cmp	r6, r7
 800cbaa:	db24      	blt.n	800cbf6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800cbac:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800cbb0:	4438      	add	r0, r7
 800cbb2:	b200      	sxth	r0, r0
 800cbb4:	4286      	cmp	r6, r0
 800cbb6:	da1e      	bge.n	800cbf6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800cbb8:	8963      	ldrh	r3, [r4, #10]
 800cbba:	4419      	add	r1, r3
 800cbbc:	b209      	sxth	r1, r1
 800cbbe:	4541      	cmp	r1, r8
 800cbc0:	db08      	blt.n	800cbd4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800cbc2:	4561      	cmp	r1, ip
 800cbc4:	da06      	bge.n	800cbd4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800cbc6:	89a3      	ldrh	r3, [r4, #12]
 800cbc8:	441a      	add	r2, r3
 800cbca:	b212      	sxth	r2, r2
 800cbcc:	42ba      	cmp	r2, r7
 800cbce:	db01      	blt.n	800cbd4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800cbd0:	4282      	cmp	r2, r0
 800cbd2:	db10      	blt.n	800cbf6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800cbd4:	4b21      	ldr	r3, [pc, #132]	; (800cc5c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 800cbd6:	9304      	str	r3, [sp, #16]
 800cbd8:	2302      	movs	r3, #2
 800cbda:	f88d 3014 	strb.w	r3, [sp, #20]
 800cbde:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cbe6:	f8ad 3018 	strh.w	r3, [sp, #24]
 800cbea:	f8ad 301a 	strh.w	r3, [sp, #26]
 800cbee:	6803      	ldr	r3, [r0, #0]
 800cbf0:	a904      	add	r1, sp, #16
 800cbf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbf4:	4798      	blx	r3
 800cbf6:	1d29      	adds	r1, r5, #4
 800cbf8:	a802      	add	r0, sp, #8
 800cbfa:	f7ff fe73 	bl	800c8e4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800cbfe:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800cc02:	88e0      	ldrh	r0, [r4, #6]
 800cc04:	7921      	ldrb	r1, [r4, #4]
 800cc06:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 800cc0a:	8922      	ldrh	r2, [r4, #8]
 800cc0c:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 800cc0e:	f88d 1014 	strb.w	r1, [sp, #20]
 800cc12:	eba3 0808 	sub.w	r8, r3, r8
 800cc16:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800cc1a:	1bdf      	subs	r7, r3, r7
 800cc1c:	b2bb      	uxth	r3, r7
 800cc1e:	fa1f f888 	uxth.w	r8, r8
 800cc22:	8967      	ldrh	r7, [r4, #10]
 800cc24:	89a4      	ldrh	r4, [r4, #12]
 800cc26:	4440      	add	r0, r8
 800cc28:	4460      	add	r0, ip
 800cc2a:	441a      	add	r2, r3
 800cc2c:	44b8      	add	r8, r7
 800cc2e:	4423      	add	r3, r4
 800cc30:	f8ad 0016 	strh.w	r0, [sp, #22]
 800cc34:	4433      	add	r3, r6
 800cc36:	4432      	add	r2, r6
 800cc38:	44e0      	add	r8, ip
 800cc3a:	4c09      	ldr	r4, [pc, #36]	; (800cc60 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 800cc3c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800cc3e:	9404      	str	r4, [sp, #16]
 800cc40:	f8ad 2018 	strh.w	r2, [sp, #24]
 800cc44:	f8ad 801a 	strh.w	r8, [sp, #26]
 800cc48:	f8ad 301c 	strh.w	r3, [sp, #28]
 800cc4c:	6803      	ldr	r3, [r0, #0]
 800cc4e:	a904      	add	r1, sp, #16
 800cc50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc52:	4798      	blx	r3
 800cc54:	b008      	add	sp, #32
 800cc56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc5a:	bf00      	nop
 800cc5c:	08012938 	.word	0x08012938
 800cc60:	0801294c 	.word	0x0801294c

0800cc64 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 800cc64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cc66:	4604      	mov	r4, r0
 800cc68:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 800cc6c:	3201      	adds	r2, #1
 800cc6e:	d112      	bne.n	800cc96 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 800cc70:	6803      	ldr	r3, [r0, #0]
 800cc72:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800cc76:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800cc7a:	f8ad 1004 	strh.w	r1, [sp, #4]
 800cc7e:	2500      	movs	r5, #0
 800cc80:	9500      	str	r5, [sp, #0]
 800cc82:	466d      	mov	r5, sp
 800cc84:	4629      	mov	r1, r5
 800cc86:	f8ad 2006 	strh.w	r2, [sp, #6]
 800cc8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc8c:	4798      	blx	r3
 800cc8e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800cc92:	e884 0003 	stmia.w	r4, {r0, r1}
 800cc96:	4620      	mov	r0, r4
 800cc98:	b003      	add	sp, #12
 800cc9a:	bd30      	pop	{r4, r5, pc}

0800cc9c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 800cc9c:	b513      	push	{r0, r1, r4, lr}
 800cc9e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 800cca2:	3301      	adds	r3, #1
 800cca4:	4604      	mov	r4, r0
 800cca6:	d109      	bne.n	800ccbc <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 800cca8:	4601      	mov	r1, r0
 800ccaa:	4668      	mov	r0, sp
 800ccac:	f7ff fe1a 	bl	800c8e4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800ccb0:	f8bd 3000 	ldrh.w	r3, [sp]
 800ccb4:	8423      	strh	r3, [r4, #32]
 800ccb6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800ccba:	8463      	strh	r3, [r4, #34]	; 0x22
 800ccbc:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 800ccc0:	b002      	add	sp, #8
 800ccc2:	bd10      	pop	{r4, pc}

0800ccc4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 800ccc4:	b513      	push	{r0, r1, r4, lr}
 800ccc6:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 800ccca:	3301      	adds	r3, #1
 800cccc:	4604      	mov	r4, r0
 800ccce:	d109      	bne.n	800cce4 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 800ccd0:	4601      	mov	r1, r0
 800ccd2:	4668      	mov	r0, sp
 800ccd4:	f7ff fe06 	bl	800c8e4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800ccd8:	f8bd 3000 	ldrh.w	r3, [sp]
 800ccdc:	8423      	strh	r3, [r4, #32]
 800ccde:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800cce2:	8463      	strh	r3, [r4, #34]	; 0x22
 800cce4:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 800cce8:	b002      	add	sp, #8
 800ccea:	bd10      	pop	{r4, pc}

0800ccec <_ZN8touchgfx6ScreenC1Ev>:
 800ccec:	b570      	push	{r4, r5, r6, lr}
 800ccee:	4605      	mov	r5, r0
 800ccf0:	4b16      	ldr	r3, [pc, #88]	; (800cd4c <_ZN8touchgfx6ScreenC1Ev+0x60>)
 800ccf2:	f845 3b04 	str.w	r3, [r5], #4
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	8103      	strh	r3, [r0, #8]
 800ccfa:	8143      	strh	r3, [r0, #10]
 800ccfc:	8183      	strh	r3, [r0, #12]
 800ccfe:	81c3      	strh	r3, [r0, #14]
 800cd00:	8203      	strh	r3, [r0, #16]
 800cd02:	8243      	strh	r3, [r0, #18]
 800cd04:	8283      	strh	r3, [r0, #20]
 800cd06:	82c3      	strh	r3, [r0, #22]
 800cd08:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800cd0c:	6203      	str	r3, [r0, #32]
 800cd0e:	8483      	strh	r3, [r0, #36]	; 0x24
 800cd10:	84c3      	strh	r3, [r0, #38]	; 0x26
 800cd12:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 800cd16:	4a0e      	ldr	r2, [pc, #56]	; (800cd50 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 800cd18:	6343      	str	r3, [r0, #52]	; 0x34
 800cd1a:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 800cd1e:	4b0d      	ldr	r3, [pc, #52]	; (800cd54 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 800cd20:	6042      	str	r2, [r0, #4]
 800cd22:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cd26:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800cd28:	4a0b      	ldr	r2, [pc, #44]	; (800cd58 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 800cd2a:	4604      	mov	r4, r0
 800cd2c:	2101      	movs	r1, #1
 800cd2e:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 800cd32:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 800cd36:	f9b2 1000 	ldrsh.w	r1, [r2]
 800cd3a:	4628      	mov	r0, r5
 800cd3c:	4798      	blx	r3
 800cd3e:	6863      	ldr	r3, [r4, #4]
 800cd40:	4628      	mov	r0, r5
 800cd42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd44:	4631      	mov	r1, r6
 800cd46:	4798      	blx	r3
 800cd48:	4620      	mov	r0, r4
 800cd4a:	bd70      	pop	{r4, r5, r6, pc}
 800cd4c:	08012974 	.word	0x08012974
 800cd50:	0801245c 	.word	0x0801245c
 800cd54:	200012ca 	.word	0x200012ca
 800cd58:	200012c8 	.word	0x200012c8

0800cd5c <_ZN8touchgfx6Screen4drawEv>:
 800cd5c:	b507      	push	{r0, r1, r2, lr}
 800cd5e:	4b09      	ldr	r3, [pc, #36]	; (800cd84 <_ZN8touchgfx6Screen4drawEv+0x28>)
 800cd60:	f9b3 2000 	ldrsh.w	r2, [r3]
 800cd64:	4b08      	ldr	r3, [pc, #32]	; (800cd88 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 800cd66:	f8ad 2004 	strh.w	r2, [sp, #4]
 800cd6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cd6e:	f8ad 3006 	strh.w	r3, [sp, #6]
 800cd72:	6803      	ldr	r3, [r0, #0]
 800cd74:	2100      	movs	r1, #0
 800cd76:	9100      	str	r1, [sp, #0]
 800cd78:	689b      	ldr	r3, [r3, #8]
 800cd7a:	4669      	mov	r1, sp
 800cd7c:	4798      	blx	r3
 800cd7e:	b003      	add	sp, #12
 800cd80:	f85d fb04 	ldr.w	pc, [sp], #4
 800cd84:	200012c8 	.word	0x200012c8
 800cd88:	200012ca 	.word	0x200012ca

0800cd8c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 800cd8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd90:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	b089      	sub	sp, #36	; 0x24
 800cd98:	4680      	mov	r8, r0
 800cd9a:	460c      	mov	r4, r1
 800cd9c:	4615      	mov	r5, r2
 800cd9e:	dd0e      	ble.n	800cdbe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800cda0:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	dd0a      	ble.n	800cdbe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800cda8:	4628      	mov	r0, r5
 800cdaa:	f7ff ff5b 	bl	800cc64 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800cdae:	4621      	mov	r1, r4
 800cdb0:	f7fe fbda 	bl	800b568 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800cdb4:	69eb      	ldr	r3, [r5, #28]
 800cdb6:	b928      	cbnz	r0, 800cdc4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 800cdb8:	461d      	mov	r5, r3
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d1f4      	bne.n	800cda8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 800cdbe:	b009      	add	sp, #36	; 0x24
 800cdc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdc4:	ae04      	add	r6, sp, #16
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	f000 80b5 	beq.w	800cf36 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800cdcc:	682b      	ldr	r3, [r5, #0]
 800cdce:	4629      	mov	r1, r5
 800cdd0:	68db      	ldr	r3, [r3, #12]
 800cdd2:	a802      	add	r0, sp, #8
 800cdd4:	4798      	blx	r3
 800cdd6:	4628      	mov	r0, r5
 800cdd8:	f7ff ff60 	bl	800cc9c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 800cddc:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 800cde0:	4407      	add	r7, r0
 800cde2:	4628      	mov	r0, r5
 800cde4:	f7ff ff6e 	bl	800ccc4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 800cde8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800cdec:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 800cdf0:	f8ad 2014 	strh.w	r2, [sp, #20]
 800cdf4:	4418      	add	r0, r3
 800cdf6:	4621      	mov	r1, r4
 800cdf8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800cdfc:	f8ad 0012 	strh.w	r0, [sp, #18]
 800ce00:	b23f      	sxth	r7, r7
 800ce02:	4630      	mov	r0, r6
 800ce04:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ce08:	f8ad 7010 	strh.w	r7, [sp, #16]
 800ce0c:	f7fb fbc2 	bl	8008594 <_ZN8touchgfx4RectaNERKS0_>
 800ce10:	4628      	mov	r0, r5
 800ce12:	f7ff ff27 	bl	800cc64 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800ce16:	4602      	mov	r2, r0
 800ce18:	e896 0003 	ldmia.w	r6, {r0, r1}
 800ce1c:	ab06      	add	r3, sp, #24
 800ce1e:	e883 0003 	stmia.w	r3, {r0, r1}
 800ce22:	4611      	mov	r1, r2
 800ce24:	4618      	mov	r0, r3
 800ce26:	f7fb fbb5 	bl	8008594 <_ZN8touchgfx4RectaNERKS0_>
 800ce2a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800ce2e:	f9b4 1000 	ldrsh.w	r1, [r4]
 800ce32:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 800ce36:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 800ce3a:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 800ce3e:	4299      	cmp	r1, r3
 800ce40:	d10b      	bne.n	800ce5a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800ce42:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800ce46:	4552      	cmp	r2, sl
 800ce48:	d107      	bne.n	800ce5a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800ce4a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800ce4e:	455a      	cmp	r2, fp
 800ce50:	d103      	bne.n	800ce5a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800ce52:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800ce56:	454a      	cmp	r2, r9
 800ce58:	d06d      	beq.n	800cf36 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800ce5a:	f1bb 0f00 	cmp.w	fp, #0
 800ce5e:	dd65      	ble.n	800cf2c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 800ce60:	f1b9 0f00 	cmp.w	r9, #0
 800ce64:	dd62      	ble.n	800cf2c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 800ce66:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800ce6a:	fa1f f08a 	uxth.w	r0, sl
 800ce6e:	4552      	cmp	r2, sl
 800ce70:	9000      	str	r0, [sp, #0]
 800ce72:	da12      	bge.n	800ce9a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 800ce74:	9301      	str	r3, [sp, #4]
 800ce76:	9b00      	ldr	r3, [sp, #0]
 800ce78:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800ce7c:	f8ad 2012 	strh.w	r2, [sp, #18]
 800ce80:	1a9a      	subs	r2, r3, r2
 800ce82:	f8ad 1010 	strh.w	r1, [sp, #16]
 800ce86:	f8ad 0014 	strh.w	r0, [sp, #20]
 800ce8a:	f8ad 2016 	strh.w	r2, [sp, #22]
 800ce8e:	69ea      	ldr	r2, [r5, #28]
 800ce90:	4631      	mov	r1, r6
 800ce92:	4640      	mov	r0, r8
 800ce94:	f7ff ff7a 	bl	800cd8c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800ce98:	9b01      	ldr	r3, [sp, #4]
 800ce9a:	f9b4 2000 	ldrsh.w	r2, [r4]
 800ce9e:	429a      	cmp	r2, r3
 800cea0:	b29f      	uxth	r7, r3
 800cea2:	da0d      	bge.n	800cec0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 800cea4:	f8ad 2010 	strh.w	r2, [sp, #16]
 800cea8:	1aba      	subs	r2, r7, r2
 800ceaa:	f8ad a012 	strh.w	sl, [sp, #18]
 800ceae:	f8ad 2014 	strh.w	r2, [sp, #20]
 800ceb2:	f8ad 9016 	strh.w	r9, [sp, #22]
 800ceb6:	69ea      	ldr	r2, [r5, #28]
 800ceb8:	4631      	mov	r1, r6
 800ceba:	4640      	mov	r0, r8
 800cebc:	f7ff ff66 	bl	800cd8c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800cec0:	8822      	ldrh	r2, [r4, #0]
 800cec2:	88a3      	ldrh	r3, [r4, #4]
 800cec4:	445f      	add	r7, fp
 800cec6:	4413      	add	r3, r2
 800cec8:	b29b      	uxth	r3, r3
 800ceca:	b2bf      	uxth	r7, r7
 800cecc:	b23a      	sxth	r2, r7
 800cece:	b219      	sxth	r1, r3
 800ced0:	4291      	cmp	r1, r2
 800ced2:	dd0d      	ble.n	800cef0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 800ced4:	1bdb      	subs	r3, r3, r7
 800ced6:	f8ad 2010 	strh.w	r2, [sp, #16]
 800ceda:	f8ad a012 	strh.w	sl, [sp, #18]
 800cede:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cee2:	f8ad 9016 	strh.w	r9, [sp, #22]
 800cee6:	69ea      	ldr	r2, [r5, #28]
 800cee8:	4631      	mov	r1, r6
 800ceea:	4640      	mov	r0, r8
 800ceec:	f7ff ff4e 	bl	800cd8c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800cef0:	88e2      	ldrh	r2, [r4, #6]
 800cef2:	8863      	ldrh	r3, [r4, #2]
 800cef4:	4413      	add	r3, r2
 800cef6:	9a00      	ldr	r2, [sp, #0]
 800cef8:	444a      	add	r2, r9
 800cefa:	b29b      	uxth	r3, r3
 800cefc:	fa1f f982 	uxth.w	r9, r2
 800cf00:	fa0f f289 	sxth.w	r2, r9
 800cf04:	b219      	sxth	r1, r3
 800cf06:	428a      	cmp	r2, r1
 800cf08:	da15      	bge.n	800cf36 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800cf0a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800cf0e:	f9b4 0000 	ldrsh.w	r0, [r4]
 800cf12:	f8ad 1014 	strh.w	r1, [sp, #20]
 800cf16:	eba3 0309 	sub.w	r3, r3, r9
 800cf1a:	f8ad 0010 	strh.w	r0, [sp, #16]
 800cf1e:	f8ad 2012 	strh.w	r2, [sp, #18]
 800cf22:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cf26:	69ea      	ldr	r2, [r5, #28]
 800cf28:	4631      	mov	r1, r6
 800cf2a:	e001      	b.n	800cf30 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 800cf2c:	69ea      	ldr	r2, [r5, #28]
 800cf2e:	4621      	mov	r1, r4
 800cf30:	4640      	mov	r0, r8
 800cf32:	f7ff ff2b 	bl	800cd8c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800cf36:	4628      	mov	r0, r5
 800cf38:	f7ff fe94 	bl	800cc64 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800cf3c:	6861      	ldr	r1, [r4, #4]
 800cf3e:	4602      	mov	r2, r0
 800cf40:	6820      	ldr	r0, [r4, #0]
 800cf42:	4633      	mov	r3, r6
 800cf44:	c303      	stmia	r3!, {r0, r1}
 800cf46:	4611      	mov	r1, r2
 800cf48:	4630      	mov	r0, r6
 800cf4a:	f7fb fb23 	bl	8008594 <_ZN8touchgfx4RectaNERKS0_>
 800cf4e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	f77f af33 	ble.w	800cdbe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800cf58:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	f77f af2e 	ble.w	800cdbe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800cf62:	4628      	mov	r0, r5
 800cf64:	f7ff fe9a 	bl	800cc9c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 800cf68:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800cf6c:	1a18      	subs	r0, r3, r0
 800cf6e:	f8ad 0010 	strh.w	r0, [sp, #16]
 800cf72:	4628      	mov	r0, r5
 800cf74:	f7ff fea6 	bl	800ccc4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 800cf78:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800cf7c:	1a18      	subs	r0, r3, r0
 800cf7e:	f8ad 0012 	strh.w	r0, [sp, #18]
 800cf82:	682b      	ldr	r3, [r5, #0]
 800cf84:	4631      	mov	r1, r6
 800cf86:	689b      	ldr	r3, [r3, #8]
 800cf88:	4628      	mov	r0, r5
 800cf8a:	4798      	blx	r3
 800cf8c:	e717      	b.n	800cdbe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0800cf8e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 800cf8e:	b570      	push	{r4, r5, r6, lr}
 800cf90:	460c      	mov	r4, r1
 800cf92:	b086      	sub	sp, #24
 800cf94:	1d06      	adds	r6, r0, #4
 800cf96:	2300      	movs	r3, #0
 800cf98:	4631      	mov	r1, r6
 800cf9a:	4605      	mov	r5, r0
 800cf9c:	a802      	add	r0, sp, #8
 800cf9e:	9301      	str	r3, [sp, #4]
 800cfa0:	f7ff fca0 	bl	800c8e4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800cfa4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800cfa8:	8822      	ldrh	r2, [r4, #0]
 800cfaa:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 800cfae:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800cfb2:	f8ad 0014 	strh.w	r0, [sp, #20]
 800cfb6:	1ad2      	subs	r2, r2, r3
 800cfb8:	8863      	ldrh	r3, [r4, #2]
 800cfba:	f8ad 2010 	strh.w	r2, [sp, #16]
 800cfbe:	1a5b      	subs	r3, r3, r1
 800cfc0:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 800cfc4:	f8ad 1016 	strh.w	r1, [sp, #22]
 800cfc8:	aa01      	add	r2, sp, #4
 800cfca:	a904      	add	r1, sp, #16
 800cfcc:	4630      	mov	r0, r6
 800cfce:	f8ad 3012 	strh.w	r3, [sp, #18]
 800cfd2:	f7fb fbb7 	bl	8008744 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 800cfd6:	9a01      	ldr	r2, [sp, #4]
 800cfd8:	b11a      	cbz	r2, 800cfe2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 800cfda:	4621      	mov	r1, r4
 800cfdc:	4628      	mov	r0, r5
 800cfde:	f7ff fed5 	bl	800cd8c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800cfe2:	b006      	add	sp, #24
 800cfe4:	bd70      	pop	{r4, r5, r6, pc}

0800cfe6 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 800cfe6:	b530      	push	{r4, r5, lr}
 800cfe8:	4602      	mov	r2, r0
 800cfea:	4604      	mov	r4, r0
 800cfec:	f852 0f08 	ldr.w	r0, [r2, #8]!
 800cff0:	b085      	sub	sp, #20
 800cff2:	460d      	mov	r5, r1
 800cff4:	6851      	ldr	r1, [r2, #4]
 800cff6:	466b      	mov	r3, sp
 800cff8:	c303      	stmia	r3!, {r0, r1}
 800cffa:	4629      	mov	r1, r5
 800cffc:	4668      	mov	r0, sp
 800cffe:	f7fb fac9 	bl	8008594 <_ZN8touchgfx4RectaNERKS0_>
 800d002:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800d006:	b12b      	cbz	r3, 800d014 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 800d008:	4669      	mov	r1, sp
 800d00a:	4620      	mov	r0, r4
 800d00c:	f7ff ffbf 	bl	800cf8e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 800d010:	b005      	add	sp, #20
 800d012:	bd30      	pop	{r4, r5, pc}
 800d014:	3404      	adds	r4, #4
 800d016:	4621      	mov	r1, r4
 800d018:	a802      	add	r0, sp, #8
 800d01a:	f7ff fc63 	bl	800c8e4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d01e:	f8bd 3000 	ldrh.w	r3, [sp]
 800d022:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800d026:	1a9b      	subs	r3, r3, r2
 800d028:	f8ad 3000 	strh.w	r3, [sp]
 800d02c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800d030:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800d034:	4669      	mov	r1, sp
 800d036:	1a9b      	subs	r3, r3, r2
 800d038:	4620      	mov	r0, r4
 800d03a:	f8ad 3002 	strh.w	r3, [sp, #2]
 800d03e:	f7fb fb48 	bl	80086d2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 800d042:	e7e5      	b.n	800d010 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0800d044 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 800d044:	680a      	ldr	r2, [r1, #0]
 800d046:	460b      	mov	r3, r1
 800d048:	6992      	ldr	r2, [r2, #24]
 800d04a:	1d01      	adds	r1, r0, #4
 800d04c:	4618      	mov	r0, r3
 800d04e:	4710      	bx	r2

0800d050 <_ZN8touchgfx12TextProviderC1Ev>:
 800d050:	b538      	push	{r3, r4, r5, lr}
 800d052:	2500      	movs	r5, #0
 800d054:	2302      	movs	r3, #2
 800d056:	4604      	mov	r4, r0
 800d058:	e9c0 5500 	strd	r5, r5, [r0]
 800d05c:	7403      	strb	r3, [r0, #16]
 800d05e:	6145      	str	r5, [r0, #20]
 800d060:	7605      	strb	r5, [r0, #24]
 800d062:	83c5      	strh	r5, [r0, #30]
 800d064:	8405      	strh	r5, [r0, #32]
 800d066:	86c5      	strh	r5, [r0, #54]	; 0x36
 800d068:	8705      	strh	r5, [r0, #56]	; 0x38
 800d06a:	87c5      	strh	r5, [r0, #62]	; 0x3e
 800d06c:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 800d070:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 800d074:	220e      	movs	r2, #14
 800d076:	4629      	mov	r1, r5
 800d078:	304c      	adds	r0, #76	; 0x4c
 800d07a:	f002 fcb7 	bl	800f9ec <memset>
 800d07e:	2301      	movs	r3, #1
 800d080:	4620      	mov	r0, r4
 800d082:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 800d086:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 800d08a:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 800d08e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 800d092:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 800d096:	f7f9 fad1 	bl	800663c <_ZN8touchgfx12TextProvider18initializeInternalEv>
 800d09a:	4620      	mov	r0, r4
 800d09c:	bd38      	pop	{r3, r4, r5, pc}

0800d09e <_ZN8touchgfx12TextProvider11endOfStringEv>:
 800d09e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800d0a0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800d0a4:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 800d0a6:	fab0 f080 	clz	r0, r0
 800d0aa:	0940      	lsrs	r0, r0, #5
 800d0ac:	4770      	bx	lr

0800d0ae <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 800d0ae:	b530      	push	{r4, r5, lr}
 800d0b0:	2500      	movs	r5, #0
 800d0b2:	2401      	movs	r4, #1
 800d0b4:	6843      	ldr	r3, [r0, #4]
 800d0b6:	b913      	cbnz	r3, 800d0be <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 800d0b8:	6803      	ldr	r3, [r0, #0]
 800d0ba:	b313      	cbz	r3, 800d102 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800d0bc:	6043      	str	r3, [r0, #4]
 800d0be:	7e03      	ldrb	r3, [r0, #24]
 800d0c0:	b143      	cbz	r3, 800d0d4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 800d0c2:	6943      	ldr	r3, [r0, #20]
 800d0c4:	b12b      	cbz	r3, 800d0d2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800d0c6:	881a      	ldrh	r2, [r3, #0]
 800d0c8:	b11a      	cbz	r2, 800d0d2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800d0ca:	1c9a      	adds	r2, r3, #2
 800d0cc:	6142      	str	r2, [r0, #20]
 800d0ce:	8818      	ldrh	r0, [r3, #0]
 800d0d0:	bd30      	pop	{r4, r5, pc}
 800d0d2:	7605      	strb	r5, [r0, #24]
 800d0d4:	6843      	ldr	r3, [r0, #4]
 800d0d6:	8819      	ldrh	r1, [r3, #0]
 800d0d8:	b199      	cbz	r1, 800d102 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800d0da:	1c9a      	adds	r2, r3, #2
 800d0dc:	2902      	cmp	r1, #2
 800d0de:	6042      	str	r2, [r0, #4]
 800d0e0:	d1f5      	bne.n	800d0ce <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 800d0e2:	7c03      	ldrb	r3, [r0, #16]
 800d0e4:	2b01      	cmp	r3, #1
 800d0e6:	d8e5      	bhi.n	800d0b4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800d0e8:	1c5a      	adds	r2, r3, #1
 800d0ea:	3302      	adds	r3, #2
 800d0ec:	7402      	strb	r2, [r0, #16]
 800d0ee:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800d0f2:	6143      	str	r3, [r0, #20]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d0dd      	beq.n	800d0b4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800d0f8:	881b      	ldrh	r3, [r3, #0]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d0da      	beq.n	800d0b4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800d0fe:	7604      	strb	r4, [r0, #24]
 800d100:	e7d8      	b.n	800d0b4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800d102:	2000      	movs	r0, #0
 800d104:	e7e4      	b.n	800d0d0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0800d106 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 800d106:	b430      	push	{r4, r5}
 800d108:	6001      	str	r1, [r0, #0]
 800d10a:	2100      	movs	r1, #0
 800d10c:	6041      	str	r1, [r0, #4]
 800d10e:	6815      	ldr	r5, [r2, #0]
 800d110:	6085      	str	r5, [r0, #8]
 800d112:	6852      	ldr	r2, [r2, #4]
 800d114:	6443      	str	r3, [r0, #68]	; 0x44
 800d116:	9b02      	ldr	r3, [sp, #8]
 800d118:	60c2      	str	r2, [r0, #12]
 800d11a:	7401      	strb	r1, [r0, #16]
 800d11c:	6141      	str	r1, [r0, #20]
 800d11e:	7601      	strb	r1, [r0, #24]
 800d120:	8701      	strh	r1, [r0, #56]	; 0x38
 800d122:	8401      	strh	r1, [r0, #32]
 800d124:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 800d128:	6483      	str	r3, [r0, #72]	; 0x48
 800d12a:	bc30      	pop	{r4, r5}
 800d12c:	f7f9 ba86 	b.w	800663c <_ZN8touchgfx12TextProvider18initializeInternalEv>

0800d130 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 800d130:	b408      	push	{r3}
 800d132:	b510      	push	{r4, lr}
 800d134:	b085      	sub	sp, #20
 800d136:	ac07      	add	r4, sp, #28
 800d138:	f854 3b04 	ldr.w	r3, [r4], #4
 800d13c:	9300      	str	r3, [sp, #0]
 800d13e:	4613      	mov	r3, r2
 800d140:	4622      	mov	r2, r4
 800d142:	9403      	str	r4, [sp, #12]
 800d144:	f7ff ffdf 	bl	800d106 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800d148:	b005      	add	sp, #20
 800d14a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d14e:	b001      	add	sp, #4
 800d150:	4770      	bx	lr

0800d152 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 800d152:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d154:	4605      	mov	r5, r0
 800d156:	4608      	mov	r0, r1
 800d158:	b1e9      	cbz	r1, 800d196 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 800d15a:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 800d15e:	460b      	mov	r3, r1
 800d160:	f101 0708 	add.w	r7, r1, #8
 800d164:	4622      	mov	r2, r4
 800d166:	6818      	ldr	r0, [r3, #0]
 800d168:	6859      	ldr	r1, [r3, #4]
 800d16a:	4626      	mov	r6, r4
 800d16c:	c603      	stmia	r6!, {r0, r1}
 800d16e:	3308      	adds	r3, #8
 800d170:	42bb      	cmp	r3, r7
 800d172:	4634      	mov	r4, r6
 800d174:	d1f7      	bne.n	800d166 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 800d176:	6818      	ldr	r0, [r3, #0]
 800d178:	6030      	str	r0, [r6, #0]
 800d17a:	889b      	ldrh	r3, [r3, #4]
 800d17c:	80b3      	strh	r3, [r6, #4]
 800d17e:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 800d182:	015b      	lsls	r3, r3, #5
 800d184:	f403 7180 	and.w	r1, r3, #256	; 0x100
 800d188:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 800d18c:	430b      	orrs	r3, r1
 800d18e:	425b      	negs	r3, r3
 800d190:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 800d194:	4610      	mov	r0, r2
 800d196:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d198 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 800d198:	b538      	push	{r3, r4, r5, lr}
 800d19a:	460c      	mov	r4, r1
 800d19c:	6811      	ldr	r1, [r2, #0]
 800d19e:	4610      	mov	r0, r2
 800d1a0:	68cd      	ldr	r5, [r1, #12]
 800d1a2:	4619      	mov	r1, r3
 800d1a4:	47a8      	blx	r5
 800d1a6:	2800      	cmp	r0, #0
 800d1a8:	bf08      	it	eq
 800d1aa:	4620      	moveq	r0, r4
 800d1ac:	bd38      	pop	{r3, r4, r5, pc}
	...

0800d1b0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 800d1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1b2:	4604      	mov	r4, r0
 800d1b4:	4615      	mov	r5, r2
 800d1b6:	4608      	mov	r0, r1
 800d1b8:	b93a      	cbnz	r2, 800d1ca <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 800d1ba:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 800d1be:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 800d1c2:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 800d1c6:	4628      	mov	r0, r5
 800d1c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1ca:	f892 c00d 	ldrb.w	ip, [r2, #13]
 800d1ce:	8893      	ldrh	r3, [r2, #4]
 800d1d0:	ea4f 160c 	mov.w	r6, ip, lsl #4
 800d1d4:	f406 7280 	and.w	r2, r6, #256	; 0x100
 800d1d8:	79ee      	ldrb	r6, [r5, #7]
 800d1da:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 800d1de:	4316      	orrs	r6, r2
 800d1e0:	19da      	adds	r2, r3, r7
 800d1e2:	b291      	uxth	r1, r2
 800d1e4:	291d      	cmp	r1, #29
 800d1e6:	b2b7      	uxth	r7, r6
 800d1e8:	d87a      	bhi.n	800d2e0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x130>
 800d1ea:	2201      	movs	r2, #1
 800d1ec:	408a      	lsls	r2, r1
 800d1ee:	4975      	ldr	r1, [pc, #468]	; (800d3c4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 800d1f0:	420a      	tst	r2, r1
 800d1f2:	ea4f 06e6 	mov.w	r6, r6, asr #3
 800d1f6:	d12d      	bne.n	800d254 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 800d1f8:	f412 7f60 	tst.w	r2, #896	; 0x380
 800d1fc:	d070      	beq.n	800d2e0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x130>
 800d1fe:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 800d202:	462b      	mov	r3, r5
 800d204:	f105 0e08 	add.w	lr, r5, #8
 800d208:	4615      	mov	r5, r2
 800d20a:	6818      	ldr	r0, [r3, #0]
 800d20c:	6859      	ldr	r1, [r3, #4]
 800d20e:	4694      	mov	ip, r2
 800d210:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800d214:	3308      	adds	r3, #8
 800d216:	4573      	cmp	r3, lr
 800d218:	4662      	mov	r2, ip
 800d21a:	d1f6      	bne.n	800d20a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 800d21c:	6818      	ldr	r0, [r3, #0]
 800d21e:	f8cc 0000 	str.w	r0, [ip]
 800d222:	889b      	ldrh	r3, [r3, #4]
 800d224:	f8ac 3004 	strh.w	r3, [ip, #4]
 800d228:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800d22c:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 800d230:	b2b3      	uxth	r3, r6
 800d232:	1aca      	subs	r2, r1, r3
 800d234:	b292      	uxth	r2, r2
 800d236:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 800d23a:	10d2      	asrs	r2, r2, #3
 800d23c:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 800d240:	f002 0260 	and.w	r2, r2, #96	; 0x60
 800d244:	4302      	orrs	r2, r0
 800d246:	1bcf      	subs	r7, r1, r7
 800d248:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 800d24c:	1afb      	subs	r3, r7, r3
 800d24e:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 800d252:	e7b8      	b.n	800d1c6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 800d254:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800d256:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800d25a:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800d25c:	f640 6333 	movw	r3, #3635	; 0xe33
 800d260:	4299      	cmp	r1, r3
 800d262:	d110      	bne.n	800d286 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 800d264:	6803      	ldr	r3, [r0, #0]
 800d266:	68db      	ldr	r3, [r3, #12]
 800d268:	4798      	blx	r3
 800d26a:	7b41      	ldrb	r1, [r0, #13]
 800d26c:	00cb      	lsls	r3, r1, #3
 800d26e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800d272:	7a03      	ldrb	r3, [r0, #8]
 800d274:	0648      	lsls	r0, r1, #25
 800d276:	ea43 0302 	orr.w	r3, r3, r2
 800d27a:	bf44      	itt	mi
 800d27c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800d280:	b21b      	sxthmi	r3, r3
 800d282:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800d286:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800d28a:	443b      	add	r3, r7
 800d28c:	4433      	add	r3, r6
 800d28e:	b29b      	uxth	r3, r3
 800d290:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 800d294:	462a      	mov	r2, r5
 800d296:	f105 0c08 	add.w	ip, r5, #8
 800d29a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800d29e:	4635      	mov	r5, r6
 800d2a0:	6810      	ldr	r0, [r2, #0]
 800d2a2:	6851      	ldr	r1, [r2, #4]
 800d2a4:	4637      	mov	r7, r6
 800d2a6:	c703      	stmia	r7!, {r0, r1}
 800d2a8:	3208      	adds	r2, #8
 800d2aa:	4562      	cmp	r2, ip
 800d2ac:	463e      	mov	r6, r7
 800d2ae:	d1f7      	bne.n	800d2a0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 800d2b0:	6810      	ldr	r0, [r2, #0]
 800d2b2:	6038      	str	r0, [r7, #0]
 800d2b4:	8892      	ldrh	r2, [r2, #4]
 800d2b6:	80ba      	strh	r2, [r7, #4]
 800d2b8:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 800d2bc:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800d2c0:	10db      	asrs	r3, r3, #3
 800d2c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800d2c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d2ca:	4313      	orrs	r3, r2
 800d2cc:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 800d2d0:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 800d2d4:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 800d2d8:	1a9b      	subs	r3, r3, r2
 800d2da:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 800d2de:	e772      	b.n	800d1c6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 800d2e0:	f023 0204 	bic.w	r2, r3, #4
 800d2e4:	f640 611b 	movw	r1, #3611	; 0xe1b
 800d2e8:	428a      	cmp	r2, r1
 800d2ea:	d003      	beq.n	800d2f4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 800d2ec:	f640 621d 	movw	r2, #3613	; 0xe1d
 800d2f0:	4293      	cmp	r3, r2
 800d2f2:	d120      	bne.n	800d336 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x186>
 800d2f4:	3b01      	subs	r3, #1
 800d2f6:	4602      	mov	r2, r0
 800d2f8:	b29b      	uxth	r3, r3
 800d2fa:	4629      	mov	r1, r5
 800d2fc:	4620      	mov	r0, r4
 800d2fe:	f7ff ff4b 	bl	800d198 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800d302:	7b41      	ldrb	r1, [r0, #13]
 800d304:	00cb      	lsls	r3, r1, #3
 800d306:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800d30a:	7a03      	ldrb	r3, [r0, #8]
 800d30c:	0649      	lsls	r1, r1, #25
 800d30e:	ea43 0302 	orr.w	r3, r3, r2
 800d312:	bf44      	itt	mi
 800d314:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800d318:	b21b      	sxthmi	r3, r3
 800d31a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800d31e:	7b6b      	ldrb	r3, [r5, #13]
 800d320:	7aaa      	ldrb	r2, [r5, #10]
 800d322:	005b      	lsls	r3, r3, #1
 800d324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d328:	4313      	orrs	r3, r2
 800d32a:	115a      	asrs	r2, r3, #5
 800d32c:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 800d330:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 800d334:	e036      	b.n	800d3a4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 800d336:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 800d33a:	f402 7180 	and.w	r1, r2, #256	; 0x100
 800d33e:	7a2a      	ldrb	r2, [r5, #8]
 800d340:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800d344:	ea42 0201 	orr.w	r2, r2, r1
 800d348:	bf1c      	itt	ne
 800d34a:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 800d34e:	b212      	sxthne	r2, r2
 800d350:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 800d354:	f640 6109 	movw	r1, #3593	; 0xe09
 800d358:	f023 0210 	bic.w	r2, r3, #16
 800d35c:	428a      	cmp	r2, r1
 800d35e:	d003      	beq.n	800d368 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b8>
 800d360:	f640 6213 	movw	r2, #3603	; 0xe13
 800d364:	4293      	cmp	r3, r2
 800d366:	d12a      	bne.n	800d3be <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 800d368:	7b6e      	ldrb	r6, [r5, #13]
 800d36a:	0076      	lsls	r6, r6, #1
 800d36c:	f406 7280 	and.w	r2, r6, #256	; 0x100
 800d370:	7aae      	ldrb	r6, [r5, #10]
 800d372:	4316      	orrs	r6, r2
 800d374:	f640 6213 	movw	r2, #3603	; 0xe13
 800d378:	4293      	cmp	r3, r2
 800d37a:	bf18      	it	ne
 800d37c:	f103 33ff 	addne.w	r3, r3, #4294967295
 800d380:	4602      	mov	r2, r0
 800d382:	bf14      	ite	ne
 800d384:	b29b      	uxthne	r3, r3
 800d386:	f640 630c 	movweq	r3, #3596	; 0xe0c
 800d38a:	4629      	mov	r1, r5
 800d38c:	4620      	mov	r0, r4
 800d38e:	f7ff ff03 	bl	800d198 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800d392:	7b43      	ldrb	r3, [r0, #13]
 800d394:	7a82      	ldrb	r2, [r0, #10]
 800d396:	005b      	lsls	r3, r3, #1
 800d398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d39c:	4313      	orrs	r3, r2
 800d39e:	1af6      	subs	r6, r6, r3
 800d3a0:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 800d3a4:	7b69      	ldrb	r1, [r5, #13]
 800d3a6:	00cb      	lsls	r3, r1, #3
 800d3a8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800d3ac:	7a2b      	ldrb	r3, [r5, #8]
 800d3ae:	4313      	orrs	r3, r2
 800d3b0:	064a      	lsls	r2, r1, #25
 800d3b2:	bf44      	itt	mi
 800d3b4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800d3b8:	b21b      	sxthmi	r3, r3
 800d3ba:	1bdb      	subs	r3, r3, r7
 800d3bc:	e747      	b.n	800d24e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 800d3be:	2300      	movs	r3, #0
 800d3c0:	e7b6      	b.n	800d330 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x180>
 800d3c2:	bf00      	nop
 800d3c4:	3fc00079 	.word	0x3fc00079

0800d3c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 800d3c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d3cc:	4604      	mov	r4, r0
 800d3ce:	b942      	cbnz	r2, 800d3e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 800d3d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d3d4:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 800d3d8:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 800d3dc:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 800d3e0:	e047      	b.n	800d472 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 800d3e2:	7b51      	ldrb	r1, [r2, #13]
 800d3e4:	8893      	ldrh	r3, [r2, #4]
 800d3e6:	010d      	lsls	r5, r1, #4
 800d3e8:	f405 7080 	and.w	r0, r5, #256	; 0x100
 800d3ec:	79d5      	ldrb	r5, [r2, #7]
 800d3ee:	4305      	orrs	r5, r0
 800d3f0:	2d04      	cmp	r5, #4
 800d3f2:	bfcc      	ite	gt
 800d3f4:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 800d3f8:	f04f 0e01 	movle.w	lr, #1
 800d3fc:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 800d400:	f200 80ab 	bhi.w	800d55a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 800d404:	f240 60e7 	movw	r0, #1767	; 0x6e7
 800d408:	4283      	cmp	r3, r0
 800d40a:	d216      	bcs.n	800d43a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800d40c:	f240 605b 	movw	r0, #1627	; 0x65b
 800d410:	4283      	cmp	r3, r0
 800d412:	d859      	bhi.n	800d4c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 800d414:	f240 6057 	movw	r0, #1623	; 0x657
 800d418:	4283      	cmp	r3, r0
 800d41a:	d20e      	bcs.n	800d43a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800d41c:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 800d420:	d24a      	bcs.n	800d4b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 800d422:	f240 604e 	movw	r0, #1614	; 0x64e
 800d426:	4283      	cmp	r3, r0
 800d428:	d207      	bcs.n	800d43a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800d42a:	f240 601a 	movw	r0, #1562	; 0x61a
 800d42e:	4283      	cmp	r3, r0
 800d430:	d02a      	beq.n	800d488 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800d432:	d821      	bhi.n	800d478 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 800d434:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 800d438:	d35b      	bcc.n	800d4f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800d43a:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 800d43e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800d442:	f040 80d0 	bne.w	800d5e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800d446:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 800d44a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800d44e:	f040 80ca 	bne.w	800d5e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800d452:	00cb      	lsls	r3, r1, #3
 800d454:	f403 7080 	and.w	r0, r3, #256	; 0x100
 800d458:	7a13      	ldrb	r3, [r2, #8]
 800d45a:	0649      	lsls	r1, r1, #25
 800d45c:	ea43 0300 	orr.w	r3, r3, r0
 800d460:	bf44      	itt	mi
 800d462:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800d466:	b21b      	sxthmi	r3, r3
 800d468:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800d46c:	1b5d      	subs	r5, r3, r5
 800d46e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 800d472:	4610      	mov	r0, r2
 800d474:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d478:	f240 604b 	movw	r0, #1611	; 0x64b
 800d47c:	4283      	cmp	r3, r0
 800d47e:	d338      	bcc.n	800d4f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800d480:	f240 604c 	movw	r0, #1612	; 0x64c
 800d484:	4283      	cmp	r3, r0
 800d486:	d9d8      	bls.n	800d43a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800d488:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 800d48c:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 800d490:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800d494:	f040 80f2 	bne.w	800d67c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 800d498:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800d49c:	f040 80ee 	bne.w	800d67c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 800d4a0:	00cb      	lsls	r3, r1, #3
 800d4a2:	f403 7080 	and.w	r0, r3, #256	; 0x100
 800d4a6:	7a13      	ldrb	r3, [r2, #8]
 800d4a8:	064e      	lsls	r6, r1, #25
 800d4aa:	ea43 0300 	orr.w	r3, r3, r0
 800d4ae:	bf44      	itt	mi
 800d4b0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800d4b4:	b21b      	sxthmi	r3, r3
 800d4b6:	e7d9      	b.n	800d46c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 800d4b8:	f240 6054 	movw	r0, #1620	; 0x654
 800d4bc:	4283      	cmp	r3, r0
 800d4be:	d8e3      	bhi.n	800d488 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800d4c0:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 800d4c4:	d9e0      	bls.n	800d488 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800d4c6:	e7b8      	b.n	800d43a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800d4c8:	f240 6074 	movw	r0, #1652	; 0x674
 800d4cc:	4283      	cmp	r3, r0
 800d4ce:	d0b4      	beq.n	800d43a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800d4d0:	d82d      	bhi.n	800d52e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 800d4d2:	f240 605e 	movw	r0, #1630	; 0x65e
 800d4d6:	4283      	cmp	r3, r0
 800d4d8:	d804      	bhi.n	800d4e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 800d4da:	f240 605d 	movw	r0, #1629	; 0x65d
 800d4de:	4283      	cmp	r3, r0
 800d4e0:	d3d2      	bcc.n	800d488 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800d4e2:	e7aa      	b.n	800d43a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800d4e4:	f240 605f 	movw	r0, #1631	; 0x65f
 800d4e8:	4283      	cmp	r3, r0
 800d4ea:	d0cd      	beq.n	800d488 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800d4ec:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 800d4f0:	d0a3      	beq.n	800d43a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800d4f2:	00cb      	lsls	r3, r1, #3
 800d4f4:	f403 7080 	and.w	r0, r3, #256	; 0x100
 800d4f8:	7a13      	ldrb	r3, [r2, #8]
 800d4fa:	0649      	lsls	r1, r1, #25
 800d4fc:	ea43 0300 	orr.w	r3, r3, r0
 800d500:	bf44      	itt	mi
 800d502:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800d506:	b21b      	sxthmi	r3, r3
 800d508:	1b5d      	subs	r5, r3, r5
 800d50a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800d50e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 800d512:	7b53      	ldrb	r3, [r2, #13]
 800d514:	015b      	lsls	r3, r3, #5
 800d516:	f403 7180 	and.w	r1, r3, #256	; 0x100
 800d51a:	7993      	ldrb	r3, [r2, #6]
 800d51c:	430b      	orrs	r3, r1
 800d51e:	005b      	lsls	r3, r3, #1
 800d520:	2105      	movs	r1, #5
 800d522:	fb93 f3f1 	sdiv	r3, r3, r1
 800d526:	f992 1009 	ldrsb.w	r1, [r2, #9]
 800d52a:	440b      	add	r3, r1
 800d52c:	e756      	b.n	800d3dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 800d52e:	f240 60e2 	movw	r0, #1762	; 0x6e2
 800d532:	4283      	cmp	r3, r0
 800d534:	d809      	bhi.n	800d54a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 800d536:	f240 60df 	movw	r0, #1759	; 0x6df
 800d53a:	4283      	cmp	r3, r0
 800d53c:	f4bf af7d 	bcs.w	800d43a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800d540:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 800d544:	2b05      	cmp	r3, #5
 800d546:	d8d4      	bhi.n	800d4f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800d548:	e777      	b.n	800d43a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800d54a:	f240 60e3 	movw	r0, #1763	; 0x6e3
 800d54e:	4283      	cmp	r3, r0
 800d550:	d09a      	beq.n	800d488 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800d552:	f240 60e4 	movw	r0, #1764	; 0x6e4
 800d556:	4283      	cmp	r3, r0
 800d558:	e7ca      	b.n	800d4f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 800d55a:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 800d55e:	d22b      	bcs.n	800d5b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 800d560:	f640 00ed 	movw	r0, #2285	; 0x8ed
 800d564:	4283      	cmp	r3, r0
 800d566:	d28f      	bcs.n	800d488 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800d568:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800d56c:	4283      	cmp	r3, r0
 800d56e:	d816      	bhi.n	800d59e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 800d570:	f640 00e4 	movw	r0, #2276	; 0x8e4
 800d574:	4283      	cmp	r3, r0
 800d576:	f4bf af60 	bcs.w	800d43a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800d57a:	f240 60ec 	movw	r0, #1772	; 0x6ec
 800d57e:	4283      	cmp	r3, r0
 800d580:	d80a      	bhi.n	800d598 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 800d582:	f240 60eb 	movw	r0, #1771	; 0x6eb
 800d586:	4283      	cmp	r3, r0
 800d588:	f4bf af57 	bcs.w	800d43a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800d58c:	f240 60ea 	movw	r0, #1770	; 0x6ea
 800d590:	4283      	cmp	r3, r0
 800d592:	f43f af79 	beq.w	800d488 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800d596:	e7ac      	b.n	800d4f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800d598:	f240 60ed 	movw	r0, #1773	; 0x6ed
 800d59c:	e7f8      	b.n	800d590 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 800d59e:	f640 00e8 	movw	r0, #2280	; 0x8e8
 800d5a2:	4283      	cmp	r3, r0
 800d5a4:	d802      	bhi.n	800d5ac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 800d5a6:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800d5aa:	e798      	b.n	800d4de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 800d5ac:	f640 00e9 	movw	r0, #2281	; 0x8e9
 800d5b0:	4283      	cmp	r3, r0
 800d5b2:	f47f af42 	bne.w	800d43a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800d5b6:	e767      	b.n	800d488 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800d5b8:	f640 00f6 	movw	r0, #2294	; 0x8f6
 800d5bc:	4283      	cmp	r3, r0
 800d5be:	f43f af63 	beq.w	800d488 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800d5c2:	d802      	bhi.n	800d5ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 800d5c4:	f640 00f2 	movw	r0, #2290	; 0x8f2
 800d5c8:	e7f2      	b.n	800d5b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 800d5ca:	f640 00fa 	movw	r0, #2298	; 0x8fa
 800d5ce:	4283      	cmp	r3, r0
 800d5d0:	d805      	bhi.n	800d5de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 800d5d2:	f640 00f9 	movw	r0, #2297	; 0x8f9
 800d5d6:	4283      	cmp	r3, r0
 800d5d8:	f4ff af2f 	bcc.w	800d43a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800d5dc:	e754      	b.n	800d488 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800d5de:	f640 00fe 	movw	r0, #2302	; 0x8fe
 800d5e2:	4283      	cmp	r3, r0
 800d5e4:	e7af      	b.n	800d546 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 800d5e6:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 800d5ea:	4617      	mov	r7, r2
 800d5ec:	f102 0808 	add.w	r8, r2, #8
 800d5f0:	4666      	mov	r6, ip
 800d5f2:	6838      	ldr	r0, [r7, #0]
 800d5f4:	6879      	ldr	r1, [r7, #4]
 800d5f6:	46e6      	mov	lr, ip
 800d5f8:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800d5fc:	3708      	adds	r7, #8
 800d5fe:	4547      	cmp	r7, r8
 800d600:	46f4      	mov	ip, lr
 800d602:	d1f6      	bne.n	800d5f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 800d604:	6838      	ldr	r0, [r7, #0]
 800d606:	f8ce 0000 	str.w	r0, [lr]
 800d60a:	88b9      	ldrh	r1, [r7, #4]
 800d60c:	f8ae 1004 	strh.w	r1, [lr, #4]
 800d610:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 800d614:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800d618:	d009      	beq.n	800d62e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 800d61a:	7b51      	ldrb	r1, [r2, #13]
 800d61c:	7992      	ldrb	r2, [r2, #6]
 800d61e:	0149      	lsls	r1, r1, #5
 800d620:	f401 7180 	and.w	r1, r1, #256	; 0x100
 800d624:	4311      	orrs	r1, r2
 800d626:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800d62a:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 800d62e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800d632:	b2ad      	uxth	r5, r5
 800d634:	d00d      	beq.n	800d652 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 800d636:	442b      	add	r3, r5
 800d638:	b29b      	uxth	r3, r3
 800d63a:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 800d63e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800d642:	10db      	asrs	r3, r3, #3
 800d644:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800d648:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d64c:	4313      	orrs	r3, r2
 800d64e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 800d652:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 800d656:	00cb      	lsls	r3, r1, #3
 800d658:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800d65c:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 800d660:	064f      	lsls	r7, r1, #25
 800d662:	ea43 0302 	orr.w	r3, r3, r2
 800d666:	bf44      	itt	mi
 800d668:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800d66c:	b21b      	sxthmi	r3, r3
 800d66e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800d672:	1b5b      	subs	r3, r3, r5
 800d674:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 800d678:	4632      	mov	r2, r6
 800d67a:	e6fa      	b.n	800d472 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 800d67c:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 800d680:	4617      	mov	r7, r2
 800d682:	f102 0908 	add.w	r9, r2, #8
 800d686:	4666      	mov	r6, ip
 800d688:	6838      	ldr	r0, [r7, #0]
 800d68a:	6879      	ldr	r1, [r7, #4]
 800d68c:	46e0      	mov	r8, ip
 800d68e:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 800d692:	3708      	adds	r7, #8
 800d694:	454f      	cmp	r7, r9
 800d696:	46c4      	mov	ip, r8
 800d698:	d1f6      	bne.n	800d688 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 800d69a:	6838      	ldr	r0, [r7, #0]
 800d69c:	f8c8 0000 	str.w	r0, [r8]
 800d6a0:	88b9      	ldrh	r1, [r7, #4]
 800d6a2:	f8a8 1004 	strh.w	r1, [r8, #4]
 800d6a6:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 800d6aa:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800d6ae:	d009      	beq.n	800d6c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 800d6b0:	7b51      	ldrb	r1, [r2, #13]
 800d6b2:	7992      	ldrb	r2, [r2, #6]
 800d6b4:	0149      	lsls	r1, r1, #5
 800d6b6:	f401 7180 	and.w	r1, r1, #256	; 0x100
 800d6ba:	4311      	orrs	r1, r2
 800d6bc:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800d6c0:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 800d6c4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800d6c8:	d00e      	beq.n	800d6e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 800d6ca:	eba3 030e 	sub.w	r3, r3, lr
 800d6ce:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 800d6d2:	b29b      	uxth	r3, r3
 800d6d4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800d6d8:	10db      	asrs	r3, r3, #3
 800d6da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d6de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800d6e2:	4313      	orrs	r3, r2
 800d6e4:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 800d6e8:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 800d6ec:	00cb      	lsls	r3, r1, #3
 800d6ee:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800d6f2:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 800d6f6:	0648      	lsls	r0, r1, #25
 800d6f8:	ea43 0302 	orr.w	r3, r3, r2
 800d6fc:	bf44      	itt	mi
 800d6fe:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800d702:	b21b      	sxthmi	r3, r3
 800d704:	1b5d      	subs	r5, r3, r5
 800d706:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 800d70a:	e7b5      	b.n	800d678 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

0800d70c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 800d70c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d710:	461e      	mov	r6, r3
 800d712:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800d714:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800d718:	4604      	mov	r4, r0
 800d71a:	4617      	mov	r7, r2
 800d71c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 800d720:	f7f8 fee6 	bl	80064f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800d724:	4605      	mov	r5, r0
 800d726:	b918      	cbnz	r0, 800d730 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 800d728:	6030      	str	r0, [r6, #0]
 800d72a:	4628      	mov	r0, r5
 800d72c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d730:	683b      	ldr	r3, [r7, #0]
 800d732:	4601      	mov	r1, r0
 800d734:	68db      	ldr	r3, [r3, #12]
 800d736:	4638      	mov	r0, r7
 800d738:	4798      	blx	r3
 800d73a:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 800d73e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d742:	4602      	mov	r2, r0
 800d744:	6030      	str	r0, [r6, #0]
 800d746:	d213      	bcs.n	800d770 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 800d748:	4643      	mov	r3, r8
 800d74a:	4639      	mov	r1, r7
 800d74c:	4620      	mov	r0, r4
 800d74e:	f7ff fe3b 	bl	800d3c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 800d752:	6030      	str	r0, [r6, #0]
 800d754:	6833      	ldr	r3, [r6, #0]
 800d756:	b143      	cbz	r3, 800d76a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 800d758:	7b5a      	ldrb	r2, [r3, #13]
 800d75a:	7a9b      	ldrb	r3, [r3, #10]
 800d75c:	0052      	lsls	r2, r2, #1
 800d75e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800d762:	4313      	orrs	r3, r2
 800d764:	bf0c      	ite	eq
 800d766:	2301      	moveq	r3, #1
 800d768:	2300      	movne	r3, #0
 800d76a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 800d76e:	e7dc      	b.n	800d72a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 800d770:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 800d774:	b29b      	uxth	r3, r3
 800d776:	2b7f      	cmp	r3, #127	; 0x7f
 800d778:	d804      	bhi.n	800d784 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 800d77a:	4639      	mov	r1, r7
 800d77c:	4620      	mov	r0, r4
 800d77e:	f7ff fd17 	bl	800d1b0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 800d782:	e7e6      	b.n	800d752 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 800d784:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d0e3      	beq.n	800d754 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 800d78c:	f640 1302 	movw	r3, #2306	; 0x902
 800d790:	429d      	cmp	r5, r3
 800d792:	d1df      	bne.n	800d754 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 800d794:	4601      	mov	r1, r0
 800d796:	4620      	mov	r0, r4
 800d798:	f7ff fcdb 	bl	800d152 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 800d79c:	e7d9      	b.n	800d752 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0800d79e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 800d79e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7a2:	461e      	mov	r6, r3
 800d7a4:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800d7a6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800d7aa:	4604      	mov	r4, r0
 800d7ac:	4617      	mov	r7, r2
 800d7ae:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 800d7b2:	f7f8 fe9d 	bl	80064f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800d7b6:	4605      	mov	r5, r0
 800d7b8:	b918      	cbnz	r0, 800d7c2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 800d7ba:	6030      	str	r0, [r6, #0]
 800d7bc:	4628      	mov	r0, r5
 800d7be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	4601      	mov	r1, r0
 800d7c6:	f8d3 9008 	ldr.w	r9, [r3, #8]
 800d7ca:	4638      	mov	r0, r7
 800d7cc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d7d0:	47c8      	blx	r9
 800d7d2:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 800d7d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d7da:	4602      	mov	r2, r0
 800d7dc:	6030      	str	r0, [r6, #0]
 800d7de:	d213      	bcs.n	800d808 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 800d7e0:	4643      	mov	r3, r8
 800d7e2:	4639      	mov	r1, r7
 800d7e4:	4620      	mov	r0, r4
 800d7e6:	f7ff fdef 	bl	800d3c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 800d7ea:	6030      	str	r0, [r6, #0]
 800d7ec:	6833      	ldr	r3, [r6, #0]
 800d7ee:	b143      	cbz	r3, 800d802 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 800d7f0:	7b5a      	ldrb	r2, [r3, #13]
 800d7f2:	7a9b      	ldrb	r3, [r3, #10]
 800d7f4:	0052      	lsls	r2, r2, #1
 800d7f6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800d7fa:	4313      	orrs	r3, r2
 800d7fc:	bf0c      	ite	eq
 800d7fe:	2301      	moveq	r3, #1
 800d800:	2300      	movne	r3, #0
 800d802:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 800d806:	e7d9      	b.n	800d7bc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 800d808:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 800d80c:	b29b      	uxth	r3, r3
 800d80e:	2b7f      	cmp	r3, #127	; 0x7f
 800d810:	d804      	bhi.n	800d81c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 800d812:	4639      	mov	r1, r7
 800d814:	4620      	mov	r0, r4
 800d816:	f7ff fccb 	bl	800d1b0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 800d81a:	e7e6      	b.n	800d7ea <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 800d81c:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 800d820:	2b00      	cmp	r3, #0
 800d822:	d0e3      	beq.n	800d7ec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 800d824:	f640 1302 	movw	r3, #2306	; 0x902
 800d828:	429d      	cmp	r5, r3
 800d82a:	d1df      	bne.n	800d7ec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 800d82c:	4601      	mov	r1, r0
 800d82e:	4620      	mov	r0, r4
 800d830:	f7ff fc8f 	bl	800d152 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 800d834:	e7d9      	b.n	800d7ea <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0800d836 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 800d836:	b510      	push	{r4, lr}
 800d838:	4604      	mov	r4, r0
 800d83a:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 800d83e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800d840:	b1f1      	cbz	r1, 800d880 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 800d842:	2b0a      	cmp	r3, #10
 800d844:	d02f      	beq.n	800d8a6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 800d846:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800d848:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 800d84c:	3901      	subs	r1, #1
 800d84e:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 800d850:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 800d854:	1c51      	adds	r1, r2, #1
 800d856:	b289      	uxth	r1, r1
 800d858:	2901      	cmp	r1, #1
 800d85a:	bf84      	itt	hi
 800d85c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800d860:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 800d862:	f103 0201 	add.w	r2, r3, #1
 800d866:	8722      	strh	r2, [r4, #56]	; 0x38
 800d868:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800d86a:	bf98      	it	ls
 800d86c:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 800d86e:	4413      	add	r3, r2
 800d870:	b29b      	uxth	r3, r3
 800d872:	2b09      	cmp	r3, #9
 800d874:	bf88      	it	hi
 800d876:	3b0a      	subhi	r3, #10
 800d878:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800d87c:	8458      	strh	r0, [r3, #34]	; 0x22
 800d87e:	e7dc      	b.n	800d83a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 800d880:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800d882:	2b0a      	cmp	r3, #10
 800d884:	d00f      	beq.n	800d8a6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 800d886:	4620      	mov	r0, r4
 800d888:	f7ff fc11 	bl	800d0ae <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 800d88c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800d88e:	1c5a      	adds	r2, r3, #1
 800d890:	8722      	strh	r2, [r4, #56]	; 0x38
 800d892:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800d894:	4413      	add	r3, r2
 800d896:	b29b      	uxth	r3, r3
 800d898:	2b09      	cmp	r3, #9
 800d89a:	bf88      	it	hi
 800d89c:	3b0a      	subhi	r3, #10
 800d89e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800d8a2:	8458      	strh	r0, [r3, #34]	; 0x22
 800d8a4:	e7ec      	b.n	800d880 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 800d8a6:	bd10      	pop	{r4, pc}

0800d8a8 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 800d8a8:	b538      	push	{r3, r4, r5, lr}
 800d8aa:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800d8ac:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 800d8b0:	4604      	mov	r4, r0
 800d8b2:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 800d8b4:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 800d8b6:	3a01      	subs	r2, #1
 800d8b8:	8702      	strh	r2, [r0, #56]	; 0x38
 800d8ba:	1c5a      	adds	r2, r3, #1
 800d8bc:	b292      	uxth	r2, r2
 800d8be:	2a09      	cmp	r2, #9
 800d8c0:	bf86      	itte	hi
 800d8c2:	3b09      	subhi	r3, #9
 800d8c4:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 800d8c6:	86c2      	strhls	r2, [r0, #54]	; 0x36
 800d8c8:	f7ff ffb5 	bl	800d836 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 800d8cc:	8c23      	ldrh	r3, [r4, #32]
 800d8ce:	2b01      	cmp	r3, #1
 800d8d0:	bf9c      	itt	ls
 800d8d2:	3301      	addls	r3, #1
 800d8d4:	8423      	strhls	r3, [r4, #32]
 800d8d6:	8be3      	ldrh	r3, [r4, #30]
 800d8d8:	b90b      	cbnz	r3, 800d8de <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 800d8da:	2302      	movs	r3, #2
 800d8dc:	83e3      	strh	r3, [r4, #30]
 800d8de:	8be3      	ldrh	r3, [r4, #30]
 800d8e0:	3b01      	subs	r3, #1
 800d8e2:	b29b      	uxth	r3, r3
 800d8e4:	83e3      	strh	r3, [r4, #30]
 800d8e6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800d8ea:	4628      	mov	r0, r5
 800d8ec:	8365      	strh	r5, [r4, #26]
 800d8ee:	bd38      	pop	{r3, r4, r5, pc}

0800d8f0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 800d8f0:	428a      	cmp	r2, r1
 800d8f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8f6:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 800d8f8:	d931      	bls.n	800d95e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 800d8fa:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 800d8fc:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 800d900:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 800d904:	19ee      	adds	r6, r5, r7
 800d906:	1a54      	subs	r4, r2, r1
 800d908:	3e01      	subs	r6, #1
 800d90a:	fa1f fe84 	uxth.w	lr, r4
 800d90e:	b2b4      	uxth	r4, r6
 800d910:	eba4 090e 	sub.w	r9, r4, lr
 800d914:	fa1f f989 	uxth.w	r9, r9
 800d918:	2c09      	cmp	r4, #9
 800d91a:	4626      	mov	r6, r4
 800d91c:	bf88      	it	hi
 800d91e:	f1a4 060a 	subhi.w	r6, r4, #10
 800d922:	f1bc 0f00 	cmp.w	ip, #0
 800d926:	bf08      	it	eq
 800d928:	f04f 0c02 	moveq.w	ip, #2
 800d92c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800d930:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d934:	fa1f fc8c 	uxth.w	ip, ip
 800d938:	3c01      	subs	r4, #1
 800d93a:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 800d93e:	b2a4      	uxth	r4, r4
 800d940:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 800d944:	454c      	cmp	r4, r9
 800d946:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 800d94a:	d1e5      	bne.n	800d918 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 800d94c:	eba5 050e 	sub.w	r5, r5, lr
 800d950:	eb0e 0408 	add.w	r4, lr, r8
 800d954:	8705      	strh	r5, [r0, #56]	; 0x38
 800d956:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 800d95a:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 800d95e:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 800d960:	1a64      	subs	r4, r4, r1
 800d962:	4439      	add	r1, r7
 800d964:	b289      	uxth	r1, r1
 800d966:	2909      	cmp	r1, #9
 800d968:	bf88      	it	hi
 800d96a:	390a      	subhi	r1, #10
 800d96c:	8704      	strh	r4, [r0, #56]	; 0x38
 800d96e:	86c1      	strh	r1, [r0, #54]	; 0x36
 800d970:	250a      	movs	r5, #10
 800d972:	b18a      	cbz	r2, 800d998 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 800d974:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 800d976:	3a01      	subs	r2, #1
 800d978:	b292      	uxth	r2, r2
 800d97a:	3101      	adds	r1, #1
 800d97c:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 800d980:	8701      	strh	r1, [r0, #56]	; 0x38
 800d982:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 800d984:	b901      	cbnz	r1, 800d988 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 800d986:	86c5      	strh	r5, [r0, #54]	; 0x36
 800d988:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 800d98a:	3901      	subs	r1, #1
 800d98c:	b289      	uxth	r1, r1
 800d98e:	86c1      	strh	r1, [r0, #54]	; 0x36
 800d990:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800d994:	844c      	strh	r4, [r1, #34]	; 0x22
 800d996:	e7ec      	b.n	800d972 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 800d998:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d99c:	f7ff bf4b 	b.w	800d836 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0800d9a0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 800d9a0:	b570      	push	{r4, r5, r6, lr}
 800d9a2:	2500      	movs	r5, #0
 800d9a4:	4295      	cmp	r5, r2
 800d9a6:	d011      	beq.n	800d9cc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 800d9a8:	8bc4      	ldrh	r4, [r0, #30]
 800d9aa:	f831 6b02 	ldrh.w	r6, [r1], #2
 800d9ae:	4414      	add	r4, r2
 800d9b0:	3c01      	subs	r4, #1
 800d9b2:	1b64      	subs	r4, r4, r5
 800d9b4:	b2a4      	uxth	r4, r4
 800d9b6:	2c01      	cmp	r4, #1
 800d9b8:	bf88      	it	hi
 800d9ba:	3c02      	subhi	r4, #2
 800d9bc:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800d9c0:	8b64      	ldrh	r4, [r4, #26]
 800d9c2:	42b4      	cmp	r4, r6
 800d9c4:	d117      	bne.n	800d9f6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 800d9c6:	3501      	adds	r5, #1
 800d9c8:	b2ad      	uxth	r5, r5
 800d9ca:	e7eb      	b.n	800d9a4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 800d9cc:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800d9d0:	2400      	movs	r4, #0
 800d9d2:	4413      	add	r3, r2
 800d9d4:	b2a2      	uxth	r2, r4
 800d9d6:	429a      	cmp	r2, r3
 800d9d8:	da0f      	bge.n	800d9fa <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 800d9da:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 800d9dc:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 800d9e0:	4432      	add	r2, r6
 800d9e2:	b292      	uxth	r2, r2
 800d9e4:	2a09      	cmp	r2, #9
 800d9e6:	bf88      	it	hi
 800d9e8:	3a0a      	subhi	r2, #10
 800d9ea:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800d9ee:	3401      	adds	r4, #1
 800d9f0:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 800d9f2:	42aa      	cmp	r2, r5
 800d9f4:	d0ee      	beq.n	800d9d4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 800d9f6:	2000      	movs	r0, #0
 800d9f8:	bd70      	pop	{r4, r5, r6, pc}
 800d9fa:	2001      	movs	r0, #1
 800d9fc:	e7fc      	b.n	800d9f8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0800d9fe <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 800d9fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da02:	4605      	mov	r5, r0
 800da04:	4616      	mov	r6, r2
 800da06:	1c8c      	adds	r4, r1, #2
 800da08:	8809      	ldrh	r1, [r1, #0]
 800da0a:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 800da0e:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 800da12:	42b3      	cmp	r3, r6
 800da14:	d124      	bne.n	800da60 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 800da16:	f3c1 2903 	ubfx	r9, r1, #8, #4
 800da1a:	f3c1 1803 	ubfx	r8, r1, #4, #4
 800da1e:	f001 070f 	and.w	r7, r1, #15
 800da22:	f8cd 8000 	str.w	r8, [sp]
 800da26:	464b      	mov	r3, r9
 800da28:	4652      	mov	r2, sl
 800da2a:	4621      	mov	r1, r4
 800da2c:	4628      	mov	r0, r5
 800da2e:	f7ff ffb7 	bl	800d9a0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 800da32:	4683      	mov	fp, r0
 800da34:	b168      	cbz	r0, 800da52 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 800da36:	eb0a 0109 	add.w	r1, sl, r9
 800da3a:	4441      	add	r1, r8
 800da3c:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 800da40:	463a      	mov	r2, r7
 800da42:	4649      	mov	r1, r9
 800da44:	4628      	mov	r0, r5
 800da46:	f7ff ff53 	bl	800d8f0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 800da4a:	4658      	mov	r0, fp
 800da4c:	b003      	add	sp, #12
 800da4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da52:	eb07 010a 	add.w	r1, r7, sl
 800da56:	4449      	add	r1, r9
 800da58:	4441      	add	r1, r8
 800da5a:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800da5e:	e7d2      	b.n	800da06 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 800da60:	f04f 0b00 	mov.w	fp, #0
 800da64:	e7f1      	b.n	800da4a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0800da66 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 800da66:	b570      	push	{r4, r5, r6, lr}
 800da68:	8810      	ldrh	r0, [r2, #0]
 800da6a:	4298      	cmp	r0, r3
 800da6c:	d817      	bhi.n	800da9e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800da6e:	1e48      	subs	r0, r1, #1
 800da70:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 800da74:	4298      	cmp	r0, r3
 800da76:	d312      	bcc.n	800da9e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800da78:	2400      	movs	r4, #0
 800da7a:	428c      	cmp	r4, r1
 800da7c:	d20f      	bcs.n	800da9e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800da7e:	1860      	adds	r0, r4, r1
 800da80:	1040      	asrs	r0, r0, #1
 800da82:	0085      	lsls	r5, r0, #2
 800da84:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 800da88:	42b3      	cmp	r3, r6
 800da8a:	d902      	bls.n	800da92 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 800da8c:	3001      	adds	r0, #1
 800da8e:	b284      	uxth	r4, r0
 800da90:	e7f3      	b.n	800da7a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800da92:	d201      	bcs.n	800da98 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 800da94:	b281      	uxth	r1, r0
 800da96:	e7f0      	b.n	800da7a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800da98:	442a      	add	r2, r5
 800da9a:	8850      	ldrh	r0, [r2, #2]
 800da9c:	bd70      	pop	{r4, r5, r6, pc}
 800da9e:	2000      	movs	r0, #0
 800daa0:	e7fc      	b.n	800da9c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0800daa2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 800daa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800daa6:	6c45      	ldr	r5, [r0, #68]	; 0x44
 800daa8:	886f      	ldrh	r7, [r5, #2]
 800daaa:	4604      	mov	r4, r0
 800daac:	087f      	lsrs	r7, r7, #1
 800daae:	260b      	movs	r6, #11
 800dab0:	3e01      	subs	r6, #1
 800dab2:	d013      	beq.n	800dadc <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 800dab4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800dab6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800daba:	462a      	mov	r2, r5
 800dabc:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 800dac0:	4639      	mov	r1, r7
 800dac2:	4643      	mov	r3, r8
 800dac4:	4620      	mov	r0, r4
 800dac6:	f7ff ffce 	bl	800da66 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 800daca:	b138      	cbz	r0, 800dadc <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 800dacc:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 800dad0:	4642      	mov	r2, r8
 800dad2:	4620      	mov	r0, r4
 800dad4:	f7ff ff93 	bl	800d9fe <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 800dad8:	2800      	cmp	r0, #0
 800dada:	d1e9      	bne.n	800dab0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 800dadc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dae0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 800dae0:	b570      	push	{r4, r5, r6, lr}
 800dae2:	694a      	ldr	r2, [r1, #20]
 800dae4:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800dae6:	684b      	ldr	r3, [r1, #4]
 800dae8:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 800daea:	1b54      	subs	r4, r2, r5
 800daec:	f000 8106 	beq.w	800dcfc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 800daf0:	1b9b      	subs	r3, r3, r6
 800daf2:	d003      	beq.n	800dafc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 800daf4:	4363      	muls	r3, r4
 800daf6:	2210      	movs	r2, #16
 800daf8:	fb93 f3f2 	sdiv	r3, r3, r2
 800dafc:	680c      	ldr	r4, [r1, #0]
 800dafe:	698a      	ldr	r2, [r1, #24]
 800db00:	1b65      	subs	r5, r4, r5
 800db02:	f000 80fd 	beq.w	800dd00 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 800db06:	1b92      	subs	r2, r2, r6
 800db08:	d003      	beq.n	800db12 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 800db0a:	436a      	muls	r2, r5
 800db0c:	2410      	movs	r4, #16
 800db0e:	fb92 f2f4 	sdiv	r2, r2, r4
 800db12:	1a9b      	subs	r3, r3, r2
 800db14:	ee07 3a90 	vmov	s15, r3
 800db18:	ed9f 4a88 	vldr	s8, [pc, #544]	; 800dd3c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 800db1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800db20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800db24:	ee67 7a84 	vmul.f32	s15, s15, s8
 800db28:	460a      	mov	r2, r1
 800db2a:	ee87 3a27 	vdiv.f32	s6, s14, s15
 800db2e:	4603      	mov	r3, r0
 800db30:	f100 040c 	add.w	r4, r0, #12
 800db34:	eeb1 6a43 	vneg.f32	s12, s6
 800db38:	edd2 7a02 	vldr	s15, [r2, #8]
 800db3c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800db40:	3214      	adds	r2, #20
 800db42:	ece3 6a01 	vstmia	r3!, {s13}
 800db46:	ed52 7a02 	vldr	s15, [r2, #-8]
 800db4a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800db4e:	429c      	cmp	r4, r3
 800db50:	edc3 7a02 	vstr	s15, [r3, #8]
 800db54:	ed52 7a01 	vldr	s15, [r2, #-4]
 800db58:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800db5c:	edc3 7a05 	vstr	s15, [r3, #20]
 800db60:	d1ea      	bne.n	800db38 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 800db62:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800db64:	698b      	ldr	r3, [r1, #24]
 800db66:	edd0 4a02 	vldr	s9, [r0, #8]
 800db6a:	edd0 3a00 	vldr	s7, [r0]
 800db6e:	edd0 6a01 	vldr	s13, [r0, #4]
 800db72:	ed90 5a05 	vldr	s10, [r0, #20]
 800db76:	ed90 2a03 	vldr	s4, [r0, #12]
 800db7a:	edd0 5a04 	vldr	s11, [r0, #16]
 800db7e:	ed90 1a07 	vldr	s2, [r0, #28]
 800db82:	edd0 2a06 	vldr	s5, [r0, #24]
 800db86:	1a9b      	subs	r3, r3, r2
 800db88:	ee07 3a90 	vmov	s15, r3
 800db8c:	684b      	ldr	r3, [r1, #4]
 800db8e:	1a9b      	subs	r3, r3, r2
 800db90:	ee07 3a10 	vmov	s14, r3
 800db94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800db98:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800db9c:	ee67 7a84 	vmul.f32	s15, s15, s8
 800dba0:	ee73 4ae4 	vsub.f32	s9, s7, s9
 800dba4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800dba8:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 800dbac:	ee27 7a04 	vmul.f32	s14, s14, s8
 800dbb0:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800dbb4:	eee6 7a87 	vfma.f32	s15, s13, s14
 800dbb8:	ee32 5a45 	vsub.f32	s10, s4, s10
 800dbbc:	ee67 7a83 	vmul.f32	s15, s15, s6
 800dbc0:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 800dbc4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800dbc6:	694a      	ldr	r2, [r1, #20]
 800dbc8:	1b13      	subs	r3, r2, r4
 800dbca:	ee07 3a10 	vmov	s14, r3
 800dbce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800dbd2:	680b      	ldr	r3, [r1, #0]
 800dbd4:	ee27 7a04 	vmul.f32	s14, s14, s8
 800dbd8:	1b1b      	subs	r3, r3, r4
 800dbda:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 800dbde:	ee07 3a10 	vmov	s14, r3
 800dbe2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800dbe6:	ee27 7a04 	vmul.f32	s14, s14, s8
 800dbea:	eee6 4a87 	vfma.f32	s9, s13, s14
 800dbee:	ee64 4a86 	vmul.f32	s9, s9, s12
 800dbf2:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 800dbf6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800dbf8:	698b      	ldr	r3, [r1, #24]
 800dbfa:	1a9b      	subs	r3, r3, r2
 800dbfc:	ee06 3a90 	vmov	s13, r3
 800dc00:	684b      	ldr	r3, [r1, #4]
 800dc02:	1a9b      	subs	r3, r3, r2
 800dc04:	ee07 3a10 	vmov	s14, r3
 800dc08:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800dc0c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800dc10:	ee66 6a84 	vmul.f32	s13, s13, s8
 800dc14:	ee27 7a04 	vmul.f32	s14, s14, s8
 800dc18:	ee65 6a66 	vnmul.f32	s13, s10, s13
 800dc1c:	eee5 6a87 	vfma.f32	s13, s11, s14
 800dc20:	ee66 6a83 	vmul.f32	s13, s13, s6
 800dc24:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 800dc28:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800dc2a:	694a      	ldr	r2, [r1, #20]
 800dc2c:	1b13      	subs	r3, r2, r4
 800dc2e:	ee07 3a10 	vmov	s14, r3
 800dc32:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800dc36:	680b      	ldr	r3, [r1, #0]
 800dc38:	ee27 7a04 	vmul.f32	s14, s14, s8
 800dc3c:	1b1b      	subs	r3, r3, r4
 800dc3e:	ee25 5a47 	vnmul.f32	s10, s10, s14
 800dc42:	ee07 3a10 	vmov	s14, r3
 800dc46:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800dc4a:	ee27 7a04 	vmul.f32	s14, s14, s8
 800dc4e:	eea5 5a87 	vfma.f32	s10, s11, s14
 800dc52:	edd0 5a08 	vldr	s11, [r0, #32]
 800dc56:	ee25 5a06 	vmul.f32	s10, s10, s12
 800dc5a:	ee31 1a65 	vsub.f32	s2, s2, s11
 800dc5e:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 800dc62:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800dc64:	698b      	ldr	r3, [r1, #24]
 800dc66:	1a9b      	subs	r3, r3, r2
 800dc68:	ee07 3a10 	vmov	s14, r3
 800dc6c:	684b      	ldr	r3, [r1, #4]
 800dc6e:	1a9b      	subs	r3, r3, r2
 800dc70:	ee01 3a90 	vmov	s3, r3
 800dc74:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800dc78:	ee72 5ae5 	vsub.f32	s11, s5, s11
 800dc7c:	ee27 7a04 	vmul.f32	s14, s14, s8
 800dc80:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 800dc84:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 800dc88:	ee61 1a84 	vmul.f32	s3, s3, s8
 800dc8c:	eea1 7a21 	vfma.f32	s14, s2, s3
 800dc90:	ee27 7a03 	vmul.f32	s14, s14, s6
 800dc94:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 800dc98:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800dc9a:	694a      	ldr	r2, [r1, #20]
 800dc9c:	1b13      	subs	r3, r2, r4
 800dc9e:	ee03 3a10 	vmov	s6, r3
 800dca2:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 800dca6:	680b      	ldr	r3, [r1, #0]
 800dca8:	ee23 3a04 	vmul.f32	s6, s6, s8
 800dcac:	1b1b      	subs	r3, r3, r4
 800dcae:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 800dcb2:	ee03 3a10 	vmov	s6, r3
 800dcb6:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 800dcba:	ee23 4a04 	vmul.f32	s8, s6, s8
 800dcbe:	eee1 5a04 	vfma.f32	s11, s2, s8
 800dcc2:	ee25 6a86 	vmul.f32	s12, s11, s12
 800dcc6:	ee62 5a67 	vnmul.f32	s11, s4, s15
 800dcca:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 800dcce:	eee3 5aa6 	vfma.f32	s11, s7, s13
 800dcd2:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 800dcd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcda:	dd13      	ble.n	800dd04 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 800dcdc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dce0:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 800dce4:	63c3      	str	r3, [r0, #60]	; 0x3c
 800dce6:	eee3 7a87 	vfma.f32	s15, s7, s14
 800dcea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800dcee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcf2:	dd15      	ble.n	800dd20 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 800dcf4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dcf8:	6403      	str	r3, [r0, #64]	; 0x40
 800dcfa:	bd70      	pop	{r4, r5, r6, pc}
 800dcfc:	4623      	mov	r3, r4
 800dcfe:	e6fd      	b.n	800dafc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 800dd00:	462a      	mov	r2, r5
 800dd02:	e706      	b.n	800db12 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 800dd04:	d502      	bpl.n	800dd0c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 800dd06:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800dd0a:	e7e9      	b.n	800dce0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 800dd0c:	ee22 2a64 	vnmul.f32	s4, s4, s9
 800dd10:	eea3 2a85 	vfma.f32	s4, s7, s10
 800dd14:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 800dd18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd1c:	dade      	bge.n	800dcdc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 800dd1e:	e7f2      	b.n	800dd06 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 800dd20:	d502      	bpl.n	800dd28 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 800dd22:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800dd26:	e7e7      	b.n	800dcf8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 800dd28:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 800dd2c:	eee3 4a86 	vfma.f32	s9, s7, s12
 800dd30:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 800dd34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd38:	dadc      	bge.n	800dcf4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 800dd3a:	e7f2      	b.n	800dd22 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 800dd3c:	3d800000 	.word	0x3d800000

0800dd40 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 800dd40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd44:	2714      	movs	r7, #20
 800dd46:	435f      	muls	r7, r3
 800dd48:	eb02 0c07 	add.w	ip, r2, r7
 800dd4c:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800dd50:	f115 0e0f 	adds.w	lr, r5, #15
 800dd54:	f100 80a2 	bmi.w	800de9c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 800dd58:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 800dd5c:	9c08      	ldr	r4, [sp, #32]
 800dd5e:	f8c0 e014 	str.w	lr, [r0, #20]
 800dd62:	2614      	movs	r6, #20
 800dd64:	4366      	muls	r6, r4
 800dd66:	eb02 0806 	add.w	r8, r2, r6
 800dd6a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800dd6e:	f115 040f 	adds.w	r4, r5, #15
 800dd72:	f100 809f 	bmi.w	800deb4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 800dd76:	1124      	asrs	r4, r4, #4
 800dd78:	eba4 040e 	sub.w	r4, r4, lr
 800dd7c:	6184      	str	r4, [r0, #24]
 800dd7e:	2c00      	cmp	r4, #0
 800dd80:	f000 808a 	beq.w	800de98 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 800dd84:	f8dc 9004 	ldr.w	r9, [ip, #4]
 800dd88:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800dd8c:	5995      	ldr	r5, [r2, r6]
 800dd8e:	eba4 0809 	sub.w	r8, r4, r9
 800dd92:	59d4      	ldr	r4, [r2, r7]
 800dd94:	eba5 0a04 	sub.w	sl, r5, r4
 800dd98:	ea4f 150a 	mov.w	r5, sl, lsl #4
 800dd9c:	fb0e fe05 	mul.w	lr, lr, r5
 800dda0:	fb0a ee19 	mls	lr, sl, r9, lr
 800dda4:	fb08 e404 	mla	r4, r8, r4, lr
 800dda8:	ea4f 1608 	mov.w	r6, r8, lsl #4
 800ddac:	3c01      	subs	r4, #1
 800ddae:	19a4      	adds	r4, r4, r6
 800ddb0:	f100 808c 	bmi.w	800decc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 800ddb4:	fb94 fef6 	sdiv	lr, r4, r6
 800ddb8:	f8c0 e000 	str.w	lr, [r0]
 800ddbc:	fb06 441e 	mls	r4, r6, lr, r4
 800ddc0:	6104      	str	r4, [r0, #16]
 800ddc2:	2d00      	cmp	r5, #0
 800ddc4:	f2c0 8095 	blt.w	800def2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 800ddc8:	fb95 f4f6 	sdiv	r4, r5, r6
 800ddcc:	6044      	str	r4, [r0, #4]
 800ddce:	fb06 5514 	mls	r5, r6, r4, r5
 800ddd2:	6085      	str	r5, [r0, #8]
 800ddd4:	60c6      	str	r6, [r0, #12]
 800ddd6:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800ddda:	6945      	ldr	r5, [r0, #20]
 800dddc:	59d2      	ldr	r2, [r2, r7]
 800ddde:	eddf 6a4d 	vldr	s13, [pc, #308]	; 800df14 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 800dde2:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 800dde6:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 800ddea:	ee07 4a10 	vmov	s14, r4
 800ddee:	6804      	ldr	r4, [r0, #0]
 800ddf0:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 800ddf4:	ee07 2a90 	vmov	s15, r2
 800ddf8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ddfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800de00:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800de04:	ee27 7a26 	vmul.f32	s14, s14, s13
 800de08:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800de0c:	edd3 6a00 	vldr	s13, [r3]
 800de10:	eee6 6a07 	vfma.f32	s13, s12, s14
 800de14:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 800de18:	eee6 6a27 	vfma.f32	s13, s12, s15
 800de1c:	edc0 6a07 	vstr	s13, [r0, #28]
 800de20:	edd0 6a01 	vldr	s13, [r0, #4]
 800de24:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 800de28:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 800de2c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800de30:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800de34:	ed80 6a08 	vstr	s12, [r0, #32]
 800de38:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800de3a:	6242      	str	r2, [r0, #36]	; 0x24
 800de3c:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 800de40:	ed93 6a03 	vldr	s12, [r3, #12]
 800de44:	eea5 6a87 	vfma.f32	s12, s11, s14
 800de48:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 800de4c:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800de50:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 800de54:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 800de58:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 800de5c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800de60:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 800de64:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800de66:	6302      	str	r2, [r0, #48]	; 0x30
 800de68:	ed93 6a06 	vldr	s12, [r3, #24]
 800de6c:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 800de70:	eea5 6a87 	vfma.f32	s12, s11, s14
 800de74:	eeb0 7a46 	vmov.f32	s14, s12
 800de78:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 800de7c:	eea6 7a27 	vfma.f32	s14, s12, s15
 800de80:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 800de84:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 800de88:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 800de8c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800de90:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 800de94:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800de96:	63c3      	str	r3, [r0, #60]	; 0x3c
 800de98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de9c:	f1c5 0501 	rsb	r5, r5, #1
 800dea0:	f015 050f 	ands.w	r5, r5, #15
 800dea4:	bf18      	it	ne
 800dea6:	2501      	movne	r5, #1
 800dea8:	2410      	movs	r4, #16
 800deaa:	fb9e fef4 	sdiv	lr, lr, r4
 800deae:	ebae 0e05 	sub.w	lr, lr, r5
 800deb2:	e753      	b.n	800dd5c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 800deb4:	f1c5 0501 	rsb	r5, r5, #1
 800deb8:	f015 050f 	ands.w	r5, r5, #15
 800debc:	bf18      	it	ne
 800debe:	2501      	movne	r5, #1
 800dec0:	f04f 0910 	mov.w	r9, #16
 800dec4:	fb94 f4f9 	sdiv	r4, r4, r9
 800dec8:	1b64      	subs	r4, r4, r5
 800deca:	e755      	b.n	800dd78 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 800decc:	4264      	negs	r4, r4
 800dece:	fb94 fef6 	sdiv	lr, r4, r6
 800ded2:	f1ce 0800 	rsb	r8, lr, #0
 800ded6:	fb06 441e 	mls	r4, r6, lr, r4
 800deda:	f8c0 8000 	str.w	r8, [r0]
 800dede:	6104      	str	r4, [r0, #16]
 800dee0:	2c00      	cmp	r4, #0
 800dee2:	f43f af6e 	beq.w	800ddc2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 800dee6:	ea6f 0e0e 	mvn.w	lr, lr
 800deea:	f8c0 e000 	str.w	lr, [r0]
 800deee:	1b34      	subs	r4, r6, r4
 800def0:	e766      	b.n	800ddc0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 800def2:	426d      	negs	r5, r5
 800def4:	fb95 f4f6 	sdiv	r4, r5, r6
 800def8:	f1c4 0e00 	rsb	lr, r4, #0
 800defc:	fb06 5514 	mls	r5, r6, r4, r5
 800df00:	f8c0 e004 	str.w	lr, [r0, #4]
 800df04:	6085      	str	r5, [r0, #8]
 800df06:	2d00      	cmp	r5, #0
 800df08:	f43f af64 	beq.w	800ddd4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 800df0c:	43e4      	mvns	r4, r4
 800df0e:	6044      	str	r4, [r0, #4]
 800df10:	1b75      	subs	r5, r6, r5
 800df12:	e75e      	b.n	800ddd2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 800df14:	3d800000 	.word	0x3d800000

0800df18 <_ZN8touchgfx7Unicode6strlenEPKt>:
 800df18:	4602      	mov	r2, r0
 800df1a:	b148      	cbz	r0, 800df30 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 800df1c:	2300      	movs	r3, #0
 800df1e:	b298      	uxth	r0, r3
 800df20:	3301      	adds	r3, #1
 800df22:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 800df26:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 800df2a:	2900      	cmp	r1, #0
 800df2c:	d1f7      	bne.n	800df1e <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 800df2e:	4770      	bx	lr
 800df30:	4770      	bx	lr

0800df32 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 800df32:	b530      	push	{r4, r5, lr}
 800df34:	4604      	mov	r4, r0
 800df36:	b159      	cbz	r1, 800df50 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 800df38:	b148      	cbz	r0, 800df4e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 800df3a:	2300      	movs	r3, #0
 800df3c:	b298      	uxth	r0, r3
 800df3e:	4282      	cmp	r2, r0
 800df40:	d905      	bls.n	800df4e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 800df42:	5ccd      	ldrb	r5, [r1, r3]
 800df44:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 800df48:	3301      	adds	r3, #1
 800df4a:	2d00      	cmp	r5, #0
 800df4c:	d1f6      	bne.n	800df3c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 800df4e:	bd30      	pop	{r4, r5, pc}
 800df50:	4608      	mov	r0, r1
 800df52:	e7fc      	b.n	800df4e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0800df54 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 800df54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df56:	b08b      	sub	sp, #44	; 0x2c
 800df58:	468c      	mov	ip, r1
 800df5a:	2100      	movs	r1, #0
 800df5c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 800df60:	ae01      	add	r6, sp, #4
 800df62:	211f      	movs	r1, #31
 800df64:	fbb0 f7f3 	udiv	r7, r0, r3
 800df68:	fb03 0517 	mls	r5, r3, r7, r0
 800df6c:	b2ec      	uxtb	r4, r5
 800df6e:	2d09      	cmp	r5, #9
 800df70:	bfd4      	ite	le
 800df72:	3430      	addle	r4, #48	; 0x30
 800df74:	3457      	addgt	r4, #87	; 0x57
 800df76:	b2e4      	uxtb	r4, r4
 800df78:	558c      	strb	r4, [r1, r6]
 800df7a:	4638      	mov	r0, r7
 800df7c:	1e4c      	subs	r4, r1, #1
 800df7e:	b92f      	cbnz	r7, 800df8c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 800df80:	4431      	add	r1, r6
 800df82:	4660      	mov	r0, ip
 800df84:	f7ff ffd5 	bl	800df32 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 800df88:	b00b      	add	sp, #44	; 0x2c
 800df8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df8c:	4621      	mov	r1, r4
 800df8e:	e7e9      	b.n	800df64 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

0800df90 <_ZN8touchgfx7Unicode4itoaElPtti>:
 800df90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df92:	4607      	mov	r7, r0
 800df94:	b08b      	sub	sp, #44	; 0x2c
 800df96:	4608      	mov	r0, r1
 800df98:	b341      	cbz	r1, 800dfec <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 800df9a:	1e99      	subs	r1, r3, #2
 800df9c:	2922      	cmp	r1, #34	; 0x22
 800df9e:	d825      	bhi.n	800dfec <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 800dfa0:	2100      	movs	r1, #0
 800dfa2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 800dfa6:	463c      	mov	r4, r7
 800dfa8:	261f      	movs	r6, #31
 800dfaa:	f10d 0c04 	add.w	ip, sp, #4
 800dfae:	fb94 fef3 	sdiv	lr, r4, r3
 800dfb2:	fb03 441e 	mls	r4, r3, lr, r4
 800dfb6:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 800dfba:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 800dfbe:	b2ec      	uxtb	r4, r5
 800dfc0:	2d09      	cmp	r5, #9
 800dfc2:	bfd4      	ite	le
 800dfc4:	3430      	addle	r4, #48	; 0x30
 800dfc6:	3457      	addgt	r4, #87	; 0x57
 800dfc8:	b2e4      	uxtb	r4, r4
 800dfca:	f80c 4006 	strb.w	r4, [ip, r6]
 800dfce:	4674      	mov	r4, lr
 800dfd0:	1e71      	subs	r1, r6, #1
 800dfd2:	b96c      	cbnz	r4, 800dff0 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 800dfd4:	2f00      	cmp	r7, #0
 800dfd6:	da05      	bge.n	800dfe4 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 800dfd8:	ab0a      	add	r3, sp, #40	; 0x28
 800dfda:	4419      	add	r1, r3
 800dfdc:	232d      	movs	r3, #45	; 0x2d
 800dfde:	f801 3c24 	strb.w	r3, [r1, #-36]
 800dfe2:	1eb1      	subs	r1, r6, #2
 800dfe4:	3101      	adds	r1, #1
 800dfe6:	4461      	add	r1, ip
 800dfe8:	f7ff ffa3 	bl	800df32 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 800dfec:	b00b      	add	sp, #44	; 0x2c
 800dfee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dff0:	460e      	mov	r6, r1
 800dff2:	e7dc      	b.n	800dfae <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0800dff4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 800dff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dff8:	4691      	mov	r9, r2
 800dffa:	b085      	sub	sp, #20
 800dffc:	6802      	ldr	r2, [r0, #0]
 800dffe:	9201      	str	r2, [sp, #4]
 800e000:	4688      	mov	r8, r1
 800e002:	4683      	mov	fp, r0
 800e004:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 800e008:	9103      	str	r1, [sp, #12]
 800e00a:	4610      	mov	r0, r2
 800e00c:	461c      	mov	r4, r3
 800e00e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 800e012:	9302      	str	r3, [sp, #8]
 800e014:	f7ff ff80 	bl	800df18 <_ZN8touchgfx7Unicode6strlenEPKt>
 800e018:	f1b8 0f00 	cmp.w	r8, #0
 800e01c:	bf0c      	ite	eq
 800e01e:	4684      	moveq	ip, r0
 800e020:	f100 0c01 	addne.w	ip, r0, #1
 800e024:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 800e028:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 800e02c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800e02e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800e030:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 800e034:	9903      	ldr	r1, [sp, #12]
 800e036:	fa1f fc8c 	uxth.w	ip, ip
 800e03a:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e03e:	d041      	beq.n	800e0c4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 800e040:	d834      	bhi.n	800e0ac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 800e042:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 800e046:	d059      	beq.n	800e0fc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 800e048:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 800e04c:	d03a      	beq.n	800e0c4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 800e04e:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 800e052:	d034      	beq.n	800e0be <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 800e054:	2400      	movs	r4, #0
 800e056:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 800e05a:	3a01      	subs	r2, #1
 800e05c:	b169      	cbz	r1, 800e07a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 800e05e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e060:	458c      	cmp	ip, r1
 800e062:	da09      	bge.n	800e078 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 800e064:	eba1 010c 	sub.w	r1, r1, ip
 800e068:	b289      	uxth	r1, r1
 800e06a:	b933      	cbnz	r3, 800e07a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 800e06c:	2e00      	cmp	r6, #0
 800e06e:	d051      	beq.n	800e114 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 800e070:	2800      	cmp	r0, #0
 800e072:	d04f      	beq.n	800e114 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 800e074:	440c      	add	r4, r1
 800e076:	b2a4      	uxth	r4, r4
 800e078:	2100      	movs	r1, #0
 800e07a:	682b      	ldr	r3, [r5, #0]
 800e07c:	4293      	cmp	r3, r2
 800e07e:	da07      	bge.n	800e090 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 800e080:	f1b8 0f00 	cmp.w	r8, #0
 800e084:	d004      	beq.n	800e090 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 800e086:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 800e08a:	682b      	ldr	r3, [r5, #0]
 800e08c:	3301      	adds	r3, #1
 800e08e:	602b      	str	r3, [r5, #0]
 800e090:	2730      	movs	r7, #48	; 0x30
 800e092:	2c00      	cmp	r4, #0
 800e094:	d04e      	beq.n	800e134 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 800e096:	682e      	ldr	r6, [r5, #0]
 800e098:	3c01      	subs	r4, #1
 800e09a:	42b2      	cmp	r2, r6
 800e09c:	b2a4      	uxth	r4, r4
 800e09e:	dd49      	ble.n	800e134 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 800e0a0:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 800e0a4:	682b      	ldr	r3, [r5, #0]
 800e0a6:	3301      	adds	r3, #1
 800e0a8:	602b      	str	r3, [r5, #0]
 800e0aa:	e7f2      	b.n	800e092 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 800e0ac:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 800e0b0:	d01d      	beq.n	800e0ee <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 800e0b2:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 800e0b6:	d002      	beq.n	800e0be <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 800e0b8:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 800e0bc:	e7c9      	b.n	800e052 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 800e0be:	4684      	mov	ip, r0
 800e0c0:	f04f 0800 	mov.w	r8, #0
 800e0c4:	2c00      	cmp	r4, #0
 800e0c6:	d0c6      	beq.n	800e056 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 800e0c8:	b947      	cbnz	r7, 800e0dc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 800e0ca:	2801      	cmp	r0, #1
 800e0cc:	d106      	bne.n	800e0dc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 800e0ce:	8814      	ldrh	r4, [r2, #0]
 800e0d0:	2c30      	cmp	r4, #48	; 0x30
 800e0d2:	bf02      	ittt	eq
 800e0d4:	3202      	addeq	r2, #2
 800e0d6:	f8cb 2000 	streq.w	r2, [fp]
 800e0da:	4638      	moveq	r0, r7
 800e0dc:	45bc      	cmp	ip, r7
 800e0de:	da14      	bge.n	800e10a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 800e0e0:	b2bf      	uxth	r7, r7
 800e0e2:	eba7 040c 	sub.w	r4, r7, ip
 800e0e6:	b2a4      	uxth	r4, r4
 800e0e8:	46bc      	mov	ip, r7
 800e0ea:	2600      	movs	r6, #0
 800e0ec:	e7b3      	b.n	800e056 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 800e0ee:	4684      	mov	ip, r0
 800e0f0:	b16c      	cbz	r4, 800e10e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 800e0f2:	42b8      	cmp	r0, r7
 800e0f4:	dd00      	ble.n	800e0f8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 800e0f6:	b2b8      	uxth	r0, r7
 800e0f8:	2400      	movs	r4, #0
 800e0fa:	e003      	b.n	800e104 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 800e0fc:	f04f 0c01 	mov.w	ip, #1
 800e100:	2400      	movs	r4, #0
 800e102:	4660      	mov	r0, ip
 800e104:	4626      	mov	r6, r4
 800e106:	46a0      	mov	r8, r4
 800e108:	e7a5      	b.n	800e056 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 800e10a:	2400      	movs	r4, #0
 800e10c:	e7ed      	b.n	800e0ea <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 800e10e:	4626      	mov	r6, r4
 800e110:	46a0      	mov	r8, r4
 800e112:	e7a0      	b.n	800e056 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 800e114:	2900      	cmp	r1, #0
 800e116:	d0b0      	beq.n	800e07a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 800e118:	2720      	movs	r7, #32
 800e11a:	682e      	ldr	r6, [r5, #0]
 800e11c:	2900      	cmp	r1, #0
 800e11e:	d0ac      	beq.n	800e07a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 800e120:	3901      	subs	r1, #1
 800e122:	4296      	cmp	r6, r2
 800e124:	b289      	uxth	r1, r1
 800e126:	daa7      	bge.n	800e078 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 800e128:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 800e12c:	682b      	ldr	r3, [r5, #0]
 800e12e:	3301      	adds	r3, #1
 800e130:	602b      	str	r3, [r5, #0]
 800e132:	e7f2      	b.n	800e11a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 800e134:	b188      	cbz	r0, 800e15a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 800e136:	682b      	ldr	r3, [r5, #0]
 800e138:	3801      	subs	r0, #1
 800e13a:	429a      	cmp	r2, r3
 800e13c:	b280      	uxth	r0, r0
 800e13e:	dd0c      	ble.n	800e15a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 800e140:	f8db 3000 	ldr.w	r3, [fp]
 800e144:	1c9c      	adds	r4, r3, #2
 800e146:	f8cb 4000 	str.w	r4, [fp]
 800e14a:	881c      	ldrh	r4, [r3, #0]
 800e14c:	682b      	ldr	r3, [r5, #0]
 800e14e:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 800e152:	682b      	ldr	r3, [r5, #0]
 800e154:	3301      	adds	r3, #1
 800e156:	602b      	str	r3, [r5, #0]
 800e158:	e7ec      	b.n	800e134 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 800e15a:	2620      	movs	r6, #32
 800e15c:	b151      	cbz	r1, 800e174 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 800e15e:	6828      	ldr	r0, [r5, #0]
 800e160:	3901      	subs	r1, #1
 800e162:	4282      	cmp	r2, r0
 800e164:	b289      	uxth	r1, r1
 800e166:	dd05      	ble.n	800e174 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 800e168:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 800e16c:	682b      	ldr	r3, [r5, #0]
 800e16e:	3301      	adds	r3, #1
 800e170:	602b      	str	r3, [r5, #0]
 800e172:	e7f3      	b.n	800e15c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 800e174:	b005      	add	sp, #20
 800e176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e17a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 800e17a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e17e:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 800e182:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 800e186:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 800e18a:	2400      	movs	r4, #0
 800e18c:	8014      	strh	r4, [r2, #0]
 800e18e:	701c      	strb	r4, [r3, #0]
 800e190:	f888 4000 	strb.w	r4, [r8]
 800e194:	f88c 4000 	strb.w	r4, [ip]
 800e198:	f88e 4000 	strb.w	r4, [lr]
 800e19c:	703c      	strb	r4, [r7, #0]
 800e19e:	6804      	ldr	r4, [r0, #0]
 800e1a0:	b1a4      	cbz	r4, 800e1cc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 800e1a2:	8824      	ldrh	r4, [r4, #0]
 800e1a4:	f04f 0901 	mov.w	r9, #1
 800e1a8:	b314      	cbz	r4, 800e1f0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 800e1aa:	2c2b      	cmp	r4, #43	; 0x2b
 800e1ac:	d001      	beq.n	800e1b2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 800e1ae:	2c20      	cmp	r4, #32
 800e1b0:	d110      	bne.n	800e1d4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 800e1b2:	8014      	strh	r4, [r2, #0]
 800e1b4:	6804      	ldr	r4, [r0, #0]
 800e1b6:	b10c      	cbz	r4, 800e1bc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 800e1b8:	3402      	adds	r4, #2
 800e1ba:	6004      	str	r4, [r0, #0]
 800e1bc:	680c      	ldr	r4, [r1, #0]
 800e1be:	b10c      	cbz	r4, 800e1c4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 800e1c0:	3401      	adds	r4, #1
 800e1c2:	600c      	str	r4, [r1, #0]
 800e1c4:	6804      	ldr	r4, [r0, #0]
 800e1c6:	b17c      	cbz	r4, 800e1e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 800e1c8:	8824      	ldrh	r4, [r4, #0]
 800e1ca:	e7ed      	b.n	800e1a8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 800e1cc:	680c      	ldr	r4, [r1, #0]
 800e1ce:	b17c      	cbz	r4, 800e1f0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 800e1d0:	7824      	ldrb	r4, [r4, #0]
 800e1d2:	e7e7      	b.n	800e1a4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 800e1d4:	2c2d      	cmp	r4, #45	; 0x2d
 800e1d6:	d102      	bne.n	800e1de <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 800e1d8:	f883 9000 	strb.w	r9, [r3]
 800e1dc:	e7ea      	b.n	800e1b4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 800e1de:	2c23      	cmp	r4, #35	; 0x23
 800e1e0:	d107      	bne.n	800e1f2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 800e1e2:	f888 9000 	strb.w	r9, [r8]
 800e1e6:	e7e5      	b.n	800e1b4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 800e1e8:	680c      	ldr	r4, [r1, #0]
 800e1ea:	b10c      	cbz	r4, 800e1f0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 800e1ec:	7824      	ldrb	r4, [r4, #0]
 800e1ee:	e7db      	b.n	800e1a8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 800e1f0:	2400      	movs	r4, #0
 800e1f2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800e1f6:	2b09      	cmp	r3, #9
 800e1f8:	d901      	bls.n	800e1fe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 800e1fa:	2c2a      	cmp	r4, #42	; 0x2a
 800e1fc:	d122      	bne.n	800e244 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 800e1fe:	2301      	movs	r3, #1
 800e200:	2c30      	cmp	r4, #48	; 0x30
 800e202:	f88e 3000 	strb.w	r3, [lr]
 800e206:	d10d      	bne.n	800e224 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 800e208:	f88c 3000 	strb.w	r3, [ip]
 800e20c:	6803      	ldr	r3, [r0, #0]
 800e20e:	b10b      	cbz	r3, 800e214 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 800e210:	3302      	adds	r3, #2
 800e212:	6003      	str	r3, [r0, #0]
 800e214:	680b      	ldr	r3, [r1, #0]
 800e216:	b10b      	cbz	r3, 800e21c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 800e218:	3301      	adds	r3, #1
 800e21a:	600b      	str	r3, [r1, #0]
 800e21c:	6803      	ldr	r3, [r0, #0]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d02f      	beq.n	800e282 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 800e222:	881c      	ldrh	r4, [r3, #0]
 800e224:	2c2a      	cmp	r4, #42	; 0x2a
 800e226:	d135      	bne.n	800e294 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 800e228:	f04f 33ff 	mov.w	r3, #4294967295
 800e22c:	6033      	str	r3, [r6, #0]
 800e22e:	6803      	ldr	r3, [r0, #0]
 800e230:	b10b      	cbz	r3, 800e236 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 800e232:	3302      	adds	r3, #2
 800e234:	6003      	str	r3, [r0, #0]
 800e236:	680b      	ldr	r3, [r1, #0]
 800e238:	b10b      	cbz	r3, 800e23e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 800e23a:	3301      	adds	r3, #1
 800e23c:	600b      	str	r3, [r1, #0]
 800e23e:	6803      	ldr	r3, [r0, #0]
 800e240:	b31b      	cbz	r3, 800e28a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 800e242:	881c      	ldrh	r4, [r3, #0]
 800e244:	2c2e      	cmp	r4, #46	; 0x2e
 800e246:	d11a      	bne.n	800e27e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 800e248:	2301      	movs	r3, #1
 800e24a:	703b      	strb	r3, [r7, #0]
 800e24c:	6803      	ldr	r3, [r0, #0]
 800e24e:	b10b      	cbz	r3, 800e254 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 800e250:	3302      	adds	r3, #2
 800e252:	6003      	str	r3, [r0, #0]
 800e254:	680b      	ldr	r3, [r1, #0]
 800e256:	b10b      	cbz	r3, 800e25c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 800e258:	3301      	adds	r3, #1
 800e25a:	600b      	str	r3, [r1, #0]
 800e25c:	6803      	ldr	r3, [r0, #0]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d036      	beq.n	800e2d0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 800e262:	881b      	ldrh	r3, [r3, #0]
 800e264:	2b2a      	cmp	r3, #42	; 0x2a
 800e266:	d137      	bne.n	800e2d8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 800e268:	f04f 33ff 	mov.w	r3, #4294967295
 800e26c:	602b      	str	r3, [r5, #0]
 800e26e:	6803      	ldr	r3, [r0, #0]
 800e270:	b10b      	cbz	r3, 800e276 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 800e272:	3302      	adds	r3, #2
 800e274:	6003      	str	r3, [r0, #0]
 800e276:	680b      	ldr	r3, [r1, #0]
 800e278:	b10b      	cbz	r3, 800e27e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 800e27a:	3301      	adds	r3, #1
 800e27c:	600b      	str	r3, [r1, #0]
 800e27e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e282:	680c      	ldr	r4, [r1, #0]
 800e284:	b134      	cbz	r4, 800e294 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 800e286:	7824      	ldrb	r4, [r4, #0]
 800e288:	e7cc      	b.n	800e224 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 800e28a:	680b      	ldr	r3, [r1, #0]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d0f6      	beq.n	800e27e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 800e290:	781c      	ldrb	r4, [r3, #0]
 800e292:	e7d7      	b.n	800e244 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 800e294:	2300      	movs	r3, #0
 800e296:	6033      	str	r3, [r6, #0]
 800e298:	220a      	movs	r2, #10
 800e29a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e29e:	fa1f f38c 	uxth.w	r3, ip
 800e2a2:	2b09      	cmp	r3, #9
 800e2a4:	d8ce      	bhi.n	800e244 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 800e2a6:	6833      	ldr	r3, [r6, #0]
 800e2a8:	fb02 c303 	mla	r3, r2, r3, ip
 800e2ac:	6033      	str	r3, [r6, #0]
 800e2ae:	6803      	ldr	r3, [r0, #0]
 800e2b0:	b10b      	cbz	r3, 800e2b6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 800e2b2:	3302      	adds	r3, #2
 800e2b4:	6003      	str	r3, [r0, #0]
 800e2b6:	680b      	ldr	r3, [r1, #0]
 800e2b8:	b10b      	cbz	r3, 800e2be <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 800e2ba:	3301      	adds	r3, #1
 800e2bc:	600b      	str	r3, [r1, #0]
 800e2be:	6803      	ldr	r3, [r0, #0]
 800e2c0:	b10b      	cbz	r3, 800e2c6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 800e2c2:	881c      	ldrh	r4, [r3, #0]
 800e2c4:	e7e9      	b.n	800e29a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 800e2c6:	680c      	ldr	r4, [r1, #0]
 800e2c8:	2c00      	cmp	r4, #0
 800e2ca:	d0e6      	beq.n	800e29a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 800e2cc:	7824      	ldrb	r4, [r4, #0]
 800e2ce:	e7e4      	b.n	800e29a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 800e2d0:	680b      	ldr	r3, [r1, #0]
 800e2d2:	b10b      	cbz	r3, 800e2d8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 800e2d4:	781b      	ldrb	r3, [r3, #0]
 800e2d6:	e7c5      	b.n	800e264 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 800e2d8:	2200      	movs	r2, #0
 800e2da:	602a      	str	r2, [r5, #0]
 800e2dc:	240a      	movs	r4, #10
 800e2de:	3b30      	subs	r3, #48	; 0x30
 800e2e0:	b29e      	uxth	r6, r3
 800e2e2:	2e09      	cmp	r6, #9
 800e2e4:	682a      	ldr	r2, [r5, #0]
 800e2e6:	d813      	bhi.n	800e310 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 800e2e8:	fb04 3302 	mla	r3, r4, r2, r3
 800e2ec:	602b      	str	r3, [r5, #0]
 800e2ee:	6803      	ldr	r3, [r0, #0]
 800e2f0:	b10b      	cbz	r3, 800e2f6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 800e2f2:	3302      	adds	r3, #2
 800e2f4:	6003      	str	r3, [r0, #0]
 800e2f6:	680b      	ldr	r3, [r1, #0]
 800e2f8:	b10b      	cbz	r3, 800e2fe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 800e2fa:	3301      	adds	r3, #1
 800e2fc:	600b      	str	r3, [r1, #0]
 800e2fe:	6803      	ldr	r3, [r0, #0]
 800e300:	b10b      	cbz	r3, 800e306 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 800e302:	881b      	ldrh	r3, [r3, #0]
 800e304:	e7eb      	b.n	800e2de <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 800e306:	680b      	ldr	r3, [r1, #0]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d0e8      	beq.n	800e2de <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 800e30c:	781b      	ldrb	r3, [r3, #0]
 800e30e:	e7e6      	b.n	800e2de <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 800e310:	2a06      	cmp	r2, #6
 800e312:	bfa8      	it	ge
 800e314:	2206      	movge	r2, #6
 800e316:	602a      	str	r2, [r5, #0]
 800e318:	e7b1      	b.n	800e27e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0800e31a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 800e31a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e31e:	b0a3      	sub	sp, #140	; 0x8c
 800e320:	2600      	movs	r6, #0
 800e322:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 800e326:	4607      	mov	r7, r0
 800e328:	4688      	mov	r8, r1
 800e32a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800e32e:	4631      	mov	r1, r6
 800e330:	2242      	movs	r2, #66	; 0x42
 800e332:	4648      	mov	r0, r9
 800e334:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 800e336:	960d      	str	r6, [sp, #52]	; 0x34
 800e338:	f001 fb58 	bl	800f9ec <memset>
 800e33c:	b15f      	cbz	r7, 800e356 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 800e33e:	f108 3aff 	add.w	sl, r8, #4294967295
 800e342:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e344:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e346:	b152      	cbz	r2, 800e35e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 800e348:	8812      	ldrh	r2, [r2, #0]
 800e34a:	b10a      	cbz	r2, 800e350 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 800e34c:	459a      	cmp	sl, r3
 800e34e:	dc2e      	bgt.n	800e3ae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 800e350:	2200      	movs	r2, #0
 800e352:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 800e356:	4638      	mov	r0, r7
 800e358:	b023      	add	sp, #140	; 0x8c
 800e35a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e35e:	9a08      	ldr	r2, [sp, #32]
 800e360:	2a00      	cmp	r2, #0
 800e362:	d0f5      	beq.n	800e350 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 800e364:	7812      	ldrb	r2, [r2, #0]
 800e366:	e7f0      	b.n	800e34a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 800e368:	2d00      	cmp	r5, #0
 800e36a:	d0ea      	beq.n	800e342 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 800e36c:	782a      	ldrb	r2, [r5, #0]
 800e36e:	b142      	cbz	r2, 800e382 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 800e370:	2a25      	cmp	r2, #37	; 0x25
 800e372:	d001      	beq.n	800e378 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 800e374:	459a      	cmp	sl, r3
 800e376:	dc08      	bgt.n	800e38a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 800e378:	f1bb 0f00 	cmp.w	fp, #0
 800e37c:	d121      	bne.n	800e3c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 800e37e:	2d00      	cmp	r5, #0
 800e380:	d0df      	beq.n	800e342 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 800e382:	782a      	ldrb	r2, [r5, #0]
 800e384:	f04f 0b00 	mov.w	fp, #0
 800e388:	e01d      	b.n	800e3c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 800e38a:	f1bb 0f00 	cmp.w	fp, #0
 800e38e:	d078      	beq.n	800e482 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x168>
 800e390:	f8bb 2000 	ldrh.w	r2, [fp]
 800e394:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 800e398:	f1bb 0f00 	cmp.w	fp, #0
 800e39c:	d002      	beq.n	800e3a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 800e39e:	f10b 0202 	add.w	r2, fp, #2
 800e3a2:	9209      	str	r2, [sp, #36]	; 0x24
 800e3a4:	b10d      	cbz	r5, 800e3aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 800e3a6:	3501      	adds	r5, #1
 800e3a8:	9508      	str	r5, [sp, #32]
 800e3aa:	3301      	adds	r3, #1
 800e3ac:	930d      	str	r3, [sp, #52]	; 0x34
 800e3ae:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 800e3b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e3b4:	f1bb 0f00 	cmp.w	fp, #0
 800e3b8:	d0d6      	beq.n	800e368 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 800e3ba:	f8bb 2000 	ldrh.w	r2, [fp]
 800e3be:	2a00      	cmp	r2, #0
 800e3c0:	d1d6      	bne.n	800e370 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 800e3c2:	f8bb 2000 	ldrh.w	r2, [fp]
 800e3c6:	2a00      	cmp	r2, #0
 800e3c8:	d0bb      	beq.n	800e342 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 800e3ca:	459a      	cmp	sl, r3
 800e3cc:	ddb9      	ble.n	800e342 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 800e3ce:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 800e3d2:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 800e3d6:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 800e3da:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 800e3de:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 800e3e2:	960e      	str	r6, [sp, #56]	; 0x38
 800e3e4:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 800e3e8:	960f      	str	r6, [sp, #60]	; 0x3c
 800e3ea:	f1bb 0f00 	cmp.w	fp, #0
 800e3ee:	d002      	beq.n	800e3f6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 800e3f0:	f10b 0302 	add.w	r3, fp, #2
 800e3f4:	9309      	str	r3, [sp, #36]	; 0x24
 800e3f6:	b10d      	cbz	r5, 800e3fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 800e3f8:	1c6b      	adds	r3, r5, #1
 800e3fa:	9308      	str	r3, [sp, #32]
 800e3fc:	ab0f      	add	r3, sp, #60	; 0x3c
 800e3fe:	9305      	str	r3, [sp, #20]
 800e400:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 800e404:	9304      	str	r3, [sp, #16]
 800e406:	ab0e      	add	r3, sp, #56	; 0x38
 800e408:	9303      	str	r3, [sp, #12]
 800e40a:	ab0c      	add	r3, sp, #48	; 0x30
 800e40c:	9302      	str	r3, [sp, #8]
 800e40e:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 800e412:	9301      	str	r3, [sp, #4]
 800e414:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 800e418:	9300      	str	r3, [sp, #0]
 800e41a:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800e41e:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 800e422:	a908      	add	r1, sp, #32
 800e424:	a809      	add	r0, sp, #36	; 0x24
 800e426:	f7ff fea8 	bl	800e17a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 800e42a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	bfbe      	ittt	lt
 800e430:	6823      	ldrlt	r3, [r4, #0]
 800e432:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 800e436:	930e      	strlt	r3, [sp, #56]	; 0x38
 800e438:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e43a:	bfb8      	it	lt
 800e43c:	3404      	addlt	r4, #4
 800e43e:	2b00      	cmp	r3, #0
 800e440:	bfb8      	it	lt
 800e442:	6823      	ldrlt	r3, [r4, #0]
 800e444:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 800e448:	bfbe      	ittt	lt
 800e44a:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 800e44e:	930f      	strlt	r3, [sp, #60]	; 0x3c
 800e450:	3404      	addlt	r4, #4
 800e452:	b1d9      	cbz	r1, 800e48c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x172>
 800e454:	880b      	ldrh	r3, [r1, #0]
 800e456:	2b69      	cmp	r3, #105	; 0x69
 800e458:	d01f      	beq.n	800e49a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 800e45a:	d82f      	bhi.n	800e4bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a2>
 800e45c:	2b58      	cmp	r3, #88	; 0x58
 800e45e:	d01c      	beq.n	800e49a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 800e460:	d818      	bhi.n	800e494 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17a>
 800e462:	2b25      	cmp	r3, #37	; 0x25
 800e464:	d034      	beq.n	800e4d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b6>
 800e466:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 800e46a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e46c:	f1bb 0f00 	cmp.w	fp, #0
 800e470:	f000 80b8 	beq.w	800e5e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2ca>
 800e474:	f8bb 5000 	ldrh.w	r5, [fp]
 800e478:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 800e47c:	3301      	adds	r3, #1
 800e47e:	930d      	str	r3, [sp, #52]	; 0x34
 800e480:	e029      	b.n	800e4d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 800e482:	b10d      	cbz	r5, 800e488 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16e>
 800e484:	782a      	ldrb	r2, [r5, #0]
 800e486:	e785      	b.n	800e394 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 800e488:	462a      	mov	r2, r5
 800e48a:	e783      	b.n	800e394 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 800e48c:	2a00      	cmp	r2, #0
 800e48e:	d0ea      	beq.n	800e466 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 800e490:	7813      	ldrb	r3, [r2, #0]
 800e492:	e7e0      	b.n	800e456 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13c>
 800e494:	3b63      	subs	r3, #99	; 0x63
 800e496:	2b01      	cmp	r3, #1
 800e498:	d8e5      	bhi.n	800e466 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 800e49a:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 800e49e:	b329      	cbz	r1, 800e4ec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d2>
 800e4a0:	880b      	ldrh	r3, [r1, #0]
 800e4a2:	2b69      	cmp	r3, #105	; 0x69
 800e4a4:	d063      	beq.n	800e56e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 800e4a6:	d825      	bhi.n	800e4f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1da>
 800e4a8:	2b63      	cmp	r3, #99	; 0x63
 800e4aa:	d038      	beq.n	800e51e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x204>
 800e4ac:	2b64      	cmp	r3, #100	; 0x64
 800e4ae:	d05e      	beq.n	800e56e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 800e4b0:	2b58      	cmp	r3, #88	; 0x58
 800e4b2:	d07b      	beq.n	800e5ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x292>
 800e4b4:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 800e4b8:	4625      	mov	r5, r4
 800e4ba:	e036      	b.n	800e52a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 800e4bc:	2b73      	cmp	r3, #115	; 0x73
 800e4be:	d0ec      	beq.n	800e49a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 800e4c0:	d802      	bhi.n	800e4c8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ae>
 800e4c2:	2b6f      	cmp	r3, #111	; 0x6f
 800e4c4:	d1cf      	bne.n	800e466 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 800e4c6:	e7e8      	b.n	800e49a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 800e4c8:	2b75      	cmp	r3, #117	; 0x75
 800e4ca:	d0e6      	beq.n	800e49a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 800e4cc:	2b78      	cmp	r3, #120	; 0x78
 800e4ce:	e7f9      	b.n	800e4c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1aa>
 800e4d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e4d2:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 800e4d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4d8:	b10b      	cbz	r3, 800e4de <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c4>
 800e4da:	3302      	adds	r3, #2
 800e4dc:	9309      	str	r3, [sp, #36]	; 0x24
 800e4de:	9b08      	ldr	r3, [sp, #32]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	f43f af2e 	beq.w	800e342 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 800e4e6:	3301      	adds	r3, #1
 800e4e8:	9308      	str	r3, [sp, #32]
 800e4ea:	e72a      	b.n	800e342 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 800e4ec:	2a00      	cmp	r2, #0
 800e4ee:	d0e1      	beq.n	800e4b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 800e4f0:	7813      	ldrb	r3, [r2, #0]
 800e4f2:	e7d6      	b.n	800e4a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x188>
 800e4f4:	2b73      	cmp	r3, #115	; 0x73
 800e4f6:	d036      	beq.n	800e566 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24c>
 800e4f8:	d807      	bhi.n	800e50a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1f0>
 800e4fa:	2b6f      	cmp	r3, #111	; 0x6f
 800e4fc:	d1da      	bne.n	800e4b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 800e4fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e500:	1d25      	adds	r5, r4, #4
 800e502:	eba8 0202 	sub.w	r2, r8, r2
 800e506:	2308      	movs	r3, #8
 800e508:	e04a      	b.n	800e5a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 800e50a:	2b75      	cmp	r3, #117	; 0x75
 800e50c:	d043      	beq.n	800e596 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x27c>
 800e50e:	2b78      	cmp	r3, #120	; 0x78
 800e510:	d1d0      	bne.n	800e4b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 800e512:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e514:	1d25      	adds	r5, r4, #4
 800e516:	eba8 0202 	sub.w	r2, r8, r2
 800e51a:	2310      	movs	r3, #16
 800e51c:	e040      	b.n	800e5a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 800e51e:	6823      	ldr	r3, [r4, #0]
 800e520:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 800e524:	1d25      	adds	r5, r4, #4
 800e526:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 800e52a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e52c:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 800e530:	2b00      	cmp	r3, #0
 800e532:	d052      	beq.n	800e5da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c0>
 800e534:	881a      	ldrh	r2, [r3, #0]
 800e536:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 800e53a:	a80d      	add	r0, sp, #52	; 0x34
 800e53c:	9005      	str	r0, [sp, #20]
 800e53e:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 800e542:	9004      	str	r0, [sp, #16]
 800e544:	980e      	ldr	r0, [sp, #56]	; 0x38
 800e546:	9003      	str	r0, [sp, #12]
 800e548:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 800e54c:	9002      	str	r0, [sp, #8]
 800e54e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800e550:	9001      	str	r0, [sp, #4]
 800e552:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 800e556:	9000      	str	r0, [sp, #0]
 800e558:	e9cd 8706 	strd	r8, r7, [sp, #24]
 800e55c:	a810      	add	r0, sp, #64	; 0x40
 800e55e:	f7ff fd49 	bl	800dff4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 800e562:	462c      	mov	r4, r5
 800e564:	e7b7      	b.n	800e4d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 800e566:	6823      	ldr	r3, [r4, #0]
 800e568:	1d25      	adds	r5, r4, #4
 800e56a:	9310      	str	r3, [sp, #64]	; 0x40
 800e56c:	e7dd      	b.n	800e52a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 800e56e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e570:	6820      	ldr	r0, [r4, #0]
 800e572:	eba8 0202 	sub.w	r2, r8, r2
 800e576:	230a      	movs	r3, #10
 800e578:	b292      	uxth	r2, r2
 800e57a:	4649      	mov	r1, r9
 800e57c:	f7ff fd08 	bl	800df90 <_ZN8touchgfx7Unicode4itoaElPtti>
 800e580:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800e584:	2b2d      	cmp	r3, #45	; 0x2d
 800e586:	f104 0504 	add.w	r5, r4, #4
 800e58a:	d1ce      	bne.n	800e52a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 800e58c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 800e590:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e592:	3302      	adds	r3, #2
 800e594:	e7e9      	b.n	800e56a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x250>
 800e596:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e598:	1d25      	adds	r5, r4, #4
 800e59a:	eba8 0202 	sub.w	r2, r8, r2
 800e59e:	230a      	movs	r3, #10
 800e5a0:	b292      	uxth	r2, r2
 800e5a2:	4649      	mov	r1, r9
 800e5a4:	6820      	ldr	r0, [r4, #0]
 800e5a6:	f7ff fcd5 	bl	800df54 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 800e5aa:	e7be      	b.n	800e52a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 800e5ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e5ae:	6820      	ldr	r0, [r4, #0]
 800e5b0:	eba8 0202 	sub.w	r2, r8, r2
 800e5b4:	b292      	uxth	r2, r2
 800e5b6:	2310      	movs	r3, #16
 800e5b8:	4649      	mov	r1, r9
 800e5ba:	f7ff fccb 	bl	800df54 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 800e5be:	1d25      	adds	r5, r4, #4
 800e5c0:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 800e5c4:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d0ae      	beq.n	800e52a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 800e5cc:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 800e5d0:	2919      	cmp	r1, #25
 800e5d2:	d8f7      	bhi.n	800e5c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 800e5d4:	3b20      	subs	r3, #32
 800e5d6:	8013      	strh	r3, [r2, #0]
 800e5d8:	e7f4      	b.n	800e5c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 800e5da:	9a08      	ldr	r2, [sp, #32]
 800e5dc:	2a00      	cmp	r2, #0
 800e5de:	d0aa      	beq.n	800e536 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 800e5e0:	7812      	ldrb	r2, [r2, #0]
 800e5e2:	e7a8      	b.n	800e536 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 800e5e4:	2d00      	cmp	r5, #0
 800e5e6:	f43f af47 	beq.w	800e478 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>
 800e5ea:	782d      	ldrb	r5, [r5, #0]
 800e5ec:	e744      	b.n	800e478 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>

0800e5ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 800e5ee:	b507      	push	{r0, r1, r2, lr}
 800e5f0:	9300      	str	r3, [sp, #0]
 800e5f2:	4613      	mov	r3, r2
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	f7ff fe90 	bl	800e31a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 800e5fa:	b003      	add	sp, #12
 800e5fc:	f85d fb04 	ldr.w	pc, [sp], #4

0800e600 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 800e600:	b40c      	push	{r2, r3}
 800e602:	b507      	push	{r0, r1, r2, lr}
 800e604:	ab04      	add	r3, sp, #16
 800e606:	f853 2b04 	ldr.w	r2, [r3], #4
 800e60a:	9301      	str	r3, [sp, #4]
 800e60c:	f7ff ffef 	bl	800e5ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 800e610:	b003      	add	sp, #12
 800e612:	f85d eb04 	ldr.w	lr, [sp], #4
 800e616:	b002      	add	sp, #8
 800e618:	4770      	bx	lr
	...

0800e61c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 800e61c:	4b01      	ldr	r3, [pc, #4]	; (800e624 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 800e61e:	6018      	str	r0, [r3, #0]
 800e620:	4770      	bx	lr
 800e622:	bf00      	nop
 800e624:	20001334 	.word	0x20001334

0800e628 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 800e628:	4b06      	ldr	r3, [pc, #24]	; (800e644 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 800e62a:	881a      	ldrh	r2, [r3, #0]
 800e62c:	4282      	cmp	r2, r0
 800e62e:	d807      	bhi.n	800e640 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 800e630:	4b05      	ldr	r3, [pc, #20]	; (800e648 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 800e632:	881b      	ldrh	r3, [r3, #0]
 800e634:	4413      	add	r3, r2
 800e636:	4298      	cmp	r0, r3
 800e638:	bfac      	ite	ge
 800e63a:	2000      	movge	r0, #0
 800e63c:	2001      	movlt	r0, #1
 800e63e:	4770      	bx	lr
 800e640:	2000      	movs	r0, #0
 800e642:	4770      	bx	lr
 800e644:	20001354 	.word	0x20001354
 800e648:	20001358 	.word	0x20001358

0800e64c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 800e64c:	b508      	push	{r3, lr}
 800e64e:	4601      	mov	r1, r0
 800e650:	f7ff ffea 	bl	800e628 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 800e654:	b118      	cbz	r0, 800e65e <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 800e656:	4b02      	ldr	r3, [pc, #8]	; (800e660 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800e65e:	bd08      	pop	{r3, pc}
 800e660:	20001338 	.word	0x20001338

0800e664 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 800e664:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e666:	4c24      	ldr	r4, [pc, #144]	; (800e6f8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 800e668:	6823      	ldr	r3, [r4, #0]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d042      	beq.n	800e6f4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 800e66e:	4a23      	ldr	r2, [pc, #140]	; (800e6fc <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 800e670:	4d23      	ldr	r5, [pc, #140]	; (800e700 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 800e672:	8811      	ldrh	r1, [r2, #0]
 800e674:	f8b5 c000 	ldrh.w	ip, [r5]
 800e678:	4822      	ldr	r0, [pc, #136]	; (800e704 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 800e67a:	4461      	add	r1, ip
 800e67c:	1c4a      	adds	r2, r1, #1
 800e67e:	f022 0201 	bic.w	r2, r2, #1
 800e682:	008f      	lsls	r7, r1, #2
 800e684:	0412      	lsls	r2, r2, #16
 800e686:	19de      	adds	r6, r3, r7
 800e688:	0c12      	lsrs	r2, r2, #16
 800e68a:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 800e68e:	6006      	str	r6, [r0, #0]
 800e690:	4e1d      	ldr	r6, [pc, #116]	; (800e708 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 800e692:	19da      	adds	r2, r3, r7
 800e694:	6032      	str	r2, [r6, #0]
 800e696:	220e      	movs	r2, #14
 800e698:	fb02 f20c 	mul.w	r2, r2, ip
 800e69c:	3203      	adds	r2, #3
 800e69e:	f022 0203 	bic.w	r2, r2, #3
 800e6a2:	443a      	add	r2, r7
 800e6a4:	4f19      	ldr	r7, [pc, #100]	; (800e70c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 800e6a6:	4413      	add	r3, r2
 800e6a8:	603b      	str	r3, [r7, #0]
 800e6aa:	4f19      	ldr	r7, [pc, #100]	; (800e710 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	803b      	strh	r3, [r7, #0]
 800e6b0:	4f18      	ldr	r7, [pc, #96]	; (800e714 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 800e6b2:	683f      	ldr	r7, [r7, #0]
 800e6b4:	1aba      	subs	r2, r7, r2
 800e6b6:	4f18      	ldr	r7, [pc, #96]	; (800e718 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 800e6b8:	603a      	str	r2, [r7, #0]
 800e6ba:	4a18      	ldr	r2, [pc, #96]	; (800e71c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 800e6bc:	469c      	mov	ip, r3
 800e6be:	8013      	strh	r3, [r2, #0]
 800e6c0:	f64f 77ff 	movw	r7, #65535	; 0xffff
 800e6c4:	428b      	cmp	r3, r1
 800e6c6:	d10d      	bne.n	800e6e4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 800e6c8:	882d      	ldrh	r5, [r5, #0]
 800e6ca:	6830      	ldr	r0, [r6, #0]
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	240e      	movs	r4, #14
 800e6d0:	429d      	cmp	r5, r3
 800e6d2:	d90f      	bls.n	800e6f4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 800e6d4:	fb04 0203 	mla	r2, r4, r3, r0
 800e6d8:	3301      	adds	r3, #1
 800e6da:	7b11      	ldrb	r1, [r2, #12]
 800e6dc:	f36f 1145 	bfc	r1, #5, #1
 800e6e0:	7311      	strb	r1, [r2, #12]
 800e6e2:	e7f5      	b.n	800e6d0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 800e6e4:	6822      	ldr	r2, [r4, #0]
 800e6e6:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 800e6ea:	6802      	ldr	r2, [r0, #0]
 800e6ec:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 800e6f0:	3301      	adds	r3, #1
 800e6f2:	e7e7      	b.n	800e6c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 800e6f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e6f6:	bf00      	nop
 800e6f8:	20001338 	.word	0x20001338
 800e6fc:	20001354 	.word	0x20001354
 800e700:	20001358 	.word	0x20001358
 800e704:	2000134c 	.word	0x2000134c
 800e708:	2000133c 	.word	0x2000133c
 800e70c:	20001344 	.word	0x20001344
 800e710:	20001356 	.word	0x20001356
 800e714:	20001340 	.word	0x20001340
 800e718:	20001350 	.word	0x20001350
 800e71c:	20001348 	.word	0x20001348

0800e720 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 800e720:	4b06      	ldr	r3, [pc, #24]	; (800e73c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	b943      	cbnz	r3, 800e738 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 800e726:	b139      	cbz	r1, 800e738 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 800e728:	4b05      	ldr	r3, [pc, #20]	; (800e740 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 800e72a:	801a      	strh	r2, [r3, #0]
 800e72c:	4b05      	ldr	r3, [pc, #20]	; (800e744 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 800e72e:	6019      	str	r1, [r3, #0]
 800e730:	4b05      	ldr	r3, [pc, #20]	; (800e748 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 800e732:	6018      	str	r0, [r3, #0]
 800e734:	f7ff bf96 	b.w	800e664 <_ZN8touchgfx6Bitmap10clearCacheEv>
 800e738:	4770      	bx	lr
 800e73a:	bf00      	nop
 800e73c:	20001344 	.word	0x20001344
 800e740:	20001358 	.word	0x20001358
 800e744:	20001340 	.word	0x20001340
 800e748:	20001338 	.word	0x20001338

0800e74c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 800e74c:	b470      	push	{r4, r5, r6}
 800e74e:	4c07      	ldr	r4, [pc, #28]	; (800e76c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 800e750:	6826      	ldr	r6, [r4, #0]
 800e752:	4605      	mov	r5, r0
 800e754:	4610      	mov	r0, r2
 800e756:	9a03      	ldr	r2, [sp, #12]
 800e758:	b936      	cbnz	r6, 800e768 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 800e75a:	6025      	str	r5, [r4, #0]
 800e75c:	4c04      	ldr	r4, [pc, #16]	; (800e770 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 800e75e:	8021      	strh	r1, [r4, #0]
 800e760:	bc70      	pop	{r4, r5, r6}
 800e762:	4619      	mov	r1, r3
 800e764:	f7ff bfdc 	b.w	800e720 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 800e768:	bc70      	pop	{r4, r5, r6}
 800e76a:	4770      	bx	lr
 800e76c:	2000135c 	.word	0x2000135c
 800e770:	20001354 	.word	0x20001354

0800e774 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 800e774:	4a12      	ldr	r2, [pc, #72]	; (800e7c0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 800e776:	8803      	ldrh	r3, [r0, #0]
 800e778:	8812      	ldrh	r2, [r2, #0]
 800e77a:	4293      	cmp	r3, r2
 800e77c:	d207      	bcs.n	800e78e <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 800e77e:	4a11      	ldr	r2, [pc, #68]	; (800e7c4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 800e780:	6812      	ldr	r2, [r2, #0]
 800e782:	2114      	movs	r1, #20
 800e784:	fb01 2303 	mla	r3, r1, r3, r2
 800e788:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 800e78c:	4770      	bx	lr
 800e78e:	490e      	ldr	r1, [pc, #56]	; (800e7c8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 800e790:	8809      	ldrh	r1, [r1, #0]
 800e792:	4411      	add	r1, r2
 800e794:	428b      	cmp	r3, r1
 800e796:	da04      	bge.n	800e7a2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 800e798:	1a9b      	subs	r3, r3, r2
 800e79a:	4a0c      	ldr	r2, [pc, #48]	; (800e7cc <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 800e79c:	210e      	movs	r1, #14
 800e79e:	6812      	ldr	r2, [r2, #0]
 800e7a0:	e7f0      	b.n	800e784 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 800e7a2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e7a6:	4293      	cmp	r3, r2
 800e7a8:	d108      	bne.n	800e7bc <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 800e7aa:	4b09      	ldr	r3, [pc, #36]	; (800e7d0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 800e7ac:	781b      	ldrb	r3, [r3, #0]
 800e7ae:	b91b      	cbnz	r3, 800e7b8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 800e7b0:	4b08      	ldr	r3, [pc, #32]	; (800e7d4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 800e7b2:	f9b3 0000 	ldrsh.w	r0, [r3]
 800e7b6:	4770      	bx	lr
 800e7b8:	4b07      	ldr	r3, [pc, #28]	; (800e7d8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 800e7ba:	e7fa      	b.n	800e7b2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 800e7bc:	2000      	movs	r0, #0
 800e7be:	4770      	bx	lr
 800e7c0:	20001354 	.word	0x20001354
 800e7c4:	2000135c 	.word	0x2000135c
 800e7c8:	20001358 	.word	0x20001358
 800e7cc:	2000133c 	.word	0x2000133c
 800e7d0:	200012cc 	.word	0x200012cc
 800e7d4:	200012ce 	.word	0x200012ce
 800e7d8:	200012d0 	.word	0x200012d0

0800e7dc <_ZNK8touchgfx6Bitmap9getHeightEv>:
 800e7dc:	4a12      	ldr	r2, [pc, #72]	; (800e828 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 800e7de:	8803      	ldrh	r3, [r0, #0]
 800e7e0:	8812      	ldrh	r2, [r2, #0]
 800e7e2:	4293      	cmp	r3, r2
 800e7e4:	d207      	bcs.n	800e7f6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 800e7e6:	4a11      	ldr	r2, [pc, #68]	; (800e82c <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 800e7e8:	6812      	ldr	r2, [r2, #0]
 800e7ea:	2114      	movs	r1, #20
 800e7ec:	fb01 2303 	mla	r3, r1, r3, r2
 800e7f0:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 800e7f4:	4770      	bx	lr
 800e7f6:	490e      	ldr	r1, [pc, #56]	; (800e830 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 800e7f8:	8809      	ldrh	r1, [r1, #0]
 800e7fa:	4411      	add	r1, r2
 800e7fc:	428b      	cmp	r3, r1
 800e7fe:	da04      	bge.n	800e80a <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 800e800:	1a9b      	subs	r3, r3, r2
 800e802:	4a0c      	ldr	r2, [pc, #48]	; (800e834 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 800e804:	210e      	movs	r1, #14
 800e806:	6812      	ldr	r2, [r2, #0]
 800e808:	e7f0      	b.n	800e7ec <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 800e80a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e80e:	4293      	cmp	r3, r2
 800e810:	d108      	bne.n	800e824 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 800e812:	4b09      	ldr	r3, [pc, #36]	; (800e838 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 800e814:	781b      	ldrb	r3, [r3, #0]
 800e816:	b91b      	cbnz	r3, 800e820 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 800e818:	4b08      	ldr	r3, [pc, #32]	; (800e83c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 800e81a:	f9b3 0000 	ldrsh.w	r0, [r3]
 800e81e:	4770      	bx	lr
 800e820:	4b07      	ldr	r3, [pc, #28]	; (800e840 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 800e822:	e7fa      	b.n	800e81a <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 800e824:	2000      	movs	r0, #0
 800e826:	4770      	bx	lr
 800e828:	20001354 	.word	0x20001354
 800e82c:	2000135c 	.word	0x2000135c
 800e830:	20001358 	.word	0x20001358
 800e834:	2000133c 	.word	0x2000133c
 800e838:	200012cc 	.word	0x200012cc
 800e83c:	200012d0 	.word	0x200012d0
 800e840:	200012ce 	.word	0x200012ce

0800e844 <_ZNK8touchgfx6Bitmap7getDataEv>:
 800e844:	4a12      	ldr	r2, [pc, #72]	; (800e890 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 800e846:	8803      	ldrh	r3, [r0, #0]
 800e848:	8811      	ldrh	r1, [r2, #0]
 800e84a:	428b      	cmp	r3, r1
 800e84c:	d20b      	bcs.n	800e866 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 800e84e:	4a11      	ldr	r2, [pc, #68]	; (800e894 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 800e850:	6812      	ldr	r2, [r2, #0]
 800e852:	b112      	cbz	r2, 800e85a <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 800e854:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e858:	b9c0      	cbnz	r0, 800e88c <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 800e85a:	4a0f      	ldr	r2, [pc, #60]	; (800e898 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 800e85c:	6811      	ldr	r1, [r2, #0]
 800e85e:	2214      	movs	r2, #20
 800e860:	4353      	muls	r3, r2
 800e862:	58c8      	ldr	r0, [r1, r3]
 800e864:	4770      	bx	lr
 800e866:	4a0d      	ldr	r2, [pc, #52]	; (800e89c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 800e868:	8812      	ldrh	r2, [r2, #0]
 800e86a:	440a      	add	r2, r1
 800e86c:	4293      	cmp	r3, r2
 800e86e:	da04      	bge.n	800e87a <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 800e870:	4a08      	ldr	r2, [pc, #32]	; (800e894 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 800e872:	6812      	ldr	r2, [r2, #0]
 800e874:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e878:	4770      	bx	lr
 800e87a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e87e:	4293      	cmp	r3, r2
 800e880:	d103      	bne.n	800e88a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 800e882:	4b07      	ldr	r3, [pc, #28]	; (800e8a0 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800e888:	4770      	bx	lr
 800e88a:	2000      	movs	r0, #0
 800e88c:	4770      	bx	lr
 800e88e:	bf00      	nop
 800e890:	20001354 	.word	0x20001354
 800e894:	20001338 	.word	0x20001338
 800e898:	2000135c 	.word	0x2000135c
 800e89c:	20001358 	.word	0x20001358
 800e8a0:	200012d4 	.word	0x200012d4

0800e8a4 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 800e8a4:	b510      	push	{r4, lr}
 800e8a6:	4a17      	ldr	r2, [pc, #92]	; (800e904 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 800e8a8:	8803      	ldrh	r3, [r0, #0]
 800e8aa:	8812      	ldrh	r2, [r2, #0]
 800e8ac:	4293      	cmp	r3, r2
 800e8ae:	d20c      	bcs.n	800e8ca <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 800e8b0:	4a15      	ldr	r2, [pc, #84]	; (800e908 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 800e8b2:	6812      	ldr	r2, [r2, #0]
 800e8b4:	2114      	movs	r1, #20
 800e8b6:	fb01 2303 	mla	r3, r1, r3, r2
 800e8ba:	7c58      	ldrb	r0, [r3, #17]
 800e8bc:	0942      	lsrs	r2, r0, #5
 800e8be:	7cd8      	ldrb	r0, [r3, #19]
 800e8c0:	f3c0 1042 	ubfx	r0, r0, #5, #3
 800e8c4:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 800e8c8:	bd10      	pop	{r4, pc}
 800e8ca:	4910      	ldr	r1, [pc, #64]	; (800e90c <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 800e8cc:	8809      	ldrh	r1, [r1, #0]
 800e8ce:	4411      	add	r1, r2
 800e8d0:	428b      	cmp	r3, r1
 800e8d2:	da09      	bge.n	800e8e8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 800e8d4:	1a9b      	subs	r3, r3, r2
 800e8d6:	4a0e      	ldr	r2, [pc, #56]	; (800e910 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 800e8d8:	6812      	ldr	r2, [r2, #0]
 800e8da:	210e      	movs	r1, #14
 800e8dc:	fb01 2303 	mla	r3, r1, r3, r2
 800e8e0:	7b18      	ldrb	r0, [r3, #12]
 800e8e2:	f000 001f 	and.w	r0, r0, #31
 800e8e6:	e7ef      	b.n	800e8c8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 800e8e8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e8ec:	4293      	cmp	r3, r2
 800e8ee:	d106      	bne.n	800e8fe <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 800e8f0:	f7fa f92e 	bl	8008b50 <_ZN8touchgfx3HAL3lcdEv>
 800e8f4:	6803      	ldr	r3, [r0, #0]
 800e8f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e8fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8fc:	4718      	bx	r3
 800e8fe:	2000      	movs	r0, #0
 800e900:	e7e2      	b.n	800e8c8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 800e902:	bf00      	nop
 800e904:	20001354 	.word	0x20001354
 800e908:	2000135c 	.word	0x2000135c
 800e90c:	20001358 	.word	0x20001358
 800e910:	2000133c 	.word	0x2000133c

0800e914 <_ZNK8touchgfx7LCD1bpp8bitDepthEv>:
 800e914:	2001      	movs	r0, #1
 800e916:	4770      	bx	lr

0800e918 <_ZNK8touchgfx7LCD1bpp17framebufferFormatEv>:
 800e918:	2003      	movs	r0, #3
 800e91a:	4770      	bx	lr

0800e91c <_ZNK8touchgfx7LCD1bpp17framebufferStrideEv>:
 800e91c:	4b02      	ldr	r3, [pc, #8]	; (800e928 <_ZNK8touchgfx7LCD1bpp17framebufferStrideEv+0xc>)
 800e91e:	8818      	ldrh	r0, [r3, #0]
 800e920:	3007      	adds	r0, #7
 800e922:	08c0      	lsrs	r0, r0, #3
 800e924:	4770      	bx	lr
 800e926:	bf00      	nop
 800e928:	200012ce 	.word	0x200012ce

0800e92c <_ZN8touchgfx7LCD1bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 800e92c:	4770      	bx	lr
	...

0800e930 <_ZN8touchgfx7LCD1bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 800e930:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e932:	2300      	movs	r3, #0
 800e934:	9302      	str	r3, [sp, #8]
 800e936:	4b13      	ldr	r3, [pc, #76]	; (800e984 <_ZN8touchgfx7LCD1bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x54>)
 800e938:	781a      	ldrb	r2, [r3, #0]
 800e93a:	4604      	mov	r4, r0
 800e93c:	460e      	mov	r6, r1
 800e93e:	b9e2      	cbnz	r2, 800e97a <_ZN8touchgfx7LCD1bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x4a>
 800e940:	4b11      	ldr	r3, [pc, #68]	; (800e988 <_ZN8touchgfx7LCD1bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x58>)
 800e942:	f9b3 0000 	ldrsh.w	r0, [r3]
 800e946:	f8ad 000c 	strh.w	r0, [sp, #12]
 800e94a:	b9c2      	cbnz	r2, 800e97e <_ZN8touchgfx7LCD1bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x4e>
 800e94c:	4b0f      	ldr	r3, [pc, #60]	; (800e98c <_ZN8touchgfx7LCD1bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x5c>)
 800e94e:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e952:	4b0f      	ldr	r3, [pc, #60]	; (800e990 <_ZN8touchgfx7LCD1bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x60>)
 800e954:	f8ad 200e 	strh.w	r2, [sp, #14]
 800e958:	6818      	ldr	r0, [r3, #0]
 800e95a:	6803      	ldr	r3, [r0, #0]
 800e95c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e95e:	4798      	blx	r3
 800e960:	22ff      	movs	r2, #255	; 0xff
 800e962:	2100      	movs	r1, #0
 800e964:	e9cd 2100 	strd	r2, r1, [sp]
 800e968:	6823      	ldr	r3, [r4, #0]
 800e96a:	4601      	mov	r1, r0
 800e96c:	68dd      	ldr	r5, [r3, #12]
 800e96e:	aa02      	add	r2, sp, #8
 800e970:	4633      	mov	r3, r6
 800e972:	4620      	mov	r0, r4
 800e974:	47a8      	blx	r5
 800e976:	b004      	add	sp, #16
 800e978:	bd70      	pop	{r4, r5, r6, pc}
 800e97a:	4b04      	ldr	r3, [pc, #16]	; (800e98c <_ZN8touchgfx7LCD1bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x5c>)
 800e97c:	e7e1      	b.n	800e942 <_ZN8touchgfx7LCD1bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 800e97e:	4b02      	ldr	r3, [pc, #8]	; (800e988 <_ZN8touchgfx7LCD1bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x58>)
 800e980:	e7e5      	b.n	800e94e <_ZN8touchgfx7LCD1bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x1e>
 800e982:	bf00      	nop
 800e984:	200012cc 	.word	0x200012cc
 800e988:	200012ce 	.word	0x200012ce
 800e98c:	200012d0 	.word	0x200012d0
 800e990:	200012d4 	.word	0x200012d4

0800e994 <_ZN8touchgfx7LCD1bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 800e994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e998:	b088      	sub	sp, #32
 800e99a:	ac08      	add	r4, sp, #32
 800e99c:	4606      	mov	r6, r0
 800e99e:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 800e9a2:	4620      	mov	r0, r4
 800e9a4:	4688      	mov	r8, r1
 800e9a6:	4691      	mov	r9, r2
 800e9a8:	f7ff ff4c 	bl	800e844 <_ZNK8touchgfx6Bitmap7getDataEv>
 800e9ac:	6833      	ldr	r3, [r6, #0]
 800e9ae:	4605      	mov	r5, r0
 800e9b0:	4620      	mov	r0, r4
 800e9b2:	699f      	ldr	r7, [r3, #24]
 800e9b4:	f7ff fede 	bl	800e774 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800e9b8:	4682      	mov	sl, r0
 800e9ba:	4620      	mov	r0, r4
 800e9bc:	f7ff ff0e 	bl	800e7dc <_ZNK8touchgfx6Bitmap9getHeightEv>
 800e9c0:	9500      	str	r5, [sp, #0]
 800e9c2:	e9cd a001 	strd	sl, r0, [sp, #4]
 800e9c6:	464b      	mov	r3, r9
 800e9c8:	a806      	add	r0, sp, #24
 800e9ca:	4642      	mov	r2, r8
 800e9cc:	4631      	mov	r1, r6
 800e9ce:	47b8      	blx	r7
 800e9d0:	4628      	mov	r0, r5
 800e9d2:	b008      	add	sp, #32
 800e9d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800e9d8 <_ZN8touchgfx7LCD1bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 800e9d8:	b4f0      	push	{r4, r5, r6, r7}
 800e9da:	4616      	mov	r6, r2
 800e9dc:	2e03      	cmp	r6, #3
 800e9de:	461a      	mov	r2, r3
 800e9e0:	f89d 4014 	ldrb.w	r4, [sp, #20]
 800e9e4:	9b04      	ldr	r3, [sp, #16]
 800e9e6:	f89d 7018 	ldrb.w	r7, [sp, #24]
 800e9ea:	d003      	beq.n	800e9f4 <_ZN8touchgfx7LCD1bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 800e9ec:	2e04      	cmp	r6, #4
 800e9ee:	d008      	beq.n	800ea02 <_ZN8touchgfx7LCD1bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 800e9f0:	bcf0      	pop	{r4, r5, r6, r7}
 800e9f2:	4770      	bx	lr
 800e9f4:	e9cd 4704 	strd	r4, r7, [sp, #16]
 800e9f8:	6805      	ldr	r5, [r0, #0]
 800e9fa:	68ec      	ldr	r4, [r5, #12]
 800e9fc:	46a4      	mov	ip, r4
 800e9fe:	bcf0      	pop	{r4, r5, r6, r7}
 800ea00:	4760      	bx	ip
 800ea02:	6805      	ldr	r5, [r0, #0]
 800ea04:	9404      	str	r4, [sp, #16]
 800ea06:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 800ea08:	46a4      	mov	ip, r4
 800ea0a:	bcf0      	pop	{r4, r5, r6, r7}
 800ea0c:	4760      	bx	ip

0800ea0e <_ZN8touchgfx7LCD1bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 800ea0e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ea12:	b085      	sub	sp, #20
 800ea14:	4605      	mov	r5, r0
 800ea16:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 800ea1a:	460c      	mov	r4, r1
 800ea1c:	4691      	mov	r9, r2
 800ea1e:	4698      	mov	r8, r3
 800ea20:	b1f6      	cbz	r6, 800ea60 <_ZN8touchgfx7LCD1bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x52>
 800ea22:	4608      	mov	r0, r1
 800ea24:	f7ff fea6 	bl	800e774 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800ea28:	4607      	mov	r7, r0
 800ea2a:	4620      	mov	r0, r4
 800ea2c:	f7ff fed6 	bl	800e7dc <_ZNK8touchgfx6Bitmap9getHeightEv>
 800ea30:	f8ad 000e 	strh.w	r0, [sp, #14]
 800ea34:	4620      	mov	r0, r4
 800ea36:	f8ad 9008 	strh.w	r9, [sp, #8]
 800ea3a:	f8ad 800a 	strh.w	r8, [sp, #10]
 800ea3e:	f8ad 700c 	strh.w	r7, [sp, #12]
 800ea42:	f7ff ff2f 	bl	800e8a4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800ea46:	2804      	cmp	r0, #4
 800ea48:	682b      	ldr	r3, [r5, #0]
 800ea4a:	d10c      	bne.n	800ea66 <_ZN8touchgfx7LCD1bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x58>
 800ea4c:	4620      	mov	r0, r4
 800ea4e:	6d1f      	ldr	r7, [r3, #80]	; 0x50
 800ea50:	f7ff fef8 	bl	800e844 <_ZNK8touchgfx6Bitmap7getDataEv>
 800ea54:	9600      	str	r6, [sp, #0]
 800ea56:	4601      	mov	r1, r0
 800ea58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ea5a:	aa02      	add	r2, sp, #8
 800ea5c:	4628      	mov	r0, r5
 800ea5e:	47b8      	blx	r7
 800ea60:	b005      	add	sp, #20
 800ea62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea66:	4620      	mov	r0, r4
 800ea68:	68df      	ldr	r7, [r3, #12]
 800ea6a:	f7ff feeb 	bl	800e844 <_ZNK8touchgfx6Bitmap7getDataEv>
 800ea6e:	2300      	movs	r3, #0
 800ea70:	e9cd 6300 	strd	r6, r3, [sp]
 800ea74:	4601      	mov	r1, r0
 800ea76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ea78:	aa02      	add	r2, sp, #8
 800ea7a:	4628      	mov	r0, r5
 800ea7c:	47b8      	blx	r7
 800ea7e:	e7ef      	b.n	800ea60 <_ZN8touchgfx7LCD1bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x52>

0800ea80 <_ZN8touchgfx7LCD1bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 800ea80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea82:	461e      	mov	r6, r3
 800ea84:	0633      	lsls	r3, r6, #24
 800ea86:	b085      	sub	sp, #20
 800ea88:	4605      	mov	r5, r0
 800ea8a:	4617      	mov	r7, r2
 800ea8c:	d521      	bpl.n	800ead2 <_ZN8touchgfx7LCD1bpp8fillRectERKNS_4RectENS_9colortypeEh+0x52>
 800ea8e:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	dd1d      	ble.n	800ead2 <_ZN8touchgfx7LCD1bpp8fillRectERKNS_4RectENS_9colortypeEh+0x52>
 800ea96:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	dd19      	ble.n	800ead2 <_ZN8touchgfx7LCD1bpp8fillRectERKNS_4RectENS_9colortypeEh+0x52>
 800ea9e:	6808      	ldr	r0, [r1, #0]
 800eaa0:	6849      	ldr	r1, [r1, #4]
 800eaa2:	ac02      	add	r4, sp, #8
 800eaa4:	c403      	stmia	r4!, {r0, r1}
 800eaa6:	4c0c      	ldr	r4, [pc, #48]	; (800ead8 <_ZN8touchgfx7LCD1bpp8fillRectERKNS_4RectENS_9colortypeEh+0x58>)
 800eaa8:	a802      	add	r0, sp, #8
 800eaaa:	f7fc fcc5 	bl	800b438 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800eaae:	6820      	ldr	r0, [r4, #0]
 800eab0:	6803      	ldr	r3, [r0, #0]
 800eab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eab4:	4798      	blx	r3
 800eab6:	4b09      	ldr	r3, [pc, #36]	; (800eadc <_ZN8touchgfx7LCD1bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>)
 800eab8:	881a      	ldrh	r2, [r3, #0]
 800eaba:	682b      	ldr	r3, [r5, #0]
 800eabc:	e9cd 7600 	strd	r7, r6, [sp]
 800eac0:	4601      	mov	r1, r0
 800eac2:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 800eac4:	4628      	mov	r0, r5
 800eac6:	ab02      	add	r3, sp, #8
 800eac8:	47b0      	blx	r6
 800eaca:	6820      	ldr	r0, [r4, #0]
 800eacc:	6803      	ldr	r3, [r0, #0]
 800eace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ead0:	4798      	blx	r3
 800ead2:	b005      	add	sp, #20
 800ead4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ead6:	bf00      	nop
 800ead8:	200012d4 	.word	0x200012d4
 800eadc:	200012ce 	.word	0x200012ce

0800eae0 <_ZN8touchgfx7LCD1bpp9bwRLEdata15getNextHalfByteEv>:
 800eae0:	79c3      	ldrb	r3, [r0, #7]
 800eae2:	b123      	cbz	r3, 800eaee <_ZN8touchgfx7LCD1bpp9bwRLEdata15getNextHalfByteEv+0xe>
 800eae4:	6802      	ldr	r2, [r0, #0]
 800eae6:	1c51      	adds	r1, r2, #1
 800eae8:	6001      	str	r1, [r0, #0]
 800eaea:	7812      	ldrb	r2, [r2, #0]
 800eaec:	7182      	strb	r2, [r0, #6]
 800eaee:	7982      	ldrb	r2, [r0, #6]
 800eaf0:	f083 0301 	eor.w	r3, r3, #1
 800eaf4:	1111      	asrs	r1, r2, #4
 800eaf6:	7181      	strb	r1, [r0, #6]
 800eaf8:	71c3      	strb	r3, [r0, #7]
 800eafa:	f002 000f 	and.w	r0, r2, #15
 800eafe:	4770      	bx	lr

0800eb00 <_ZN8touchgfx7LCD1bpp9bwRLEdata13getNextLengthEv>:
 800eb00:	b510      	push	{r4, lr}
 800eb02:	4604      	mov	r4, r0
 800eb04:	7923      	ldrb	r3, [r4, #4]
 800eb06:	60e3      	str	r3, [r4, #12]
 800eb08:	7963      	ldrb	r3, [r4, #5]
 800eb0a:	7123      	strb	r3, [r4, #4]
 800eb0c:	4620      	mov	r0, r4
 800eb0e:	f7ff ffe7 	bl	800eae0 <_ZN8touchgfx7LCD1bpp9bwRLEdata15getNextHalfByteEv>
 800eb12:	7a23      	ldrb	r3, [r4, #8]
 800eb14:	7160      	strb	r0, [r4, #5]
 800eb16:	43db      	mvns	r3, r3
 800eb18:	7223      	strb	r3, [r4, #8]
 800eb1a:	7923      	ldrb	r3, [r4, #4]
 800eb1c:	68e2      	ldr	r2, [r4, #12]
 800eb1e:	b963      	cbnz	r3, 800eb3a <_ZN8touchgfx7LCD1bpp9bwRLEdata13getNextLengthEv+0x3a>
 800eb20:	7963      	ldrb	r3, [r4, #5]
 800eb22:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800eb26:	60e3      	str	r3, [r4, #12]
 800eb28:	4620      	mov	r0, r4
 800eb2a:	f7ff ffd9 	bl	800eae0 <_ZN8touchgfx7LCD1bpp9bwRLEdata15getNextHalfByteEv>
 800eb2e:	7120      	strb	r0, [r4, #4]
 800eb30:	4620      	mov	r0, r4
 800eb32:	f7ff ffd5 	bl	800eae0 <_ZN8touchgfx7LCD1bpp9bwRLEdata15getNextHalfByteEv>
 800eb36:	7160      	strb	r0, [r4, #5]
 800eb38:	e7ef      	b.n	800eb1a <_ZN8touchgfx7LCD1bpp9bwRLEdata13getNextLengthEv+0x1a>
 800eb3a:	2a00      	cmp	r2, #0
 800eb3c:	d0e2      	beq.n	800eb04 <_ZN8touchgfx7LCD1bpp9bwRLEdata13getNextLengthEv+0x4>
 800eb3e:	bd10      	pop	{r4, pc}

0800eb40 <_ZN8touchgfx7LCD1bpp9bwRLEdata8skipNextEl>:
 800eb40:	b538      	push	{r3, r4, r5, lr}
 800eb42:	4605      	mov	r5, r0
 800eb44:	460c      	mov	r4, r1
 800eb46:	68eb      	ldr	r3, [r5, #12]
 800eb48:	42a3      	cmp	r3, r4
 800eb4a:	dd02      	ble.n	800eb52 <_ZN8touchgfx7LCD1bpp9bwRLEdata8skipNextEl+0x12>
 800eb4c:	1b1b      	subs	r3, r3, r4
 800eb4e:	60eb      	str	r3, [r5, #12]
 800eb50:	bd38      	pop	{r3, r4, r5, pc}
 800eb52:	4628      	mov	r0, r5
 800eb54:	1ae4      	subs	r4, r4, r3
 800eb56:	f7ff ffd3 	bl	800eb00 <_ZN8touchgfx7LCD1bpp9bwRLEdata13getNextLengthEv>
 800eb5a:	e7f4      	b.n	800eb46 <_ZN8touchgfx7LCD1bpp9bwRLEdata8skipNextEl+0x6>

0800eb5c <_ZN8touchgfx8fillBitsEPhssslh>:
 800eb5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb5e:	2608      	movs	r6, #8
 800eb60:	fb91 f6f6 	sdiv	r6, r1, r6
 800eb64:	f011 0107 	ands.w	r1, r1, #7
 800eb68:	fb02 6303 	mla	r3, r2, r3, r6
 800eb6c:	9c05      	ldr	r4, [sp, #20]
 800eb6e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 800eb72:	eb00 0603 	add.w	r6, r0, r3
 800eb76:	d01b      	beq.n	800ebb0 <_ZN8touchgfx8fillBitsEPhssslh+0x54>
 800eb78:	f1c1 0108 	rsb	r1, r1, #8
 800eb7c:	b2c9      	uxtb	r1, r1
 800eb7e:	42a1      	cmp	r1, r4
 800eb80:	f04f 0701 	mov.w	r7, #1
 800eb84:	fa07 f201 	lsl.w	r2, r7, r1
 800eb88:	bfc2      	ittt	gt
 800eb8a:	1b09      	subgt	r1, r1, r4
 800eb8c:	f001 0107 	andgt.w	r1, r1, #7
 800eb90:	fa07 f101 	lslgt.w	r1, r7, r1
 800eb94:	f102 32ff 	add.w	r2, r2, #4294967295
 800eb98:	bfc8      	it	gt
 800eb9a:	4249      	neggt	r1, r1
 800eb9c:	b2d2      	uxtb	r2, r2
 800eb9e:	bfca      	itet	gt
 800eba0:	400a      	andgt	r2, r1
 800eba2:	1a64      	suble	r4, r4, r1
 800eba4:	2400      	movgt	r4, #0
 800eba6:	5cc1      	ldrb	r1, [r0, r3]
 800eba8:	b145      	cbz	r5, 800ebbc <_ZN8touchgfx8fillBitsEPhssslh+0x60>
 800ebaa:	430a      	orrs	r2, r1
 800ebac:	54c2      	strb	r2, [r0, r3]
 800ebae:	3601      	adds	r6, #1
 800ebb0:	2c07      	cmp	r4, #7
 800ebb2:	dd06      	ble.n	800ebc2 <_ZN8touchgfx8fillBitsEPhssslh+0x66>
 800ebb4:	f806 5b01 	strb.w	r5, [r6], #1
 800ebb8:	3c08      	subs	r4, #8
 800ebba:	e7f9      	b.n	800ebb0 <_ZN8touchgfx8fillBitsEPhssslh+0x54>
 800ebbc:	ea21 0202 	bic.w	r2, r1, r2
 800ebc0:	e7f4      	b.n	800ebac <_ZN8touchgfx8fillBitsEPhssslh+0x50>
 800ebc2:	2c00      	cmp	r4, #0
 800ebc4:	dd0a      	ble.n	800ebdc <_ZN8touchgfx8fillBitsEPhssslh+0x80>
 800ebc6:	2101      	movs	r1, #1
 800ebc8:	40a1      	lsls	r1, r4
 800ebca:	1e4b      	subs	r3, r1, #1
 800ebcc:	f1c4 0108 	rsb	r1, r4, #8
 800ebd0:	fa03 f101 	lsl.w	r1, r3, r1
 800ebd4:	7834      	ldrb	r4, [r6, #0]
 800ebd6:	b115      	cbz	r5, 800ebde <_ZN8touchgfx8fillBitsEPhssslh+0x82>
 800ebd8:	4321      	orrs	r1, r4
 800ebda:	7031      	strb	r1, [r6, #0]
 800ebdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ebde:	ea24 0101 	bic.w	r1, r4, r1
 800ebe2:	e7fa      	b.n	800ebda <_ZN8touchgfx8fillBitsEPhssslh+0x7e>

0800ebe4 <_ZN8touchgfx7LCD1bpp11blitCopyRLEEPKtRKNS_4RectES5_h>:
 800ebe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebe8:	b08f      	sub	sp, #60	; 0x3c
 800ebea:	4617      	mov	r7, r2
 800ebec:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
 800ebf0:	4606      	mov	r6, r0
 800ebf2:	460d      	mov	r5, r1
 800ebf4:	2a00      	cmp	r2, #0
 800ebf6:	f000 8089 	beq.w	800ed0c <_ZN8touchgfx7LCD1bpp11blitCopyRLEEPKtRKNS_4RectES5_h+0x128>
 800ebfa:	6838      	ldr	r0, [r7, #0]
 800ebfc:	6879      	ldr	r1, [r7, #4]
 800ebfe:	ac06      	add	r4, sp, #24
 800ec00:	c403      	stmia	r4!, {r0, r1}
 800ec02:	6818      	ldr	r0, [r3, #0]
 800ec04:	6859      	ldr	r1, [r3, #4]
 800ec06:	ac08      	add	r4, sp, #32
 800ec08:	c403      	stmia	r4!, {r0, r1}
 800ec0a:	a806      	add	r0, sp, #24
 800ec0c:	f7fc fc14 	bl	800b438 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800ec10:	4639      	mov	r1, r7
 800ec12:	a808      	add	r0, sp, #32
 800ec14:	f7fc fc38 	bl	800b488 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800ec18:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800ec1c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800ec20:	4c3c      	ldr	r4, [pc, #240]	; (800ed14 <_ZN8touchgfx7LCD1bpp11blitCopyRLEEPKtRKNS_4RectES5_h+0x130>)
 800ec22:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 800ec26:	6820      	ldr	r0, [r4, #0]
 800ec28:	4413      	add	r3, r2
 800ec2a:	b21b      	sxth	r3, r3
 800ec2c:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 800ec30:	9302      	str	r3, [sp, #8]
 800ec32:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 800ec36:	4413      	add	r3, r2
 800ec38:	b29b      	uxth	r3, r3
 800ec3a:	9303      	str	r3, [sp, #12]
 800ec3c:	6803      	ldr	r3, [r0, #0]
 800ec3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec40:	4798      	blx	r3
 800ec42:	6833      	ldr	r3, [r6, #0]
 800ec44:	4682      	mov	sl, r0
 800ec46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec48:	4630      	mov	r0, r6
 800ec4a:	4798      	blx	r3
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 800ec52:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 800ec56:	2201      	movs	r2, #1
 800ec58:	930d      	str	r3, [sp, #52]	; 0x34
 800ec5a:	23ff      	movs	r3, #255	; 0xff
 800ec5c:	9404      	str	r4, [sp, #16]
 800ec5e:	fa0f fb80 	sxth.w	fp, r0
 800ec62:	950a      	str	r5, [sp, #40]	; 0x28
 800ec64:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
 800ec68:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 800ec6c:	ac0a      	add	r4, sp, #40	; 0x28
 800ec6e:	b165      	cbz	r5, 800ec8a <_ZN8touchgfx7LCD1bpp11blitCopyRLEEPKtRKNS_4RectES5_h+0xa6>
 800ec70:	4620      	mov	r0, r4
 800ec72:	f7ff ff35 	bl	800eae0 <_ZN8touchgfx7LCD1bpp9bwRLEdata15getNextHalfByteEv>
 800ec76:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
 800ec7a:	4620      	mov	r0, r4
 800ec7c:	f7ff ff30 	bl	800eae0 <_ZN8touchgfx7LCD1bpp9bwRLEdata15getNextHalfByteEv>
 800ec80:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
 800ec84:	4620      	mov	r0, r4
 800ec86:	f7ff ff3b 	bl	800eb00 <_ZN8touchgfx7LCD1bpp9bwRLEdata13getNextLengthEv>
 800ec8a:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 800ec8e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800ec92:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800ec96:	4620      	mov	r0, r4
 800ec98:	fb11 3102 	smlabb	r1, r1, r2, r3
 800ec9c:	f7ff ff50 	bl	800eb40 <_ZN8touchgfx7LCD1bpp9bwRLEdata8skipNextEl>
 800eca0:	2700      	movs	r7, #0
 800eca2:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 800eca6:	42bb      	cmp	r3, r7
 800eca8:	dd2b      	ble.n	800ed02 <_ZN8touchgfx7LCD1bpp11blitCopyRLEEPKtRKNS_4RectES5_h+0x11e>
 800ecaa:	e9dd 6302 	ldrd	r6, r3, [sp, #8]
 800ecae:	443b      	add	r3, r7
 800ecb0:	b21b      	sxth	r3, r3
 800ecb2:	46c8      	mov	r8, r9
 800ecb4:	9305      	str	r3, [sp, #20]
 800ecb6:	f1b8 0f00 	cmp.w	r8, #0
 800ecba:	d019      	beq.n	800ecf0 <_ZN8touchgfx7LCD1bpp11blitCopyRLEEPKtRKNS_4RectES5_h+0x10c>
 800ecbc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800ecbe:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800ecc2:	9a05      	ldr	r2, [sp, #20]
 800ecc4:	4545      	cmp	r5, r8
 800ecc6:	bfa8      	it	ge
 800ecc8:	4645      	movge	r5, r8
 800ecca:	e9cd 5300 	strd	r5, r3, [sp]
 800ecce:	4631      	mov	r1, r6
 800ecd0:	465b      	mov	r3, fp
 800ecd2:	4650      	mov	r0, sl
 800ecd4:	f7ff ff42 	bl	800eb5c <_ZN8touchgfx8fillBitsEPhssslh>
 800ecd8:	b2ab      	uxth	r3, r5
 800ecda:	441e      	add	r6, r3
 800ecdc:	eba8 0803 	sub.w	r8, r8, r3
 800ece0:	4629      	mov	r1, r5
 800ece2:	4620      	mov	r0, r4
 800ece4:	b236      	sxth	r6, r6
 800ece6:	fa0f f888 	sxth.w	r8, r8
 800ecea:	f7ff ff29 	bl	800eb40 <_ZN8touchgfx7LCD1bpp9bwRLEdata8skipNextEl>
 800ecee:	e7e2      	b.n	800ecb6 <_ZN8touchgfx7LCD1bpp11blitCopyRLEEPKtRKNS_4RectES5_h+0xd2>
 800ecf0:	f9bd 101c 	ldrsh.w	r1, [sp, #28]
 800ecf4:	4620      	mov	r0, r4
 800ecf6:	eba1 0109 	sub.w	r1, r1, r9
 800ecfa:	f7ff ff21 	bl	800eb40 <_ZN8touchgfx7LCD1bpp9bwRLEdata8skipNextEl>
 800ecfe:	3701      	adds	r7, #1
 800ed00:	e7cf      	b.n	800eca2 <_ZN8touchgfx7LCD1bpp11blitCopyRLEEPKtRKNS_4RectES5_h+0xbe>
 800ed02:	9b04      	ldr	r3, [sp, #16]
 800ed04:	6818      	ldr	r0, [r3, #0]
 800ed06:	6803      	ldr	r3, [r0, #0]
 800ed08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed0a:	4798      	blx	r3
 800ed0c:	b00f      	add	sp, #60	; 0x3c
 800ed0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed12:	bf00      	nop
 800ed14:	200012d4 	.word	0x200012d4

0800ed18 <_ZNK8touchgfx7LCD1bpp8copyRectEPKhshPhshss>:
 800ed18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed1c:	b089      	sub	sp, #36	; 0x24
 800ed1e:	461d      	mov	r5, r3
 800ed20:	9202      	str	r2, [sp, #8]
 800ed22:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 800ed26:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 800ed2a:	9303      	str	r3, [sp, #12]
 800ed2c:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
 800ed30:	f9bd 4054 	ldrsh.w	r4, [sp, #84]	; 0x54
 800ed34:	9301      	str	r3, [sp, #4]
 800ed36:	468a      	mov	sl, r1
 800ed38:	2a00      	cmp	r2, #0
 800ed3a:	d054      	beq.n	800ede6 <_ZNK8touchgfx7LCD1bpp8copyRectEPKhshPhshss+0xce>
 800ed3c:	f1c2 0208 	rsb	r2, r2, #8
 800ed40:	b2d2      	uxtb	r2, r2
 800ed42:	42a2      	cmp	r2, r4
 800ed44:	bfcc      	ite	gt
 800ed46:	b2e1      	uxtbgt	r1, r4
 800ed48:	4611      	movle	r1, r2
 800ed4a:	1a52      	subs	r2, r2, r1
 800ed4c:	b2d3      	uxtb	r3, r2
 800ed4e:	9304      	str	r3, [sp, #16]
 800ed50:	2301      	movs	r3, #1
 800ed52:	408b      	lsls	r3, r1
 800ed54:	3b01      	subs	r3, #1
 800ed56:	9a04      	ldr	r2, [sp, #16]
 800ed58:	f1c5 0008 	rsb	r0, r5, #8
 800ed5c:	b2db      	uxtb	r3, r3
 800ed5e:	b2c0      	uxtb	r0, r0
 800ed60:	4093      	lsls	r3, r2
 800ed62:	b2de      	uxtb	r6, r3
 800ed64:	eba1 0800 	sub.w	r8, r1, r0
 800ed68:	9605      	str	r6, [sp, #20]
 800ed6a:	f10a 0901 	add.w	r9, sl, #1
 800ed6e:	f1c8 0708 	rsb	r7, r8, #8
 800ed72:	43db      	mvns	r3, r3
 800ed74:	9e01      	ldr	r6, [sp, #4]
 800ed76:	9706      	str	r7, [sp, #24]
 800ed78:	46cc      	mov	ip, r9
 800ed7a:	f04f 0e00 	mov.w	lr, #0
 800ed7e:	eba0 0b01 	sub.w	fp, r0, r1
 800ed82:	9307      	str	r3, [sp, #28]
 800ed84:	2e00      	cmp	r6, #0
 800ed86:	dd23      	ble.n	800edd0 <_ZNK8touchgfx7LCD1bpp8copyRectEPKhshPhshss+0xb8>
 800ed88:	4281      	cmp	r1, r0
 800ed8a:	f81c 3c01 	ldrb.w	r3, [ip, #-1]
 800ed8e:	d216      	bcs.n	800edbe <_ZNK8touchgfx7LCD1bpp8copyRectEPKhshPhshss+0xa6>
 800ed90:	fa43 f30b 	asr.w	r3, r3, fp
 800ed94:	b2db      	uxtb	r3, r3
 800ed96:	9a04      	ldr	r2, [sp, #16]
 800ed98:	4093      	lsls	r3, r2
 800ed9a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ed9c:	f812 700e 	ldrb.w	r7, [r2, lr]
 800eda0:	9a07      	ldr	r2, [sp, #28]
 800eda2:	4017      	ands	r7, r2
 800eda4:	9a05      	ldr	r2, [sp, #20]
 800eda6:	4013      	ands	r3, r2
 800eda8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800edaa:	433b      	orrs	r3, r7
 800edac:	f802 300e 	strb.w	r3, [r2, lr]
 800edb0:	9b03      	ldr	r3, [sp, #12]
 800edb2:	449e      	add	lr, r3
 800edb4:	9b02      	ldr	r3, [sp, #8]
 800edb6:	3e01      	subs	r6, #1
 800edb8:	b236      	sxth	r6, r6
 800edba:	449c      	add	ip, r3
 800edbc:	e7e2      	b.n	800ed84 <_ZNK8touchgfx7LCD1bpp8copyRectEPKhshPhshss+0x6c>
 800edbe:	d9ea      	bls.n	800ed96 <_ZNK8touchgfx7LCD1bpp8copyRectEPKhshPhshss+0x7e>
 800edc0:	f89c 7000 	ldrb.w	r7, [ip]
 800edc4:	9a06      	ldr	r2, [sp, #24]
 800edc6:	fa03 f308 	lsl.w	r3, r3, r8
 800edca:	4117      	asrs	r7, r2
 800edcc:	433b      	orrs	r3, r7
 800edce:	e7e1      	b.n	800ed94 <_ZNK8touchgfx7LCD1bpp8copyRectEPKhshPhshss+0x7c>
 800edd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800edd2:	440d      	add	r5, r1
 800edd4:	3301      	adds	r3, #1
 800edd6:	1a64      	subs	r4, r4, r1
 800edd8:	f005 0507 	and.w	r5, r5, #7
 800eddc:	9312      	str	r3, [sp, #72]	; 0x48
 800edde:	b224      	sxth	r4, r4
 800ede0:	4281      	cmp	r1, r0
 800ede2:	bf28      	it	cs
 800ede4:	46ca      	movcs	sl, r9
 800ede6:	2c07      	cmp	r4, #7
 800ede8:	dd56      	ble.n	800ee98 <_ZNK8touchgfx7LCD1bpp8copyRectEPKhshPhshss+0x180>
 800edea:	10e6      	asrs	r6, r4, #3
 800edec:	b395      	cbz	r5, 800ee54 <_ZNK8touchgfx7LCD1bpp8copyRectEPKhshPhshss+0x13c>
 800edee:	fa1f fb84 	uxth.w	fp, r4
 800edf2:	9902      	ldr	r1, [sp, #8]
 800edf4:	9a01      	ldr	r2, [sp, #4]
 800edf6:	9812      	ldr	r0, [sp, #72]	; 0x48
 800edf8:	f1ab 0308 	sub.w	r3, fp, #8
 800edfc:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 800ee00:	1b89      	subs	r1, r1, r6
 800ee02:	f103 0c01 	add.w	ip, r3, #1
 800ee06:	9104      	str	r1, [sp, #16]
 800ee08:	ebc3 3343 	rsb	r3, r3, r3, lsl #13
 800ee0c:	9903      	ldr	r1, [sp, #12]
 800ee0e:	eb0b 0bc3 	add.w	fp, fp, r3, lsl #3
 800ee12:	f1ab 0b08 	sub.w	fp, fp, #8
 800ee16:	1b8f      	subs	r7, r1, r6
 800ee18:	fa0f fb8b 	sxth.w	fp, fp
 800ee1c:	4653      	mov	r3, sl
 800ee1e:	f1c5 0908 	rsb	r9, r5, #8
 800ee22:	4467      	add	r7, ip
 800ee24:	2a00      	cmp	r2, #0
 800ee26:	dd31      	ble.n	800ee8c <_ZNK8touchgfx7LCD1bpp8copyRectEPKhshPhshss+0x174>
 800ee28:	eb03 080c 	add.w	r8, r3, ip
 800ee2c:	4686      	mov	lr, r0
 800ee2e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800ee32:	f813 4c01 	ldrb.w	r4, [r3, #-1]
 800ee36:	fa41 f109 	asr.w	r1, r1, r9
 800ee3a:	40ac      	lsls	r4, r5
 800ee3c:	4321      	orrs	r1, r4
 800ee3e:	4543      	cmp	r3, r8
 800ee40:	f80e 1b01 	strb.w	r1, [lr], #1
 800ee44:	d1f3      	bne.n	800ee2e <_ZNK8touchgfx7LCD1bpp8copyRectEPKhshPhshss+0x116>
 800ee46:	9904      	ldr	r1, [sp, #16]
 800ee48:	3a01      	subs	r2, #1
 800ee4a:	440b      	add	r3, r1
 800ee4c:	4438      	add	r0, r7
 800ee4e:	b212      	sxth	r2, r2
 800ee50:	465c      	mov	r4, fp
 800ee52:	e7e7      	b.n	800ee24 <_ZNK8touchgfx7LCD1bpp8copyRectEPKhshPhshss+0x10c>
 800ee54:	9b01      	ldr	r3, [sp, #4]
 800ee56:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 800ee5a:	f8df b09c 	ldr.w	fp, [pc, #156]	; 800eef8 <_ZNK8touchgfx7LCD1bpp8copyRectEPKhshPhshss+0x1e0>
 800ee5e:	9304      	str	r3, [sp, #16]
 800ee60:	46d1      	mov	r9, sl
 800ee62:	9b04      	ldr	r3, [sp, #16]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	dd11      	ble.n	800ee8c <_ZNK8touchgfx7LCD1bpp8copyRectEPKhshPhshss+0x174>
 800ee68:	f8db 0000 	ldr.w	r0, [fp]
 800ee6c:	6803      	ldr	r3, [r0, #0]
 800ee6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee70:	464a      	mov	r2, r9
 800ee72:	461f      	mov	r7, r3
 800ee74:	4641      	mov	r1, r8
 800ee76:	4633      	mov	r3, r6
 800ee78:	47b8      	blx	r7
 800ee7a:	9b02      	ldr	r3, [sp, #8]
 800ee7c:	4499      	add	r9, r3
 800ee7e:	9b03      	ldr	r3, [sp, #12]
 800ee80:	4498      	add	r8, r3
 800ee82:	9b04      	ldr	r3, [sp, #16]
 800ee84:	1e5f      	subs	r7, r3, #1
 800ee86:	b23b      	sxth	r3, r7
 800ee88:	9304      	str	r3, [sp, #16]
 800ee8a:	e7ea      	b.n	800ee62 <_ZNK8touchgfx7LCD1bpp8copyRectEPKhshPhshss+0x14a>
 800ee8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ee8e:	4433      	add	r3, r6
 800ee90:	44b2      	add	sl, r6
 800ee92:	9312      	str	r3, [sp, #72]	; 0x48
 800ee94:	f004 0407 	and.w	r4, r4, #7
 800ee98:	2c00      	cmp	r4, #0
 800ee9a:	dd29      	ble.n	800eef0 <_ZNK8touchgfx7LCD1bpp8copyRectEPKhshPhshss+0x1d8>
 800ee9c:	2301      	movs	r3, #1
 800ee9e:	40a3      	lsls	r3, r4
 800eea0:	3b01      	subs	r3, #1
 800eea2:	f1c4 0408 	rsb	r4, r4, #8
 800eea6:	fa03 f404 	lsl.w	r4, r3, r4
 800eeaa:	b2e1      	uxtb	r1, r4
 800eeac:	43e4      	mvns	r4, r4
 800eeae:	b264      	sxtb	r4, r4
 800eeb0:	f10a 0001 	add.w	r0, sl, #1
 800eeb4:	2600      	movs	r6, #0
 800eeb6:	f1c5 0708 	rsb	r7, r5, #8
 800eeba:	9b01      	ldr	r3, [sp, #4]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	dd17      	ble.n	800eef0 <_ZNK8touchgfx7LCD1bpp8copyRectEPKhshPhshss+0x1d8>
 800eec0:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800eec4:	b125      	cbz	r5, 800eed0 <_ZNK8touchgfx7LCD1bpp8copyRectEPKhshPhshss+0x1b8>
 800eec6:	7802      	ldrb	r2, [r0, #0]
 800eec8:	40ab      	lsls	r3, r5
 800eeca:	413a      	asrs	r2, r7
 800eecc:	4313      	orrs	r3, r2
 800eece:	b2db      	uxtb	r3, r3
 800eed0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800eed2:	5d92      	ldrb	r2, [r2, r6]
 800eed4:	400b      	ands	r3, r1
 800eed6:	4022      	ands	r2, r4
 800eed8:	4313      	orrs	r3, r2
 800eeda:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800eedc:	5593      	strb	r3, [r2, r6]
 800eede:	9b01      	ldr	r3, [sp, #4]
 800eee0:	3b01      	subs	r3, #1
 800eee2:	b21b      	sxth	r3, r3
 800eee4:	9301      	str	r3, [sp, #4]
 800eee6:	9b03      	ldr	r3, [sp, #12]
 800eee8:	441e      	add	r6, r3
 800eeea:	9b02      	ldr	r3, [sp, #8]
 800eeec:	4418      	add	r0, r3
 800eeee:	e7e4      	b.n	800eeba <_ZNK8touchgfx7LCD1bpp8copyRectEPKhshPhshss+0x1a2>
 800eef0:	b009      	add	sp, #36	; 0x24
 800eef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eef6:	bf00      	nop
 800eef8:	200012d4 	.word	0x200012d4

0800eefc <_ZN8touchgfx7LCD1bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 800eefc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef00:	b08f      	sub	sp, #60	; 0x3c
 800ef02:	4615      	mov	r5, r2
 800ef04:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
 800ef08:	4607      	mov	r7, r0
 800ef0a:	468b      	mov	fp, r1
 800ef0c:	2a00      	cmp	r2, #0
 800ef0e:	d061      	beq.n	800efd4 <_ZN8touchgfx7LCD1bpp8blitCopyEPKtRKNS_4RectES5_hb+0xd8>
 800ef10:	6828      	ldr	r0, [r5, #0]
 800ef12:	6869      	ldr	r1, [r5, #4]
 800ef14:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800efdc <_ZN8touchgfx7LCD1bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe0>
 800ef18:	ac0a      	add	r4, sp, #40	; 0x28
 800ef1a:	c403      	stmia	r4!, {r0, r1}
 800ef1c:	6818      	ldr	r0, [r3, #0]
 800ef1e:	6859      	ldr	r1, [r3, #4]
 800ef20:	ac0c      	add	r4, sp, #48	; 0x30
 800ef22:	c403      	stmia	r4!, {r0, r1}
 800ef24:	a80a      	add	r0, sp, #40	; 0x28
 800ef26:	f7fc fa87 	bl	800b438 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800ef2a:	4629      	mov	r1, r5
 800ef2c:	a80c      	add	r0, sp, #48	; 0x30
 800ef2e:	f7fc faab 	bl	800b488 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800ef32:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 800ef36:	f8bd 002a 	ldrh.w	r0, [sp, #42]	; 0x2a
 800ef3a:	9109      	str	r1, [sp, #36]	; 0x24
 800ef3c:	4408      	add	r0, r1
 800ef3e:	b203      	sxth	r3, r0
 800ef40:	f8da 0000 	ldr.w	r0, [sl]
 800ef44:	9307      	str	r3, [sp, #28]
 800ef46:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 800ef4a:	9308      	str	r3, [sp, #32]
 800ef4c:	6803      	ldr	r3, [r0, #0]
 800ef4e:	f9bd 5030 	ldrsh.w	r5, [sp, #48]	; 0x30
 800ef52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef54:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
 800ef58:	4798      	blx	r3
 800ef5a:	683b      	ldr	r3, [r7, #0]
 800ef5c:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 800ef60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef62:	4680      	mov	r8, r0
 800ef64:	4638      	mov	r0, r7
 800ef66:	4798      	blx	r3
 800ef68:	442c      	add	r4, r5
 800ef6a:	426a      	negs	r2, r5
 800ef6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ef6e:	b224      	sxth	r4, r4
 800ef70:	f002 0207 	and.w	r2, r2, #7
 800ef74:	f04f 0908 	mov.w	r9, #8
 800ef78:	f005 0307 	and.w	r3, r5, #7
 800ef7c:	f106 0607 	add.w	r6, r6, #7
 800ef80:	bf58      	it	pl
 800ef82:	4253      	negpl	r3, r2
 800ef84:	fb96 f6f9 	sdiv	r6, r6, r9
 800ef88:	f9bd 2036 	ldrsh.w	r2, [sp, #54]	; 0x36
 800ef8c:	fb95 f5f9 	sdiv	r5, r5, r9
 800ef90:	fb06 5101 	mla	r1, r6, r1, r5
 800ef94:	4265      	negs	r5, r4
 800ef96:	9204      	str	r2, [sp, #16]
 800ef98:	f005 0507 	and.w	r5, r5, #7
 800ef9c:	9a08      	ldr	r2, [sp, #32]
 800ef9e:	9203      	str	r2, [sp, #12]
 800efa0:	f004 0207 	and.w	r2, r4, #7
 800efa4:	bf58      	it	pl
 800efa6:	426a      	negpl	r2, r5
 800efa8:	b200      	sxth	r0, r0
 800efaa:	b2d2      	uxtb	r2, r2
 800efac:	e9cd 0201 	strd	r0, r2, [sp, #4]
 800efb0:	fb94 f4f9 	sdiv	r4, r4, r9
 800efb4:	9a07      	ldr	r2, [sp, #28]
 800efb6:	fb02 4400 	mla	r4, r2, r0, r4
 800efba:	4444      	add	r4, r8
 800efbc:	b2db      	uxtb	r3, r3
 800efbe:	4638      	mov	r0, r7
 800efc0:	9400      	str	r4, [sp, #0]
 800efc2:	b232      	sxth	r2, r6
 800efc4:	4459      	add	r1, fp
 800efc6:	f7ff fea7 	bl	800ed18 <_ZNK8touchgfx7LCD1bpp8copyRectEPKhshPhshss>
 800efca:	f8da 0000 	ldr.w	r0, [sl]
 800efce:	6803      	ldr	r3, [r0, #0]
 800efd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efd2:	4798      	blx	r3
 800efd4:	b00f      	add	sp, #60	; 0x3c
 800efd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efda:	bf00      	nop
 800efdc:	200012d4 	.word	0x200012d4

0800efe0 <_ZN8touchgfx7LCD1bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 800efe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efe4:	b095      	sub	sp, #84	; 0x54
 800efe6:	4699      	mov	r9, r3
 800efe8:	4615      	mov	r5, r2
 800efea:	f9bd 807c 	ldrsh.w	r8, [sp, #124]	; 0x7c
 800efee:	f9b3 2000 	ldrsh.w	r2, [r3]
 800eff2:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 800eff6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800effa:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 800effe:	4604      	mov	r4, r0
 800f000:	468b      	mov	fp, r1
 800f002:	a80e      	add	r0, sp, #56	; 0x38
 800f004:	4649      	mov	r1, r9
 800f006:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 800f00a:	f8ad 803c 	strh.w	r8, [sp, #60]	; 0x3c
 800f00e:	f8ad 603e 	strh.w	r6, [sp, #62]	; 0x3e
 800f012:	f7f9 fabf 	bl	8008594 <_ZN8touchgfx4RectaNERKS0_>
 800f016:	4629      	mov	r1, r5
 800f018:	a80e      	add	r0, sp, #56	; 0x38
 800f01a:	f7f9 fabb 	bl	8008594 <_ZN8touchgfx4RectaNERKS0_>
 800f01e:	4b65      	ldr	r3, [pc, #404]	; (800f1b4 <_ZN8touchgfx7LCD1bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1d4>)
 800f020:	881d      	ldrh	r5, [r3, #0]
 800f022:	4b65      	ldr	r3, [pc, #404]	; (800f1b8 <_ZN8touchgfx7LCD1bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1d8>)
 800f024:	8819      	ldrh	r1, [r3, #0]
 800f026:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	b22a      	sxth	r2, r5
 800f02e:	b208      	sxth	r0, r1
 800f030:	da07      	bge.n	800f042 <_ZN8touchgfx7LCD1bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 800f032:	f8bd 703c 	ldrh.w	r7, [sp, #60]	; 0x3c
 800f036:	443b      	add	r3, r7
 800f038:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
 800f03c:	2300      	movs	r3, #0
 800f03e:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 800f042:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 800f046:	f9bd 703c 	ldrsh.w	r7, [sp, #60]	; 0x3c
 800f04a:	1ad2      	subs	r2, r2, r3
 800f04c:	4297      	cmp	r7, r2
 800f04e:	bfc4      	itt	gt
 800f050:	1aea      	subgt	r2, r5, r3
 800f052:	f8ad 203c 	strhgt.w	r2, [sp, #60]	; 0x3c
 800f056:	f9bd 203a 	ldrsh.w	r2, [sp, #58]	; 0x3a
 800f05a:	2a00      	cmp	r2, #0
 800f05c:	da07      	bge.n	800f06e <_ZN8touchgfx7LCD1bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 800f05e:	f8bd 703e 	ldrh.w	r7, [sp, #62]	; 0x3e
 800f062:	443a      	add	r2, r7
 800f064:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 800f068:	2200      	movs	r2, #0
 800f06a:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 800f06e:	f9bd 203a 	ldrsh.w	r2, [sp, #58]	; 0x3a
 800f072:	f9bd 703e 	ldrsh.w	r7, [sp, #62]	; 0x3e
 800f076:	1a80      	subs	r0, r0, r2
 800f078:	4287      	cmp	r7, r0
 800f07a:	bfc4      	itt	gt
 800f07c:	1a88      	subgt	r0, r1, r2
 800f07e:	f8ad 003e 	strhgt.w	r0, [sp, #62]	; 0x3e
 800f082:	484e      	ldr	r0, [pc, #312]	; (800f1bc <_ZN8touchgfx7LCD1bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1dc>)
 800f084:	f9bd 703c 	ldrsh.w	r7, [sp, #60]	; 0x3c
 800f088:	7800      	ldrb	r0, [r0, #0]
 800f08a:	2800      	cmp	r0, #0
 800f08c:	d171      	bne.n	800f172 <_ZN8touchgfx7LCD1bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x192>
 800f08e:	42af      	cmp	r7, r5
 800f090:	bf14      	ite	ne
 800f092:	2500      	movne	r5, #0
 800f094:	2501      	moveq	r5, #1
 800f096:	2f00      	cmp	r7, #0
 800f098:	dd6f      	ble.n	800f17a <_ZN8touchgfx7LCD1bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x19a>
 800f09a:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 800f09e:	f1ba 0f00 	cmp.w	sl, #0
 800f0a2:	dd6a      	ble.n	800f17a <_ZN8touchgfx7LCD1bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x19a>
 800f0a4:	f8b9 1000 	ldrh.w	r1, [r9]
 800f0a8:	f8ad 804c 	strh.w	r8, [sp, #76]	; 0x4c
 800f0ac:	1a5b      	subs	r3, r3, r1
 800f0ae:	b21b      	sxth	r3, r3
 800f0b0:	9307      	str	r3, [sp, #28]
 800f0b2:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 800f0b6:	f8ad 604e 	strh.w	r6, [sp, #78]	; 0x4e
 800f0ba:	1ad2      	subs	r2, r2, r3
 800f0bc:	b213      	sxth	r3, r2
 800f0be:	9308      	str	r3, [sp, #32]
 800f0c0:	9b07      	ldr	r3, [sp, #28]
 800f0c2:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800f0c6:	9b08      	ldr	r3, [sp, #32]
 800f0c8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 800f0cc:	a912      	add	r1, sp, #72	; 0x48
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	a810      	add	r0, sp, #64	; 0x40
 800f0d2:	9312      	str	r3, [sp, #72]	; 0x48
 800f0d4:	f8ad 7044 	strh.w	r7, [sp, #68]	; 0x44
 800f0d8:	f8ad a046 	strh.w	sl, [sp, #70]	; 0x46
 800f0dc:	f7fc f9d4 	bl	800b488 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800f0e0:	a80e      	add	r0, sp, #56	; 0x38
 800f0e2:	f7fc f9a9 	bl	800b438 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800f0e6:	a812      	add	r0, sp, #72	; 0x48
 800f0e8:	f7fc f9a6 	bl	800b438 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800f0ec:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 800f0f0:	9309      	str	r3, [sp, #36]	; 0x24
 800f0f2:	4b33      	ldr	r3, [pc, #204]	; (800f1c0 <_ZN8touchgfx7LCD1bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e0>)
 800f0f4:	881b      	ldrh	r3, [r3, #0]
 800f0f6:	930b      	str	r3, [sp, #44]	; 0x2c
 800f0f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0fa:	2608      	movs	r6, #8
 800f0fc:	3307      	adds	r3, #7
 800f0fe:	fb93 f3f6 	sdiv	r3, r3, r6
 800f102:	930a      	str	r3, [sp, #40]	; 0x28
 800f104:	f8db 3000 	ldr.w	r3, [fp]
 800f108:	4658      	mov	r0, fp
 800f10a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f10c:	4798      	blx	r3
 800f10e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f110:	f9bd 8042 	ldrsh.w	r8, [sp, #66]	; 0x42
 800f114:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
 800f118:	fb99 f1f6 	sdiv	r1, r9, r6
 800f11c:	fb03 1808 	mla	r8, r3, r8, r1
 800f120:	4b28      	ldr	r3, [pc, #160]	; (800f1c4 <_ZN8touchgfx7LCD1bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e4>)
 800f122:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f124:	900d      	str	r0, [sp, #52]	; 0x34
 800f126:	6818      	ldr	r0, [r3, #0]
 800f128:	930c      	str	r3, [sp, #48]	; 0x30
 800f12a:	4488      	add	r8, r1
 800f12c:	6801      	ldr	r1, [r0, #0]
 800f12e:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800f130:	4788      	blx	r1
 800f132:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 800f136:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f138:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 800f13c:	fb9c f6f6 	sdiv	r6, ip, r6
 800f140:	fb02 6101 	mla	r1, r2, r1, r6
 800f144:	4401      	add	r1, r0
 800f146:	f9bd 6046 	ldrsh.w	r6, [sp, #70]	; 0x46
 800f14a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f14c:	b9f5      	cbnz	r5, 800f18c <_ZN8touchgfx7LCD1bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 800f14e:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 800f152:	9303      	str	r3, [sp, #12]
 800f154:	f009 0307 	and.w	r3, r9, #7
 800f158:	9302      	str	r3, [sp, #8]
 800f15a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 800f15e:	9604      	str	r6, [sp, #16]
 800f160:	e9cd 8300 	strd	r8, r3, [sp]
 800f164:	b212      	sxth	r2, r2
 800f166:	f00c 0307 	and.w	r3, ip, #7
 800f16a:	4658      	mov	r0, fp
 800f16c:	f7ff fdd4 	bl	800ed18 <_ZNK8touchgfx7LCD1bpp8copyRectEPKhshPhshss>
 800f170:	e018      	b.n	800f1a4 <_ZN8touchgfx7LCD1bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1c4>
 800f172:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 800f176:	428d      	cmp	r5, r1
 800f178:	e78a      	b.n	800f090 <_ZN8touchgfx7LCD1bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb0>
 800f17a:	2300      	movs	r3, #0
 800f17c:	8023      	strh	r3, [r4, #0]
 800f17e:	8063      	strh	r3, [r4, #2]
 800f180:	80a3      	strh	r3, [r4, #4]
 800f182:	80e3      	strh	r3, [r4, #6]
 800f184:	4620      	mov	r0, r4
 800f186:	b015      	add	sp, #84	; 0x54
 800f188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f18c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f18e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800f190:	42a8      	cmp	r0, r5
 800f192:	d1dc      	bne.n	800f14e <_ZN8touchgfx7LCD1bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x16e>
 800f194:	6818      	ldr	r0, [r3, #0]
 800f196:	6803      	ldr	r3, [r0, #0]
 800f198:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800f19a:	fb02 f306 	mul.w	r3, r2, r6
 800f19e:	460a      	mov	r2, r1
 800f1a0:	4641      	mov	r1, r8
 800f1a2:	47a8      	blx	r5
 800f1a4:	9b07      	ldr	r3, [sp, #28]
 800f1a6:	8023      	strh	r3, [r4, #0]
 800f1a8:	9b08      	ldr	r3, [sp, #32]
 800f1aa:	8063      	strh	r3, [r4, #2]
 800f1ac:	80a7      	strh	r7, [r4, #4]
 800f1ae:	f8a4 a006 	strh.w	sl, [r4, #6]
 800f1b2:	e7e7      	b.n	800f184 <_ZN8touchgfx7LCD1bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 800f1b4:	200012c8 	.word	0x200012c8
 800f1b8:	200012ca 	.word	0x200012ca
 800f1bc:	200012cc 	.word	0x200012cc
 800f1c0:	200012ce 	.word	0x200012ce
 800f1c4:	200012d4 	.word	0x200012d4

0800f1c8 <_ZN8touchgfx7LCD1bpp9nextPixelEbNS_12TextRotationE>:
 800f1c8:	b198      	cbz	r0, 800f1f2 <_ZN8touchgfx7LCD1bpp9nextPixelEbNS_12TextRotationE+0x2a>
 800f1ca:	2903      	cmp	r1, #3
 800f1cc:	d81e      	bhi.n	800f20c <_ZN8touchgfx7LCD1bpp9nextPixelEbNS_12TextRotationE+0x44>
 800f1ce:	e8df f001 	tbb	[pc, r1]
 800f1d2:	1f02      	.short	0x1f02
 800f1d4:	210a      	.short	0x210a
 800f1d6:	4b11      	ldr	r3, [pc, #68]	; (800f21c <_ZN8touchgfx7LCD1bpp9nextPixelEbNS_12TextRotationE+0x54>)
 800f1d8:	8818      	ldrh	r0, [r3, #0]
 800f1da:	3007      	adds	r0, #7
 800f1dc:	10c3      	asrs	r3, r0, #3
 800f1de:	f06f 0007 	mvn.w	r0, #7
 800f1e2:	4358      	muls	r0, r3
 800f1e4:	4770      	bx	lr
 800f1e6:	4b0d      	ldr	r3, [pc, #52]	; (800f21c <_ZN8touchgfx7LCD1bpp9nextPixelEbNS_12TextRotationE+0x54>)
 800f1e8:	8818      	ldrh	r0, [r3, #0]
 800f1ea:	3007      	adds	r0, #7
 800f1ec:	10c0      	asrs	r0, r0, #3
 800f1ee:	00c0      	lsls	r0, r0, #3
 800f1f0:	4770      	bx	lr
 800f1f2:	2903      	cmp	r1, #3
 800f1f4:	d80a      	bhi.n	800f20c <_ZN8touchgfx7LCD1bpp9nextPixelEbNS_12TextRotationE+0x44>
 800f1f6:	a301      	add	r3, pc, #4	; (adr r3, 800f1fc <_ZN8touchgfx7LCD1bpp9nextPixelEbNS_12TextRotationE+0x34>)
 800f1f8:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 800f1fc:	0800f211 	.word	0x0800f211
 800f200:	0800f1e7 	.word	0x0800f1e7
 800f204:	0800f215 	.word	0x0800f215
 800f208:	0800f1d7 	.word	0x0800f1d7
 800f20c:	2000      	movs	r0, #0
 800f20e:	4770      	bx	lr
 800f210:	2001      	movs	r0, #1
 800f212:	4770      	bx	lr
 800f214:	f04f 30ff 	mov.w	r0, #4294967295
 800f218:	4770      	bx	lr
 800f21a:	bf00      	nop
 800f21c:	200012ce 	.word	0x200012ce

0800f220 <_ZN8touchgfx7LCD1bpp8nextLineEbNS_12TextRotationE>:
 800f220:	b198      	cbz	r0, 800f24a <_ZN8touchgfx7LCD1bpp8nextLineEbNS_12TextRotationE+0x2a>
 800f222:	2903      	cmp	r1, #3
 800f224:	d81e      	bhi.n	800f264 <_ZN8touchgfx7LCD1bpp8nextLineEbNS_12TextRotationE+0x44>
 800f226:	e8df f001 	tbb	[pc, r1]
 800f22a:	021f      	.short	0x021f
 800f22c:	0821      	.short	0x0821
 800f22e:	4b11      	ldr	r3, [pc, #68]	; (800f274 <_ZN8touchgfx7LCD1bpp8nextLineEbNS_12TextRotationE+0x54>)
 800f230:	8818      	ldrh	r0, [r3, #0]
 800f232:	3007      	adds	r0, #7
 800f234:	10c0      	asrs	r0, r0, #3
 800f236:	00c0      	lsls	r0, r0, #3
 800f238:	4770      	bx	lr
 800f23a:	4b0e      	ldr	r3, [pc, #56]	; (800f274 <_ZN8touchgfx7LCD1bpp8nextLineEbNS_12TextRotationE+0x54>)
 800f23c:	8818      	ldrh	r0, [r3, #0]
 800f23e:	3007      	adds	r0, #7
 800f240:	10c3      	asrs	r3, r0, #3
 800f242:	f06f 0007 	mvn.w	r0, #7
 800f246:	4358      	muls	r0, r3
 800f248:	4770      	bx	lr
 800f24a:	2903      	cmp	r1, #3
 800f24c:	d80a      	bhi.n	800f264 <_ZN8touchgfx7LCD1bpp8nextLineEbNS_12TextRotationE+0x44>
 800f24e:	a301      	add	r3, pc, #4	; (adr r3, 800f254 <_ZN8touchgfx7LCD1bpp8nextLineEbNS_12TextRotationE+0x34>)
 800f250:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 800f254:	0800f22f 	.word	0x0800f22f
 800f258:	0800f26d 	.word	0x0800f26d
 800f25c:	0800f23b 	.word	0x0800f23b
 800f260:	0800f269 	.word	0x0800f269
 800f264:	2000      	movs	r0, #0
 800f266:	4770      	bx	lr
 800f268:	2001      	movs	r0, #1
 800f26a:	4770      	bx	lr
 800f26c:	f04f 30ff 	mov.w	r0, #4294967295
 800f270:	4770      	bx	lr
 800f272:	bf00      	nop
 800f274:	200012ce 	.word	0x200012ce

0800f278 <_ZN8touchgfx7LCD1bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 800f278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f27c:	b08f      	sub	sp, #60	; 0x3c
 800f27e:	4682      	mov	sl, r0
 800f280:	9101      	str	r1, [sp, #4]
 800f282:	a90a      	add	r1, sp, #40	; 0x28
 800f284:	e881 000c 	stmia.w	r1, {r2, r3}
 800f288:	e9dd 211c 	ldrd	r2, r1, [sp, #112]	; 0x70
 800f28c:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 800f290:	9302      	str	r3, [sp, #8]
 800f292:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
 800f296:	9309      	str	r3, [sp, #36]	; 0x24
 800f298:	7b4b      	ldrb	r3, [r1, #13]
 800f29a:	f891 c006 	ldrb.w	ip, [r1, #6]
 800f29e:	f9bd b060 	ldrsh.w	fp, [sp, #96]	; 0x60
 800f2a2:	f8bd 4068 	ldrh.w	r4, [sp, #104]	; 0x68
 800f2a6:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 800f2aa:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800f2ac:	f89d 608c 	ldrb.w	r6, [sp, #140]	; 0x8c
 800f2b0:	0158      	lsls	r0, r3, #5
 800f2b2:	f400 7080 	and.w	r0, r0, #256	; 0x100
 800f2b6:	ea5c 0000 	orrs.w	r0, ip, r0
 800f2ba:	9003      	str	r0, [sp, #12]
 800f2bc:	f000 810e 	beq.w	800f4dc <_ZN8touchgfx7LCD1bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x264>
 800f2c0:	011b      	lsls	r3, r3, #4
 800f2c2:	79c8      	ldrb	r0, [r1, #7]
 800f2c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f2c8:	4303      	orrs	r3, r0
 800f2ca:	9305      	str	r3, [sp, #20]
 800f2cc:	f000 8106 	beq.w	800f4dc <_ZN8touchgfx7LCD1bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x264>
 800f2d0:	f991 3009 	ldrsb.w	r3, [r1, #9]
 800f2d4:	b29b      	uxth	r3, r3
 800f2d6:	2c00      	cmp	r4, #0
 800f2d8:	f000 80de 	beq.w	800f498 <_ZN8touchgfx7LCD1bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x220>
 800f2dc:	1ae4      	subs	r4, r4, r3
 800f2de:	b2a4      	uxth	r4, r4
 800f2e0:	0421      	lsls	r1, r4, #16
 800f2e2:	d504      	bpl.n	800f2ee <_ZN8touchgfx7LCD1bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x76>
 800f2e4:	ebab 0404 	sub.w	r4, fp, r4
 800f2e8:	fa0f fb84 	sxth.w	fp, r4
 800f2ec:	2400      	movs	r4, #0
 800f2ee:	f9b2 3000 	ldrsh.w	r3, [r2]
 800f2f2:	f8bd 800c 	ldrh.w	r8, [sp, #12]
 800f2f6:	459b      	cmp	fp, r3
 800f2f8:	b299      	uxth	r1, r3
 800f2fa:	bfbe      	ittt	lt
 800f2fc:	1864      	addlt	r4, r4, r1
 800f2fe:	eba4 040b 	sublt.w	r4, r4, fp
 800f302:	469b      	movlt	fp, r3
 800f304:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 800f308:	9308      	str	r3, [sp, #32]
 800f30a:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 800f30e:	9306      	str	r3, [sp, #24]
 800f310:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 800f314:	9307      	str	r3, [sp, #28]
 800f316:	4b73      	ldr	r3, [pc, #460]	; (800f4e4 <_ZN8touchgfx7LCD1bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x26c>)
 800f318:	9104      	str	r1, [sp, #16]
 800f31a:	f893 9000 	ldrb.w	r9, [r3]
 800f31e:	f109 32ff 	add.w	r2, r9, #4294967295
 800f322:	bfb8      	it	lt
 800f324:	b2a4      	uxthlt	r4, r4
 800f326:	f1d2 0900 	rsbs	r9, r2, #0
 800f32a:	eb49 0902 	adc.w	r9, r9, r2
 800f32e:	4633      	mov	r3, r6
 800f330:	9a02      	ldr	r2, [sp, #8]
 800f332:	4659      	mov	r1, fp
 800f334:	a80a      	add	r0, sp, #40	; 0x28
 800f336:	f7fb fef9 	bl	800b12c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 800f33a:	4633      	mov	r3, r6
 800f33c:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 800f340:	9a02      	ldr	r2, [sp, #8]
 800f342:	4659      	mov	r1, fp
 800f344:	a80a      	add	r0, sp, #40	; 0x28
 800f346:	f7fb ff0e 	bl	800b166 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 800f34a:	a90e      	add	r1, sp, #56	; 0x38
 800f34c:	f821 0d02 	strh.w	r0, [r1, #-2]!
 800f350:	a80d      	add	r0, sp, #52	; 0x34
 800f352:	f7fc f82f 	bl	800b3b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 800f356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f358:	b11b      	cbz	r3, 800f362 <_ZN8touchgfx7LCD1bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xea>
 800f35a:	f108 0807 	add.w	r8, r8, #7
 800f35e:	f408 787e 	and.w	r8, r8, #1016	; 0x3f8
 800f362:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800f366:	b904      	cbnz	r4, 800f36a <_ZN8touchgfx7LCD1bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 800f368:	b14d      	cbz	r5, 800f37e <_ZN8touchgfx7LCD1bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x106>
 800f36a:	fb18 f305 	smulbb	r3, r8, r5
 800f36e:	4423      	add	r3, r4
 800f370:	b29b      	uxth	r3, r3
 800f372:	1b52      	subs	r2, r2, r5
 800f374:	eb07 07d3 	add.w	r7, r7, r3, lsr #3
 800f378:	b292      	uxth	r2, r2
 800f37a:	f003 0507 	and.w	r5, r3, #7
 800f37e:	4631      	mov	r1, r6
 800f380:	4648      	mov	r0, r9
 800f382:	f7ff ff21 	bl	800f1c8 <_ZN8touchgfx7LCD1bpp9nextPixelEbNS_12TextRotationE>
 800f386:	9005      	str	r0, [sp, #20]
 800f388:	4648      	mov	r0, r9
 800f38a:	f7ff ff49 	bl	800f220 <_ZN8touchgfx7LCD1bpp8nextLineEbNS_12TextRotationE>
 800f38e:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
 800f392:	440b      	add	r3, r1
 800f394:	b21e      	sxth	r6, r3
 800f396:	9b02      	ldr	r3, [sp, #8]
 800f398:	1af6      	subs	r6, r6, r3
 800f39a:	4296      	cmp	r6, r2
 800f39c:	bfa8      	it	ge
 800f39e:	4616      	movge	r6, r2
 800f3a0:	2e00      	cmp	r6, #0
 800f3a2:	4681      	mov	r9, r0
 800f3a4:	f340 809a 	ble.w	800f4dc <_ZN8touchgfx7LCD1bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x264>
 800f3a8:	9b04      	ldr	r3, [sp, #16]
 800f3aa:	9a08      	ldr	r2, [sp, #32]
 800f3ac:	4413      	add	r3, r2
 800f3ae:	b21b      	sxth	r3, r3
 800f3b0:	ebab 0b04 	sub.w	fp, fp, r4
 800f3b4:	eba3 0b0b 	sub.w	fp, r3, fp
 800f3b8:	9b03      	ldr	r3, [sp, #12]
 800f3ba:	459b      	cmp	fp, r3
 800f3bc:	bfd4      	ite	le
 800f3be:	ebc4 040b 	rsble	r4, r4, fp
 800f3c2:	ebc4 0403 	rsbgt	r4, r4, r3
 800f3c6:	2c00      	cmp	r4, #0
 800f3c8:	f340 8088 	ble.w	800f4dc <_ZN8touchgfx7LCD1bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x264>
 800f3cc:	eba8 0304 	sub.w	r3, r8, r4
 800f3d0:	9302      	str	r3, [sp, #8]
 800f3d2:	9b01      	ldr	r3, [sp, #4]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d163      	bne.n	800f4a0 <_ZN8touchgfx7LCD1bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x228>
 800f3d8:	4b43      	ldr	r3, [pc, #268]	; (800f4e8 <_ZN8touchgfx7LCD1bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x270>)
 800f3da:	6818      	ldr	r0, [r3, #0]
 800f3dc:	6803      	ldr	r3, [r0, #0]
 800f3de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3e0:	4798      	blx	r3
 800f3e2:	4680      	mov	r8, r0
 800f3e4:	f8da 3000 	ldr.w	r3, [sl]
 800f3e8:	f9bd b036 	ldrsh.w	fp, [sp, #54]	; 0x36
 800f3ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3ee:	4650      	mov	r0, sl
 800f3f0:	4798      	blx	r3
 800f3f2:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 800f3f6:	783a      	ldrb	r2, [r7, #0]
 800f3f8:	f8cd 9010 	str.w	r9, [sp, #16]
 800f3fc:	fb0b f000 	mul.w	r0, fp, r0
 800f400:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800f404:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800f406:	f04f 0c36 	mov.w	ip, #54	; 0x36
 800f40a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800f40e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800f412:	fb0c f303 	mul.w	r3, ip, r3
 800f416:	f04f 0cb7 	mov.w	ip, #183	; 0xb7
 800f41a:	fb0c 3301 	mla	r3, ip, r1, r3
 800f41e:	9920      	ldr	r1, [sp, #128]	; 0x80
 800f420:	fa5f fe81 	uxtb.w	lr, r1
 800f424:	2113      	movs	r1, #19
 800f426:	fb01 330e 	mla	r3, r1, lr, r3
 800f42a:	412a      	asrs	r2, r5
 800f42c:	13db      	asrs	r3, r3, #15
 800f42e:	b2d2      	uxtb	r2, r2
 800f430:	9303      	str	r3, [sp, #12]
 800f432:	f04f 0901 	mov.w	r9, #1
 800f436:	f116 36ff 	adds.w	r6, r6, #4294967295
 800f43a:	d348      	bcc.n	800f4ce <_ZN8touchgfx7LCD1bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x256>
 800f43c:	46a4      	mov	ip, r4
 800f43e:	4601      	mov	r1, r0
 800f440:	f11c 3cff 	adds.w	ip, ip, #4294967295
 800f444:	d335      	bcc.n	800f4b2 <_ZN8touchgfx7LCD1bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x23a>
 800f446:	07d3      	lsls	r3, r2, #31
 800f448:	d51b      	bpl.n	800f482 <_ZN8touchgfx7LCD1bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x20a>
 800f44a:	f1d1 0e00 	rsbs	lr, r1, #0
 800f44e:	f00e 0e07 	and.w	lr, lr, #7
 800f452:	f04f 0308 	mov.w	r3, #8
 800f456:	fb91 f3f3 	sdiv	r3, r1, r3
 800f45a:	eb08 0b03 	add.w	fp, r8, r3
 800f45e:	f818 a003 	ldrb.w	sl, [r8, r3]
 800f462:	f001 0307 	and.w	r3, r1, #7
 800f466:	bf58      	it	pl
 800f468:	f1ce 0300 	rsbpl	r3, lr, #0
 800f46c:	b2db      	uxtb	r3, r3
 800f46e:	f1c3 0e07 	rsb	lr, r3, #7
 800f472:	9b03      	ldr	r3, [sp, #12]
 800f474:	b9bb      	cbnz	r3, 800f4a6 <_ZN8touchgfx7LCD1bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22e>
 800f476:	fa09 f30e 	lsl.w	r3, r9, lr
 800f47a:	ea2a 0303 	bic.w	r3, sl, r3
 800f47e:	f88b 3000 	strb.w	r3, [fp]
 800f482:	3501      	adds	r5, #1
 800f484:	b2ad      	uxth	r5, r5
 800f486:	9b05      	ldr	r3, [sp, #20]
 800f488:	2d08      	cmp	r5, #8
 800f48a:	bf09      	itett	eq
 800f48c:	787a      	ldrbeq	r2, [r7, #1]
 800f48e:	0852      	lsrne	r2, r2, #1
 800f490:	3701      	addeq	r7, #1
 800f492:	2500      	moveq	r5, #0
 800f494:	4419      	add	r1, r3
 800f496:	e7d3      	b.n	800f440 <_ZN8touchgfx7LCD1bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1c8>
 800f498:	449b      	add	fp, r3
 800f49a:	fa0f fb8b 	sxth.w	fp, fp
 800f49e:	e726      	b.n	800f2ee <_ZN8touchgfx7LCD1bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x76>
 800f4a0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f4a4:	e79e      	b.n	800f3e4 <_ZN8touchgfx7LCD1bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x16c>
 800f4a6:	fa09 f30e 	lsl.w	r3, r9, lr
 800f4aa:	ea43 030a 	orr.w	r3, r3, sl
 800f4ae:	b2db      	uxtb	r3, r3
 800f4b0:	e7e5      	b.n	800f47e <_ZN8touchgfx7LCD1bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 800f4b2:	9b02      	ldr	r3, [sp, #8]
 800f4b4:	b143      	cbz	r3, 800f4c8 <_ZN8touchgfx7LCD1bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x250>
 800f4b6:	441d      	add	r5, r3
 800f4b8:	b2ad      	uxth	r5, r5
 800f4ba:	eb07 07d5 	add.w	r7, r7, r5, lsr #3
 800f4be:	f005 0507 	and.w	r5, r5, #7
 800f4c2:	783a      	ldrb	r2, [r7, #0]
 800f4c4:	412a      	asrs	r2, r5
 800f4c6:	b2d2      	uxtb	r2, r2
 800f4c8:	9b04      	ldr	r3, [sp, #16]
 800f4ca:	4418      	add	r0, r3
 800f4cc:	e7b3      	b.n	800f436 <_ZN8touchgfx7LCD1bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1be>
 800f4ce:	9b01      	ldr	r3, [sp, #4]
 800f4d0:	b923      	cbnz	r3, 800f4dc <_ZN8touchgfx7LCD1bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x264>
 800f4d2:	4b05      	ldr	r3, [pc, #20]	; (800f4e8 <_ZN8touchgfx7LCD1bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x270>)
 800f4d4:	6818      	ldr	r0, [r3, #0]
 800f4d6:	6803      	ldr	r3, [r0, #0]
 800f4d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4da:	4798      	blx	r3
 800f4dc:	b00f      	add	sp, #60	; 0x3c
 800f4de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4e2:	bf00      	nop
 800f4e4:	200012cc 	.word	0x200012cc
 800f4e8:	200012d4 	.word	0x200012d4

0800f4ec <_ZN8touchgfx7LCD1bpp10fillMemoryEPvNS_9colortypeEt>:
 800f4ec:	b530      	push	{r4, r5, lr}
 800f4ee:	3100      	adds	r1, #0
 800f4f0:	bf18      	it	ne
 800f4f2:	2101      	movne	r1, #1
 800f4f4:	4249      	negs	r1, r1
 800f4f6:	b30a      	cbz	r2, 800f53c <_ZN8touchgfx7LCD1bpp10fillMemoryEPvNS_9colortypeEt+0x50>
 800f4f8:	0783      	lsls	r3, r0, #30
 800f4fa:	d004      	beq.n	800f506 <_ZN8touchgfx7LCD1bpp10fillMemoryEPvNS_9colortypeEt+0x1a>
 800f4fc:	3a01      	subs	r2, #1
 800f4fe:	f800 1b01 	strb.w	r1, [r0], #1
 800f502:	b292      	uxth	r2, r2
 800f504:	e7f7      	b.n	800f4f6 <_ZN8touchgfx7LCD1bpp10fillMemoryEPvNS_9colortypeEt+0xa>
 800f506:	1884      	adds	r4, r0, r2
 800f508:	4603      	mov	r3, r0
 800f50a:	b2a4      	uxth	r4, r4
 800f50c:	1ae5      	subs	r5, r4, r3
 800f50e:	b2ad      	uxth	r5, r5
 800f510:	2d03      	cmp	r5, #3
 800f512:	d810      	bhi.n	800f536 <_ZN8touchgfx7LCD1bpp10fillMemoryEPvNS_9colortypeEt+0x4a>
 800f514:	0893      	lsrs	r3, r2, #2
 800f516:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800f51a:	ebc3 3383 	rsb	r3, r3, r3, lsl #14
 800f51e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800f522:	b292      	uxth	r2, r2
 800f524:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f528:	3a01      	subs	r2, #1
 800f52a:	b292      	uxth	r2, r2
 800f52c:	429a      	cmp	r2, r3
 800f52e:	d005      	beq.n	800f53c <_ZN8touchgfx7LCD1bpp10fillMemoryEPvNS_9colortypeEt+0x50>
 800f530:	f800 1b01 	strb.w	r1, [r0], #1
 800f534:	e7f8      	b.n	800f528 <_ZN8touchgfx7LCD1bpp10fillMemoryEPvNS_9colortypeEt+0x3c>
 800f536:	f843 1b04 	str.w	r1, [r3], #4
 800f53a:	e7e7      	b.n	800f50c <_ZN8touchgfx7LCD1bpp10fillMemoryEPvNS_9colortypeEt+0x20>
 800f53c:	bd30      	pop	{r4, r5, pc}

0800f53e <_ZN8touchgfx7LCD1bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 800f53e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f542:	f99d 0034 	ldrsb.w	r0, [sp, #52]	; 0x34
 800f546:	2800      	cmp	r0, #0
 800f548:	4698      	mov	r8, r3
 800f54a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f54c:	f280 809a 	bge.w	800f684 <_ZN8touchgfx7LCD1bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 800f550:	f9b8 0004 	ldrsh.w	r0, [r8, #4]
 800f554:	2800      	cmp	r0, #0
 800f556:	f340 8095 	ble.w	800f684 <_ZN8touchgfx7LCD1bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 800f55a:	f9b8 c006 	ldrsh.w	ip, [r8, #6]
 800f55e:	f1bc 0f00 	cmp.w	ip, #0
 800f562:	f340 808f 	ble.w	800f684 <_ZN8touchgfx7LCD1bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 800f566:	3207      	adds	r2, #7
 800f568:	10d7      	asrs	r7, r2, #3
 800f56a:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 800f56e:	f9b8 4000 	ldrsh.w	r4, [r8]
 800f572:	2508      	movs	r5, #8
 800f574:	fb94 f5f5 	sdiv	r5, r4, r5
 800f578:	fb07 5202 	mla	r2, r7, r2, r5
 800f57c:	188d      	adds	r5, r1, r2
 800f57e:	4262      	negs	r2, r4
 800f580:	f002 0207 	and.w	r2, r2, #7
 800f584:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800f588:	f004 0407 	and.w	r4, r4, #7
 800f58c:	bf58      	it	pl
 800f58e:	4254      	negpl	r4, r2
 800f590:	22b7      	movs	r2, #183	; 0xb7
 800f592:	f3c3 4607 	ubfx	r6, r3, #16, #8
 800f596:	434a      	muls	r2, r1
 800f598:	2136      	movs	r1, #54	; 0x36
 800f59a:	fb01 2206 	mla	r2, r1, r6, r2
 800f59e:	b2de      	uxtb	r6, r3
 800f5a0:	2313      	movs	r3, #19
 800f5a2:	fb03 2606 	mla	r6, r3, r6, r2
 800f5a6:	2c00      	cmp	r4, #0
 800f5a8:	ea4f 36e6 	mov.w	r6, r6, asr #15
 800f5ac:	dd50      	ble.n	800f650 <_ZN8touchgfx7LCD1bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x112>
 800f5ae:	1901      	adds	r1, r0, r4
 800f5b0:	2907      	cmp	r1, #7
 800f5b2:	f04f 0201 	mov.w	r2, #1
 800f5b6:	f1c4 0308 	rsb	r3, r4, #8
 800f5ba:	fa02 f303 	lsl.w	r3, r2, r3
 800f5be:	bfdc      	itt	le
 800f5c0:	f1c1 0108 	rsble	r1, r1, #8
 800f5c4:	408a      	lslle	r2, r1
 800f5c6:	f103 33ff 	add.w	r3, r3, #4294967295
 800f5ca:	b2db      	uxtb	r3, r3
 800f5cc:	bfdc      	itt	le
 800f5ce:	4252      	negle	r2, r2
 800f5d0:	4013      	andle	r3, r2
 800f5d2:	19e9      	adds	r1, r5, r7
 800f5d4:	f1c7 0e00 	rsb	lr, r7, #0
 800f5d8:	ea6f 0903 	mvn.w	r9, r3
 800f5dc:	f811 200e 	ldrb.w	r2, [r1, lr]
 800f5e0:	b36e      	cbz	r6, 800f63e <_ZN8touchgfx7LCD1bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x100>
 800f5e2:	431a      	orrs	r2, r3
 800f5e4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f5e8:	f801 200e 	strb.w	r2, [r1, lr]
 800f5ec:	fa1f f28c 	uxth.w	r2, ip
 800f5f0:	4439      	add	r1, r7
 800f5f2:	fa0f fc82 	sxth.w	ip, r2
 800f5f6:	2a00      	cmp	r2, #0
 800f5f8:	d1f0      	bne.n	800f5dc <_ZN8touchgfx7LCD1bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x9e>
 800f5fa:	f1a0 0308 	sub.w	r3, r0, #8
 800f5fe:	441c      	add	r4, r3
 800f600:	b224      	sxth	r4, r4
 800f602:	4284      	cmp	r4, r0
 800f604:	dc3e      	bgt.n	800f684 <_ZN8touchgfx7LCD1bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 800f606:	2c07      	cmp	r4, #7
 800f608:	f105 0501 	add.w	r5, r5, #1
 800f60c:	dc23      	bgt.n	800f656 <_ZN8touchgfx7LCD1bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 800f60e:	2c00      	cmp	r4, #0
 800f610:	dd38      	ble.n	800f684 <_ZN8touchgfx7LCD1bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 800f612:	2201      	movs	r2, #1
 800f614:	40a2      	lsls	r2, r4
 800f616:	3a01      	subs	r2, #1
 800f618:	f1c4 0408 	rsb	r4, r4, #8
 800f61c:	fa02 f404 	lsl.w	r4, r2, r4
 800f620:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 800f624:	b2e0      	uxtb	r0, r4
 800f626:	2200      	movs	r2, #0
 800f628:	43e4      	mvns	r4, r4
 800f62a:	2900      	cmp	r1, #0
 800f62c:	dd2a      	ble.n	800f684 <_ZN8touchgfx7LCD1bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 800f62e:	5cab      	ldrb	r3, [r5, r2]
 800f630:	b166      	cbz	r6, 800f64c <_ZN8touchgfx7LCD1bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10e>
 800f632:	4303      	orrs	r3, r0
 800f634:	3901      	subs	r1, #1
 800f636:	54ab      	strb	r3, [r5, r2]
 800f638:	b209      	sxth	r1, r1
 800f63a:	443a      	add	r2, r7
 800f63c:	e7f5      	b.n	800f62a <_ZN8touchgfx7LCD1bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 800f63e:	ea09 0202 	and.w	r2, r9, r2
 800f642:	e7cf      	b.n	800f5e4 <_ZN8touchgfx7LCD1bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xa6>
 800f644:	445d      	add	r5, fp
 800f646:	f004 0407 	and.w	r4, r4, #7
 800f64a:	e7e0      	b.n	800f60e <_ZN8touchgfx7LCD1bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd0>
 800f64c:	4023      	ands	r3, r4
 800f64e:	e7f1      	b.n	800f634 <_ZN8touchgfx7LCD1bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf6>
 800f650:	2807      	cmp	r0, #7
 800f652:	4604      	mov	r4, r0
 800f654:	dddd      	ble.n	800f612 <_ZN8touchgfx7LCD1bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 800f656:	ea4f 0be4 	mov.w	fp, r4, asr #3
 800f65a:	f9b8 9006 	ldrsh.w	r9, [r8, #6]
 800f65e:	fa1f f38b 	uxth.w	r3, fp
 800f662:	46aa      	mov	sl, r5
 800f664:	f1b9 0f00 	cmp.w	r9, #0
 800f668:	ddec      	ble.n	800f644 <_ZN8touchgfx7LCD1bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x106>
 800f66a:	461a      	mov	r2, r3
 800f66c:	4650      	mov	r0, sl
 800f66e:	4631      	mov	r1, r6
 800f670:	f109 39ff 	add.w	r9, r9, #4294967295
 800f674:	9301      	str	r3, [sp, #4]
 800f676:	44ba      	add	sl, r7
 800f678:	f7ff ff38 	bl	800f4ec <_ZN8touchgfx7LCD1bpp10fillMemoryEPvNS_9colortypeEt>
 800f67c:	fa0f f989 	sxth.w	r9, r9
 800f680:	9b01      	ldr	r3, [sp, #4]
 800f682:	e7ef      	b.n	800f664 <_ZN8touchgfx7LCD1bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x126>
 800f684:	b003      	add	sp, #12
 800f686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800f68c <CRC_Lock>:
 800f68c:	b530      	push	{r4, r5, lr}
 800f68e:	4a20      	ldr	r2, [pc, #128]	; (800f710 <CRC_Lock+0x84>)
 800f690:	6813      	ldr	r3, [r2, #0]
 800f692:	f023 0301 	bic.w	r3, r3, #1
 800f696:	6013      	str	r3, [r2, #0]
 800f698:	4b1e      	ldr	r3, [pc, #120]	; (800f714 <CRC_Lock+0x88>)
 800f69a:	681a      	ldr	r2, [r3, #0]
 800f69c:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 800f6a0:	4022      	ands	r2, r4
 800f6a2:	f24c 2540 	movw	r5, #49728	; 0xc240
 800f6a6:	42aa      	cmp	r2, r5
 800f6a8:	d005      	beq.n	800f6b6 <CRC_Lock+0x2a>
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	f24c 2270 	movw	r2, #49776	; 0xc270
 800f6b0:	4023      	ands	r3, r4
 800f6b2:	4293      	cmp	r3, r2
 800f6b4:	d124      	bne.n	800f700 <CRC_Lock+0x74>
 800f6b6:	4b18      	ldr	r3, [pc, #96]	; (800f718 <CRC_Lock+0x8c>)
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	bb0b      	cbnz	r3, 800f700 <CRC_Lock+0x74>
 800f6bc:	4b17      	ldr	r3, [pc, #92]	; (800f71c <CRC_Lock+0x90>)
 800f6be:	681a      	ldr	r2, [r3, #0]
 800f6c0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800f6c4:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 800f6c8:	d00d      	beq.n	800f6e6 <CRC_Lock+0x5a>
 800f6ca:	681a      	ldr	r2, [r3, #0]
 800f6cc:	f240 4483 	movw	r4, #1155	; 0x483
 800f6d0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800f6d4:	42a2      	cmp	r2, r4
 800f6d6:	d006      	beq.n	800f6e6 <CRC_Lock+0x5a>
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	f240 4285 	movw	r2, #1157	; 0x485
 800f6de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f6e2:	4293      	cmp	r3, r2
 800f6e4:	d10c      	bne.n	800f700 <CRC_Lock+0x74>
 800f6e6:	4b0e      	ldr	r3, [pc, #56]	; (800f720 <CRC_Lock+0x94>)
 800f6e8:	2201      	movs	r2, #1
 800f6ea:	601a      	str	r2, [r3, #0]
 800f6ec:	681a      	ldr	r2, [r3, #0]
 800f6ee:	2a00      	cmp	r2, #0
 800f6f0:	d1fc      	bne.n	800f6ec <CRC_Lock+0x60>
 800f6f2:	4b0c      	ldr	r3, [pc, #48]	; (800f724 <CRC_Lock+0x98>)
 800f6f4:	6018      	str	r0, [r3, #0]
 800f6f6:	6818      	ldr	r0, [r3, #0]
 800f6f8:	1a43      	subs	r3, r0, r1
 800f6fa:	4258      	negs	r0, r3
 800f6fc:	4158      	adcs	r0, r3
 800f6fe:	bd30      	pop	{r4, r5, pc}
 800f700:	4b09      	ldr	r3, [pc, #36]	; (800f728 <CRC_Lock+0x9c>)
 800f702:	2201      	movs	r2, #1
 800f704:	601a      	str	r2, [r3, #0]
 800f706:	681a      	ldr	r2, [r3, #0]
 800f708:	2a00      	cmp	r2, #0
 800f70a:	d1fc      	bne.n	800f706 <CRC_Lock+0x7a>
 800f70c:	4b07      	ldr	r3, [pc, #28]	; (800f72c <CRC_Lock+0xa0>)
 800f70e:	e7f1      	b.n	800f6f4 <CRC_Lock+0x68>
 800f710:	e0002000 	.word	0xe0002000
 800f714:	e000ed00 	.word	0xe000ed00
 800f718:	e0042000 	.word	0xe0042000
 800f71c:	5c001000 	.word	0x5c001000
 800f720:	58024c08 	.word	0x58024c08
 800f724:	58024c00 	.word	0x58024c00
 800f728:	40023008 	.word	0x40023008
 800f72c:	40023000 	.word	0x40023000

0800f730 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 800f730:	6101      	str	r1, [r0, #16]
 800f732:	4770      	bx	lr

0800f734 <_ZN8touchgfx8Gestures4tickEv>:
 800f734:	7b83      	ldrb	r3, [r0, #14]
 800f736:	b14b      	cbz	r3, 800f74c <_ZN8touchgfx8Gestures4tickEv+0x18>
 800f738:	8903      	ldrh	r3, [r0, #8]
 800f73a:	3301      	adds	r3, #1
 800f73c:	b29b      	uxth	r3, r3
 800f73e:	2b07      	cmp	r3, #7
 800f740:	8103      	strh	r3, [r0, #8]
 800f742:	bf81      	itttt	hi
 800f744:	2300      	movhi	r3, #0
 800f746:	8143      	strhhi	r3, [r0, #10]
 800f748:	8183      	strhhi	r3, [r0, #12]
 800f74a:	7383      	strbhi	r3, [r0, #14]
 800f74c:	4770      	bx	lr
	...

0800f750 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 800f750:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800f754:	4698      	mov	r8, r3
 800f756:	8883      	ldrh	r3, [r0, #4]
 800f758:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f75c:	eba8 0303 	sub.w	r3, r8, r3
 800f760:	b21b      	sxth	r3, r3
 800f762:	4604      	mov	r4, r0
 800f764:	2b00      	cmp	r3, #0
 800f766:	4617      	mov	r7, r2
 800f768:	4a18      	ldr	r2, [pc, #96]	; (800f7cc <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 800f76a:	9200      	str	r2, [sp, #0]
 800f76c:	bfb8      	it	lt
 800f76e:	425b      	neglt	r3, r3
 800f770:	8aa2      	ldrh	r2, [r4, #20]
 800f772:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 800f776:	f8ad 800a 	strh.w	r8, [sp, #10]
 800f77a:	b21b      	sxth	r3, r3
 800f77c:	460e      	mov	r6, r1
 800f77e:	4293      	cmp	r3, r2
 800f780:	88c1      	ldrh	r1, [r0, #6]
 800f782:	f8ad 1008 	strh.w	r1, [sp, #8]
 800f786:	f04f 0000 	mov.w	r0, #0
 800f78a:	f88d 0004 	strb.w	r0, [sp, #4]
 800f78e:	f8ad 500c 	strh.w	r5, [sp, #12]
 800f792:	dc07      	bgt.n	800f7a4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x54>
 800f794:	1a69      	subs	r1, r5, r1
 800f796:	b209      	sxth	r1, r1
 800f798:	2900      	cmp	r1, #0
 800f79a:	bfb8      	it	lt
 800f79c:	4249      	neglt	r1, r1
 800f79e:	b209      	sxth	r1, r1
 800f7a0:	428a      	cmp	r2, r1
 800f7a2:	da10      	bge.n	800f7c6 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x76>
 800f7a4:	6920      	ldr	r0, [r4, #16]
 800f7a6:	6803      	ldr	r3, [r0, #0]
 800f7a8:	4669      	mov	r1, sp
 800f7aa:	685b      	ldr	r3, [r3, #4]
 800f7ac:	4798      	blx	r3
 800f7ae:	eba8 0606 	sub.w	r6, r8, r6
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	1bef      	subs	r7, r5, r7
 800f7b6:	2001      	movs	r0, #1
 800f7b8:	8123      	strh	r3, [r4, #8]
 800f7ba:	8166      	strh	r6, [r4, #10]
 800f7bc:	81a7      	strh	r7, [r4, #12]
 800f7be:	f8a4 8004 	strh.w	r8, [r4, #4]
 800f7c2:	80e5      	strh	r5, [r4, #6]
 800f7c4:	73a0      	strb	r0, [r4, #14]
 800f7c6:	b004      	add	sp, #16
 800f7c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7cc:	0801294c 	.word	0x0801294c

0800f7d0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 800f7d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7d2:	461e      	mov	r6, r3
 800f7d4:	1e4b      	subs	r3, r1, #1
 800f7d6:	2b01      	cmp	r3, #1
 800f7d8:	b085      	sub	sp, #20
 800f7da:	4604      	mov	r4, r0
 800f7dc:	460d      	mov	r5, r1
 800f7de:	4617      	mov	r7, r2
 800f7e0:	d84b      	bhi.n	800f87a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 800f7e2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800f7e6:	1cd3      	adds	r3, r2, #3
 800f7e8:	b29b      	uxth	r3, r3
 800f7ea:	2b06      	cmp	r3, #6
 800f7ec:	d916      	bls.n	800f81c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 800f7ee:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 800f890 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 800f7f2:	f8cd c004 	str.w	ip, [sp, #4]
 800f7f6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800f7fa:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800f7fe:	6900      	ldr	r0, [r0, #16]
 800f800:	f8ad 100c 	strh.w	r1, [sp, #12]
 800f804:	f04f 0c00 	mov.w	ip, #0
 800f808:	f88d c008 	strb.w	ip, [sp, #8]
 800f80c:	f8ad 200a 	strh.w	r2, [sp, #10]
 800f810:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f814:	6803      	ldr	r3, [r0, #0]
 800f816:	a901      	add	r1, sp, #4
 800f818:	689b      	ldr	r3, [r3, #8]
 800f81a:	4798      	blx	r3
 800f81c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f820:	1cd3      	adds	r3, r2, #3
 800f822:	b29b      	uxth	r3, r3
 800f824:	2b06      	cmp	r3, #6
 800f826:	d916      	bls.n	800f856 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 800f828:	f8df c064 	ldr.w	ip, [pc, #100]	; 800f890 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 800f82c:	f8cd c004 	str.w	ip, [sp, #4]
 800f830:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800f834:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800f838:	6920      	ldr	r0, [r4, #16]
 800f83a:	f8ad 100c 	strh.w	r1, [sp, #12]
 800f83e:	f04f 0c01 	mov.w	ip, #1
 800f842:	f88d c008 	strb.w	ip, [sp, #8]
 800f846:	f8ad 200a 	strh.w	r2, [sp, #10]
 800f84a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f84e:	6803      	ldr	r3, [r0, #0]
 800f850:	a901      	add	r1, sp, #4
 800f852:	689b      	ldr	r3, [r3, #8]
 800f854:	4798      	blx	r3
 800f856:	4b0d      	ldr	r3, [pc, #52]	; (800f88c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 800f858:	9301      	str	r3, [sp, #4]
 800f85a:	6920      	ldr	r0, [r4, #16]
 800f85c:	f88d 5008 	strb.w	r5, [sp, #8]
 800f860:	2300      	movs	r3, #0
 800f862:	f8ad 700a 	strh.w	r7, [sp, #10]
 800f866:	f8ad 600c 	strh.w	r6, [sp, #12]
 800f86a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f86e:	6803      	ldr	r3, [r0, #0]
 800f870:	a901      	add	r1, sp, #4
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	4798      	blx	r3
 800f876:	b005      	add	sp, #20
 800f878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f87a:	2900      	cmp	r1, #0
 800f87c:	d1eb      	bne.n	800f856 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 800f87e:	80a2      	strh	r2, [r4, #4]
 800f880:	80c6      	strh	r6, [r0, #6]
 800f882:	60a1      	str	r1, [r4, #8]
 800f884:	81a1      	strh	r1, [r4, #12]
 800f886:	73a1      	strb	r1, [r4, #14]
 800f888:	e7e5      	b.n	800f856 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 800f88a:	bf00      	nop
 800f88c:	08012938 	.word	0x08012938
 800f890:	08012960 	.word	0x08012960

0800f894 <_ZdlPvj>:
 800f894:	f000 b812 	b.w	800f8bc <_ZdlPv>

0800f898 <__cxa_guard_acquire>:
 800f898:	6803      	ldr	r3, [r0, #0]
 800f89a:	07db      	lsls	r3, r3, #31
 800f89c:	d406      	bmi.n	800f8ac <__cxa_guard_acquire+0x14>
 800f89e:	7843      	ldrb	r3, [r0, #1]
 800f8a0:	b103      	cbz	r3, 800f8a4 <__cxa_guard_acquire+0xc>
 800f8a2:	deff      	udf	#255	; 0xff
 800f8a4:	2301      	movs	r3, #1
 800f8a6:	7043      	strb	r3, [r0, #1]
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	4770      	bx	lr
 800f8ac:	2000      	movs	r0, #0
 800f8ae:	4770      	bx	lr

0800f8b0 <__cxa_guard_release>:
 800f8b0:	2301      	movs	r3, #1
 800f8b2:	6003      	str	r3, [r0, #0]
 800f8b4:	4770      	bx	lr

0800f8b6 <__cxa_pure_virtual>:
 800f8b6:	b508      	push	{r3, lr}
 800f8b8:	f000 f80e 	bl	800f8d8 <_ZSt9terminatev>

0800f8bc <_ZdlPv>:
 800f8bc:	f000 b880 	b.w	800f9c0 <free>

0800f8c0 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800f8c0:	b508      	push	{r3, lr}
 800f8c2:	4780      	blx	r0
 800f8c4:	f000 f80d 	bl	800f8e2 <abort>

0800f8c8 <_ZSt13get_terminatev>:
 800f8c8:	4b02      	ldr	r3, [pc, #8]	; (800f8d4 <_ZSt13get_terminatev+0xc>)
 800f8ca:	6818      	ldr	r0, [r3, #0]
 800f8cc:	f3bf 8f5b 	dmb	ish
 800f8d0:	4770      	bx	lr
 800f8d2:	bf00      	nop
 800f8d4:	2000001c 	.word	0x2000001c

0800f8d8 <_ZSt9terminatev>:
 800f8d8:	b508      	push	{r3, lr}
 800f8da:	f7ff fff5 	bl	800f8c8 <_ZSt13get_terminatev>
 800f8de:	f7ff ffef 	bl	800f8c0 <_ZN10__cxxabiv111__terminateEPFvvE>

0800f8e2 <abort>:
 800f8e2:	b508      	push	{r3, lr}
 800f8e4:	2006      	movs	r0, #6
 800f8e6:	f000 fc8f 	bl	8010208 <raise>
 800f8ea:	2001      	movs	r0, #1
 800f8ec:	f7f1 fca2 	bl	8001234 <_exit>

0800f8f0 <__assert_func>:
 800f8f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f8f2:	4614      	mov	r4, r2
 800f8f4:	461a      	mov	r2, r3
 800f8f6:	4b09      	ldr	r3, [pc, #36]	; (800f91c <__assert_func+0x2c>)
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	4605      	mov	r5, r0
 800f8fc:	68d8      	ldr	r0, [r3, #12]
 800f8fe:	b14c      	cbz	r4, 800f914 <__assert_func+0x24>
 800f900:	4b07      	ldr	r3, [pc, #28]	; (800f920 <__assert_func+0x30>)
 800f902:	9100      	str	r1, [sp, #0]
 800f904:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f908:	4906      	ldr	r1, [pc, #24]	; (800f924 <__assert_func+0x34>)
 800f90a:	462b      	mov	r3, r5
 800f90c:	f000 f81a 	bl	800f944 <fiprintf>
 800f910:	f7ff ffe7 	bl	800f8e2 <abort>
 800f914:	4b04      	ldr	r3, [pc, #16]	; (800f928 <__assert_func+0x38>)
 800f916:	461c      	mov	r4, r3
 800f918:	e7f3      	b.n	800f902 <__assert_func+0x12>
 800f91a:	bf00      	nop
 800f91c:	20000020 	.word	0x20000020
 800f920:	080129fc 	.word	0x080129fc
 800f924:	08012a09 	.word	0x08012a09
 800f928:	08012a37 	.word	0x08012a37

0800f92c <atexit>:
 800f92c:	2300      	movs	r3, #0
 800f92e:	4601      	mov	r1, r0
 800f930:	461a      	mov	r2, r3
 800f932:	4618      	mov	r0, r3
 800f934:	f000 bd44 	b.w	80103c0 <__register_exitproc>

0800f938 <__errno>:
 800f938:	4b01      	ldr	r3, [pc, #4]	; (800f940 <__errno+0x8>)
 800f93a:	6818      	ldr	r0, [r3, #0]
 800f93c:	4770      	bx	lr
 800f93e:	bf00      	nop
 800f940:	20000020 	.word	0x20000020

0800f944 <fiprintf>:
 800f944:	b40e      	push	{r1, r2, r3}
 800f946:	b503      	push	{r0, r1, lr}
 800f948:	4601      	mov	r1, r0
 800f94a:	ab03      	add	r3, sp, #12
 800f94c:	4805      	ldr	r0, [pc, #20]	; (800f964 <fiprintf+0x20>)
 800f94e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f952:	6800      	ldr	r0, [r0, #0]
 800f954:	9301      	str	r3, [sp, #4]
 800f956:	f000 f95b 	bl	800fc10 <_vfiprintf_r>
 800f95a:	b002      	add	sp, #8
 800f95c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f960:	b003      	add	sp, #12
 800f962:	4770      	bx	lr
 800f964:	20000020 	.word	0x20000020

0800f968 <__libc_init_array>:
 800f968:	b570      	push	{r4, r5, r6, lr}
 800f96a:	4d0d      	ldr	r5, [pc, #52]	; (800f9a0 <__libc_init_array+0x38>)
 800f96c:	4c0d      	ldr	r4, [pc, #52]	; (800f9a4 <__libc_init_array+0x3c>)
 800f96e:	1b64      	subs	r4, r4, r5
 800f970:	10a4      	asrs	r4, r4, #2
 800f972:	2600      	movs	r6, #0
 800f974:	42a6      	cmp	r6, r4
 800f976:	d109      	bne.n	800f98c <__libc_init_array+0x24>
 800f978:	4d0b      	ldr	r5, [pc, #44]	; (800f9a8 <__libc_init_array+0x40>)
 800f97a:	4c0c      	ldr	r4, [pc, #48]	; (800f9ac <__libc_init_array+0x44>)
 800f97c:	f001 f85a 	bl	8010a34 <_init>
 800f980:	1b64      	subs	r4, r4, r5
 800f982:	10a4      	asrs	r4, r4, #2
 800f984:	2600      	movs	r6, #0
 800f986:	42a6      	cmp	r6, r4
 800f988:	d105      	bne.n	800f996 <__libc_init_array+0x2e>
 800f98a:	bd70      	pop	{r4, r5, r6, pc}
 800f98c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f990:	4798      	blx	r3
 800f992:	3601      	adds	r6, #1
 800f994:	e7ee      	b.n	800f974 <__libc_init_array+0xc>
 800f996:	f855 3b04 	ldr.w	r3, [r5], #4
 800f99a:	4798      	blx	r3
 800f99c:	3601      	adds	r6, #1
 800f99e:	e7f2      	b.n	800f986 <__libc_init_array+0x1e>
 800f9a0:	0801306c 	.word	0x0801306c
 800f9a4:	0801306c 	.word	0x0801306c
 800f9a8:	0801306c 	.word	0x0801306c
 800f9ac:	08013080 	.word	0x08013080

0800f9b0 <malloc>:
 800f9b0:	4b02      	ldr	r3, [pc, #8]	; (800f9bc <malloc+0xc>)
 800f9b2:	4601      	mov	r1, r0
 800f9b4:	6818      	ldr	r0, [r3, #0]
 800f9b6:	f000 b88d 	b.w	800fad4 <_malloc_r>
 800f9ba:	bf00      	nop
 800f9bc:	20000020 	.word	0x20000020

0800f9c0 <free>:
 800f9c0:	4b02      	ldr	r3, [pc, #8]	; (800f9cc <free+0xc>)
 800f9c2:	4601      	mov	r1, r0
 800f9c4:	6818      	ldr	r0, [r3, #0]
 800f9c6:	f000 b819 	b.w	800f9fc <_free_r>
 800f9ca:	bf00      	nop
 800f9cc:	20000020 	.word	0x20000020

0800f9d0 <memcpy>:
 800f9d0:	440a      	add	r2, r1
 800f9d2:	4291      	cmp	r1, r2
 800f9d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800f9d8:	d100      	bne.n	800f9dc <memcpy+0xc>
 800f9da:	4770      	bx	lr
 800f9dc:	b510      	push	{r4, lr}
 800f9de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f9e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f9e6:	4291      	cmp	r1, r2
 800f9e8:	d1f9      	bne.n	800f9de <memcpy+0xe>
 800f9ea:	bd10      	pop	{r4, pc}

0800f9ec <memset>:
 800f9ec:	4402      	add	r2, r0
 800f9ee:	4603      	mov	r3, r0
 800f9f0:	4293      	cmp	r3, r2
 800f9f2:	d100      	bne.n	800f9f6 <memset+0xa>
 800f9f4:	4770      	bx	lr
 800f9f6:	f803 1b01 	strb.w	r1, [r3], #1
 800f9fa:	e7f9      	b.n	800f9f0 <memset+0x4>

0800f9fc <_free_r>:
 800f9fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f9fe:	2900      	cmp	r1, #0
 800fa00:	d044      	beq.n	800fa8c <_free_r+0x90>
 800fa02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa06:	9001      	str	r0, [sp, #4]
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	f1a1 0404 	sub.w	r4, r1, #4
 800fa0e:	bfb8      	it	lt
 800fa10:	18e4      	addlt	r4, r4, r3
 800fa12:	f000 ff57 	bl	80108c4 <__malloc_lock>
 800fa16:	4a1e      	ldr	r2, [pc, #120]	; (800fa90 <_free_r+0x94>)
 800fa18:	9801      	ldr	r0, [sp, #4]
 800fa1a:	6813      	ldr	r3, [r2, #0]
 800fa1c:	b933      	cbnz	r3, 800fa2c <_free_r+0x30>
 800fa1e:	6063      	str	r3, [r4, #4]
 800fa20:	6014      	str	r4, [r2, #0]
 800fa22:	b003      	add	sp, #12
 800fa24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fa28:	f000 bf52 	b.w	80108d0 <__malloc_unlock>
 800fa2c:	42a3      	cmp	r3, r4
 800fa2e:	d908      	bls.n	800fa42 <_free_r+0x46>
 800fa30:	6825      	ldr	r5, [r4, #0]
 800fa32:	1961      	adds	r1, r4, r5
 800fa34:	428b      	cmp	r3, r1
 800fa36:	bf01      	itttt	eq
 800fa38:	6819      	ldreq	r1, [r3, #0]
 800fa3a:	685b      	ldreq	r3, [r3, #4]
 800fa3c:	1949      	addeq	r1, r1, r5
 800fa3e:	6021      	streq	r1, [r4, #0]
 800fa40:	e7ed      	b.n	800fa1e <_free_r+0x22>
 800fa42:	461a      	mov	r2, r3
 800fa44:	685b      	ldr	r3, [r3, #4]
 800fa46:	b10b      	cbz	r3, 800fa4c <_free_r+0x50>
 800fa48:	42a3      	cmp	r3, r4
 800fa4a:	d9fa      	bls.n	800fa42 <_free_r+0x46>
 800fa4c:	6811      	ldr	r1, [r2, #0]
 800fa4e:	1855      	adds	r5, r2, r1
 800fa50:	42a5      	cmp	r5, r4
 800fa52:	d10b      	bne.n	800fa6c <_free_r+0x70>
 800fa54:	6824      	ldr	r4, [r4, #0]
 800fa56:	4421      	add	r1, r4
 800fa58:	1854      	adds	r4, r2, r1
 800fa5a:	42a3      	cmp	r3, r4
 800fa5c:	6011      	str	r1, [r2, #0]
 800fa5e:	d1e0      	bne.n	800fa22 <_free_r+0x26>
 800fa60:	681c      	ldr	r4, [r3, #0]
 800fa62:	685b      	ldr	r3, [r3, #4]
 800fa64:	6053      	str	r3, [r2, #4]
 800fa66:	4421      	add	r1, r4
 800fa68:	6011      	str	r1, [r2, #0]
 800fa6a:	e7da      	b.n	800fa22 <_free_r+0x26>
 800fa6c:	d902      	bls.n	800fa74 <_free_r+0x78>
 800fa6e:	230c      	movs	r3, #12
 800fa70:	6003      	str	r3, [r0, #0]
 800fa72:	e7d6      	b.n	800fa22 <_free_r+0x26>
 800fa74:	6825      	ldr	r5, [r4, #0]
 800fa76:	1961      	adds	r1, r4, r5
 800fa78:	428b      	cmp	r3, r1
 800fa7a:	bf04      	itt	eq
 800fa7c:	6819      	ldreq	r1, [r3, #0]
 800fa7e:	685b      	ldreq	r3, [r3, #4]
 800fa80:	6063      	str	r3, [r4, #4]
 800fa82:	bf04      	itt	eq
 800fa84:	1949      	addeq	r1, r1, r5
 800fa86:	6021      	streq	r1, [r4, #0]
 800fa88:	6054      	str	r4, [r2, #4]
 800fa8a:	e7ca      	b.n	800fa22 <_free_r+0x26>
 800fa8c:	b003      	add	sp, #12
 800fa8e:	bd30      	pop	{r4, r5, pc}
 800fa90:	20001360 	.word	0x20001360

0800fa94 <sbrk_aligned>:
 800fa94:	b570      	push	{r4, r5, r6, lr}
 800fa96:	4e0e      	ldr	r6, [pc, #56]	; (800fad0 <sbrk_aligned+0x3c>)
 800fa98:	460c      	mov	r4, r1
 800fa9a:	6831      	ldr	r1, [r6, #0]
 800fa9c:	4605      	mov	r5, r0
 800fa9e:	b911      	cbnz	r1, 800faa6 <sbrk_aligned+0x12>
 800faa0:	f000 fb7a 	bl	8010198 <_sbrk_r>
 800faa4:	6030      	str	r0, [r6, #0]
 800faa6:	4621      	mov	r1, r4
 800faa8:	4628      	mov	r0, r5
 800faaa:	f000 fb75 	bl	8010198 <_sbrk_r>
 800faae:	1c43      	adds	r3, r0, #1
 800fab0:	d00a      	beq.n	800fac8 <sbrk_aligned+0x34>
 800fab2:	1cc4      	adds	r4, r0, #3
 800fab4:	f024 0403 	bic.w	r4, r4, #3
 800fab8:	42a0      	cmp	r0, r4
 800faba:	d007      	beq.n	800facc <sbrk_aligned+0x38>
 800fabc:	1a21      	subs	r1, r4, r0
 800fabe:	4628      	mov	r0, r5
 800fac0:	f000 fb6a 	bl	8010198 <_sbrk_r>
 800fac4:	3001      	adds	r0, #1
 800fac6:	d101      	bne.n	800facc <sbrk_aligned+0x38>
 800fac8:	f04f 34ff 	mov.w	r4, #4294967295
 800facc:	4620      	mov	r0, r4
 800face:	bd70      	pop	{r4, r5, r6, pc}
 800fad0:	20001364 	.word	0x20001364

0800fad4 <_malloc_r>:
 800fad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fad8:	1ccd      	adds	r5, r1, #3
 800fada:	f025 0503 	bic.w	r5, r5, #3
 800fade:	3508      	adds	r5, #8
 800fae0:	2d0c      	cmp	r5, #12
 800fae2:	bf38      	it	cc
 800fae4:	250c      	movcc	r5, #12
 800fae6:	2d00      	cmp	r5, #0
 800fae8:	4607      	mov	r7, r0
 800faea:	db01      	blt.n	800faf0 <_malloc_r+0x1c>
 800faec:	42a9      	cmp	r1, r5
 800faee:	d905      	bls.n	800fafc <_malloc_r+0x28>
 800faf0:	230c      	movs	r3, #12
 800faf2:	603b      	str	r3, [r7, #0]
 800faf4:	2600      	movs	r6, #0
 800faf6:	4630      	mov	r0, r6
 800faf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fafc:	4e2e      	ldr	r6, [pc, #184]	; (800fbb8 <_malloc_r+0xe4>)
 800fafe:	f000 fee1 	bl	80108c4 <__malloc_lock>
 800fb02:	6833      	ldr	r3, [r6, #0]
 800fb04:	461c      	mov	r4, r3
 800fb06:	bb34      	cbnz	r4, 800fb56 <_malloc_r+0x82>
 800fb08:	4629      	mov	r1, r5
 800fb0a:	4638      	mov	r0, r7
 800fb0c:	f7ff ffc2 	bl	800fa94 <sbrk_aligned>
 800fb10:	1c43      	adds	r3, r0, #1
 800fb12:	4604      	mov	r4, r0
 800fb14:	d14d      	bne.n	800fbb2 <_malloc_r+0xde>
 800fb16:	6834      	ldr	r4, [r6, #0]
 800fb18:	4626      	mov	r6, r4
 800fb1a:	2e00      	cmp	r6, #0
 800fb1c:	d140      	bne.n	800fba0 <_malloc_r+0xcc>
 800fb1e:	6823      	ldr	r3, [r4, #0]
 800fb20:	4631      	mov	r1, r6
 800fb22:	4638      	mov	r0, r7
 800fb24:	eb04 0803 	add.w	r8, r4, r3
 800fb28:	f000 fb36 	bl	8010198 <_sbrk_r>
 800fb2c:	4580      	cmp	r8, r0
 800fb2e:	d13a      	bne.n	800fba6 <_malloc_r+0xd2>
 800fb30:	6821      	ldr	r1, [r4, #0]
 800fb32:	3503      	adds	r5, #3
 800fb34:	1a6d      	subs	r5, r5, r1
 800fb36:	f025 0503 	bic.w	r5, r5, #3
 800fb3a:	3508      	adds	r5, #8
 800fb3c:	2d0c      	cmp	r5, #12
 800fb3e:	bf38      	it	cc
 800fb40:	250c      	movcc	r5, #12
 800fb42:	4629      	mov	r1, r5
 800fb44:	4638      	mov	r0, r7
 800fb46:	f7ff ffa5 	bl	800fa94 <sbrk_aligned>
 800fb4a:	3001      	adds	r0, #1
 800fb4c:	d02b      	beq.n	800fba6 <_malloc_r+0xd2>
 800fb4e:	6823      	ldr	r3, [r4, #0]
 800fb50:	442b      	add	r3, r5
 800fb52:	6023      	str	r3, [r4, #0]
 800fb54:	e00e      	b.n	800fb74 <_malloc_r+0xa0>
 800fb56:	6822      	ldr	r2, [r4, #0]
 800fb58:	1b52      	subs	r2, r2, r5
 800fb5a:	d41e      	bmi.n	800fb9a <_malloc_r+0xc6>
 800fb5c:	2a0b      	cmp	r2, #11
 800fb5e:	d916      	bls.n	800fb8e <_malloc_r+0xba>
 800fb60:	1961      	adds	r1, r4, r5
 800fb62:	42a3      	cmp	r3, r4
 800fb64:	6025      	str	r5, [r4, #0]
 800fb66:	bf18      	it	ne
 800fb68:	6059      	strne	r1, [r3, #4]
 800fb6a:	6863      	ldr	r3, [r4, #4]
 800fb6c:	bf08      	it	eq
 800fb6e:	6031      	streq	r1, [r6, #0]
 800fb70:	5162      	str	r2, [r4, r5]
 800fb72:	604b      	str	r3, [r1, #4]
 800fb74:	4638      	mov	r0, r7
 800fb76:	f104 060b 	add.w	r6, r4, #11
 800fb7a:	f000 fea9 	bl	80108d0 <__malloc_unlock>
 800fb7e:	f026 0607 	bic.w	r6, r6, #7
 800fb82:	1d23      	adds	r3, r4, #4
 800fb84:	1af2      	subs	r2, r6, r3
 800fb86:	d0b6      	beq.n	800faf6 <_malloc_r+0x22>
 800fb88:	1b9b      	subs	r3, r3, r6
 800fb8a:	50a3      	str	r3, [r4, r2]
 800fb8c:	e7b3      	b.n	800faf6 <_malloc_r+0x22>
 800fb8e:	6862      	ldr	r2, [r4, #4]
 800fb90:	42a3      	cmp	r3, r4
 800fb92:	bf0c      	ite	eq
 800fb94:	6032      	streq	r2, [r6, #0]
 800fb96:	605a      	strne	r2, [r3, #4]
 800fb98:	e7ec      	b.n	800fb74 <_malloc_r+0xa0>
 800fb9a:	4623      	mov	r3, r4
 800fb9c:	6864      	ldr	r4, [r4, #4]
 800fb9e:	e7b2      	b.n	800fb06 <_malloc_r+0x32>
 800fba0:	4634      	mov	r4, r6
 800fba2:	6876      	ldr	r6, [r6, #4]
 800fba4:	e7b9      	b.n	800fb1a <_malloc_r+0x46>
 800fba6:	230c      	movs	r3, #12
 800fba8:	603b      	str	r3, [r7, #0]
 800fbaa:	4638      	mov	r0, r7
 800fbac:	f000 fe90 	bl	80108d0 <__malloc_unlock>
 800fbb0:	e7a1      	b.n	800faf6 <_malloc_r+0x22>
 800fbb2:	6025      	str	r5, [r4, #0]
 800fbb4:	e7de      	b.n	800fb74 <_malloc_r+0xa0>
 800fbb6:	bf00      	nop
 800fbb8:	20001360 	.word	0x20001360

0800fbbc <__sfputc_r>:
 800fbbc:	6893      	ldr	r3, [r2, #8]
 800fbbe:	3b01      	subs	r3, #1
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	b410      	push	{r4}
 800fbc4:	6093      	str	r3, [r2, #8]
 800fbc6:	da08      	bge.n	800fbda <__sfputc_r+0x1e>
 800fbc8:	6994      	ldr	r4, [r2, #24]
 800fbca:	42a3      	cmp	r3, r4
 800fbcc:	db01      	blt.n	800fbd2 <__sfputc_r+0x16>
 800fbce:	290a      	cmp	r1, #10
 800fbd0:	d103      	bne.n	800fbda <__sfputc_r+0x1e>
 800fbd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fbd6:	f000 bb33 	b.w	8010240 <__swbuf_r>
 800fbda:	6813      	ldr	r3, [r2, #0]
 800fbdc:	1c58      	adds	r0, r3, #1
 800fbde:	6010      	str	r0, [r2, #0]
 800fbe0:	7019      	strb	r1, [r3, #0]
 800fbe2:	4608      	mov	r0, r1
 800fbe4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fbe8:	4770      	bx	lr

0800fbea <__sfputs_r>:
 800fbea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbec:	4606      	mov	r6, r0
 800fbee:	460f      	mov	r7, r1
 800fbf0:	4614      	mov	r4, r2
 800fbf2:	18d5      	adds	r5, r2, r3
 800fbf4:	42ac      	cmp	r4, r5
 800fbf6:	d101      	bne.n	800fbfc <__sfputs_r+0x12>
 800fbf8:	2000      	movs	r0, #0
 800fbfa:	e007      	b.n	800fc0c <__sfputs_r+0x22>
 800fbfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc00:	463a      	mov	r2, r7
 800fc02:	4630      	mov	r0, r6
 800fc04:	f7ff ffda 	bl	800fbbc <__sfputc_r>
 800fc08:	1c43      	adds	r3, r0, #1
 800fc0a:	d1f3      	bne.n	800fbf4 <__sfputs_r+0xa>
 800fc0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fc10 <_vfiprintf_r>:
 800fc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc14:	460d      	mov	r5, r1
 800fc16:	b09d      	sub	sp, #116	; 0x74
 800fc18:	4614      	mov	r4, r2
 800fc1a:	4698      	mov	r8, r3
 800fc1c:	4606      	mov	r6, r0
 800fc1e:	b118      	cbz	r0, 800fc28 <_vfiprintf_r+0x18>
 800fc20:	6983      	ldr	r3, [r0, #24]
 800fc22:	b90b      	cbnz	r3, 800fc28 <_vfiprintf_r+0x18>
 800fc24:	f000 fd48 	bl	80106b8 <__sinit>
 800fc28:	4b89      	ldr	r3, [pc, #548]	; (800fe50 <_vfiprintf_r+0x240>)
 800fc2a:	429d      	cmp	r5, r3
 800fc2c:	d11b      	bne.n	800fc66 <_vfiprintf_r+0x56>
 800fc2e:	6875      	ldr	r5, [r6, #4]
 800fc30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fc32:	07d9      	lsls	r1, r3, #31
 800fc34:	d405      	bmi.n	800fc42 <_vfiprintf_r+0x32>
 800fc36:	89ab      	ldrh	r3, [r5, #12]
 800fc38:	059a      	lsls	r2, r3, #22
 800fc3a:	d402      	bmi.n	800fc42 <_vfiprintf_r+0x32>
 800fc3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fc3e:	f000 fdd9 	bl	80107f4 <__retarget_lock_acquire_recursive>
 800fc42:	89ab      	ldrh	r3, [r5, #12]
 800fc44:	071b      	lsls	r3, r3, #28
 800fc46:	d501      	bpl.n	800fc4c <_vfiprintf_r+0x3c>
 800fc48:	692b      	ldr	r3, [r5, #16]
 800fc4a:	b9eb      	cbnz	r3, 800fc88 <_vfiprintf_r+0x78>
 800fc4c:	4629      	mov	r1, r5
 800fc4e:	4630      	mov	r0, r6
 800fc50:	f000 fb48 	bl	80102e4 <__swsetup_r>
 800fc54:	b1c0      	cbz	r0, 800fc88 <_vfiprintf_r+0x78>
 800fc56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fc58:	07dc      	lsls	r4, r3, #31
 800fc5a:	d50e      	bpl.n	800fc7a <_vfiprintf_r+0x6a>
 800fc5c:	f04f 30ff 	mov.w	r0, #4294967295
 800fc60:	b01d      	add	sp, #116	; 0x74
 800fc62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc66:	4b7b      	ldr	r3, [pc, #492]	; (800fe54 <_vfiprintf_r+0x244>)
 800fc68:	429d      	cmp	r5, r3
 800fc6a:	d101      	bne.n	800fc70 <_vfiprintf_r+0x60>
 800fc6c:	68b5      	ldr	r5, [r6, #8]
 800fc6e:	e7df      	b.n	800fc30 <_vfiprintf_r+0x20>
 800fc70:	4b79      	ldr	r3, [pc, #484]	; (800fe58 <_vfiprintf_r+0x248>)
 800fc72:	429d      	cmp	r5, r3
 800fc74:	bf08      	it	eq
 800fc76:	68f5      	ldreq	r5, [r6, #12]
 800fc78:	e7da      	b.n	800fc30 <_vfiprintf_r+0x20>
 800fc7a:	89ab      	ldrh	r3, [r5, #12]
 800fc7c:	0598      	lsls	r0, r3, #22
 800fc7e:	d4ed      	bmi.n	800fc5c <_vfiprintf_r+0x4c>
 800fc80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fc82:	f000 fdb9 	bl	80107f8 <__retarget_lock_release_recursive>
 800fc86:	e7e9      	b.n	800fc5c <_vfiprintf_r+0x4c>
 800fc88:	2300      	movs	r3, #0
 800fc8a:	9309      	str	r3, [sp, #36]	; 0x24
 800fc8c:	2320      	movs	r3, #32
 800fc8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fc92:	f8cd 800c 	str.w	r8, [sp, #12]
 800fc96:	2330      	movs	r3, #48	; 0x30
 800fc98:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fe5c <_vfiprintf_r+0x24c>
 800fc9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fca0:	f04f 0901 	mov.w	r9, #1
 800fca4:	4623      	mov	r3, r4
 800fca6:	469a      	mov	sl, r3
 800fca8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fcac:	b10a      	cbz	r2, 800fcb2 <_vfiprintf_r+0xa2>
 800fcae:	2a25      	cmp	r2, #37	; 0x25
 800fcb0:	d1f9      	bne.n	800fca6 <_vfiprintf_r+0x96>
 800fcb2:	ebba 0b04 	subs.w	fp, sl, r4
 800fcb6:	d00b      	beq.n	800fcd0 <_vfiprintf_r+0xc0>
 800fcb8:	465b      	mov	r3, fp
 800fcba:	4622      	mov	r2, r4
 800fcbc:	4629      	mov	r1, r5
 800fcbe:	4630      	mov	r0, r6
 800fcc0:	f7ff ff93 	bl	800fbea <__sfputs_r>
 800fcc4:	3001      	adds	r0, #1
 800fcc6:	f000 80aa 	beq.w	800fe1e <_vfiprintf_r+0x20e>
 800fcca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fccc:	445a      	add	r2, fp
 800fcce:	9209      	str	r2, [sp, #36]	; 0x24
 800fcd0:	f89a 3000 	ldrb.w	r3, [sl]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	f000 80a2 	beq.w	800fe1e <_vfiprintf_r+0x20e>
 800fcda:	2300      	movs	r3, #0
 800fcdc:	f04f 32ff 	mov.w	r2, #4294967295
 800fce0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fce4:	f10a 0a01 	add.w	sl, sl, #1
 800fce8:	9304      	str	r3, [sp, #16]
 800fcea:	9307      	str	r3, [sp, #28]
 800fcec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fcf0:	931a      	str	r3, [sp, #104]	; 0x68
 800fcf2:	4654      	mov	r4, sl
 800fcf4:	2205      	movs	r2, #5
 800fcf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fcfa:	4858      	ldr	r0, [pc, #352]	; (800fe5c <_vfiprintf_r+0x24c>)
 800fcfc:	f7f0 fa70 	bl	80001e0 <memchr>
 800fd00:	9a04      	ldr	r2, [sp, #16]
 800fd02:	b9d8      	cbnz	r0, 800fd3c <_vfiprintf_r+0x12c>
 800fd04:	06d1      	lsls	r1, r2, #27
 800fd06:	bf44      	itt	mi
 800fd08:	2320      	movmi	r3, #32
 800fd0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd0e:	0713      	lsls	r3, r2, #28
 800fd10:	bf44      	itt	mi
 800fd12:	232b      	movmi	r3, #43	; 0x2b
 800fd14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd18:	f89a 3000 	ldrb.w	r3, [sl]
 800fd1c:	2b2a      	cmp	r3, #42	; 0x2a
 800fd1e:	d015      	beq.n	800fd4c <_vfiprintf_r+0x13c>
 800fd20:	9a07      	ldr	r2, [sp, #28]
 800fd22:	4654      	mov	r4, sl
 800fd24:	2000      	movs	r0, #0
 800fd26:	f04f 0c0a 	mov.w	ip, #10
 800fd2a:	4621      	mov	r1, r4
 800fd2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fd30:	3b30      	subs	r3, #48	; 0x30
 800fd32:	2b09      	cmp	r3, #9
 800fd34:	d94e      	bls.n	800fdd4 <_vfiprintf_r+0x1c4>
 800fd36:	b1b0      	cbz	r0, 800fd66 <_vfiprintf_r+0x156>
 800fd38:	9207      	str	r2, [sp, #28]
 800fd3a:	e014      	b.n	800fd66 <_vfiprintf_r+0x156>
 800fd3c:	eba0 0308 	sub.w	r3, r0, r8
 800fd40:	fa09 f303 	lsl.w	r3, r9, r3
 800fd44:	4313      	orrs	r3, r2
 800fd46:	9304      	str	r3, [sp, #16]
 800fd48:	46a2      	mov	sl, r4
 800fd4a:	e7d2      	b.n	800fcf2 <_vfiprintf_r+0xe2>
 800fd4c:	9b03      	ldr	r3, [sp, #12]
 800fd4e:	1d19      	adds	r1, r3, #4
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	9103      	str	r1, [sp, #12]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	bfbb      	ittet	lt
 800fd58:	425b      	neglt	r3, r3
 800fd5a:	f042 0202 	orrlt.w	r2, r2, #2
 800fd5e:	9307      	strge	r3, [sp, #28]
 800fd60:	9307      	strlt	r3, [sp, #28]
 800fd62:	bfb8      	it	lt
 800fd64:	9204      	strlt	r2, [sp, #16]
 800fd66:	7823      	ldrb	r3, [r4, #0]
 800fd68:	2b2e      	cmp	r3, #46	; 0x2e
 800fd6a:	d10c      	bne.n	800fd86 <_vfiprintf_r+0x176>
 800fd6c:	7863      	ldrb	r3, [r4, #1]
 800fd6e:	2b2a      	cmp	r3, #42	; 0x2a
 800fd70:	d135      	bne.n	800fdde <_vfiprintf_r+0x1ce>
 800fd72:	9b03      	ldr	r3, [sp, #12]
 800fd74:	1d1a      	adds	r2, r3, #4
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	9203      	str	r2, [sp, #12]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	bfb8      	it	lt
 800fd7e:	f04f 33ff 	movlt.w	r3, #4294967295
 800fd82:	3402      	adds	r4, #2
 800fd84:	9305      	str	r3, [sp, #20]
 800fd86:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fe6c <_vfiprintf_r+0x25c>
 800fd8a:	7821      	ldrb	r1, [r4, #0]
 800fd8c:	2203      	movs	r2, #3
 800fd8e:	4650      	mov	r0, sl
 800fd90:	f7f0 fa26 	bl	80001e0 <memchr>
 800fd94:	b140      	cbz	r0, 800fda8 <_vfiprintf_r+0x198>
 800fd96:	2340      	movs	r3, #64	; 0x40
 800fd98:	eba0 000a 	sub.w	r0, r0, sl
 800fd9c:	fa03 f000 	lsl.w	r0, r3, r0
 800fda0:	9b04      	ldr	r3, [sp, #16]
 800fda2:	4303      	orrs	r3, r0
 800fda4:	3401      	adds	r4, #1
 800fda6:	9304      	str	r3, [sp, #16]
 800fda8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fdac:	482c      	ldr	r0, [pc, #176]	; (800fe60 <_vfiprintf_r+0x250>)
 800fdae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fdb2:	2206      	movs	r2, #6
 800fdb4:	f7f0 fa14 	bl	80001e0 <memchr>
 800fdb8:	2800      	cmp	r0, #0
 800fdba:	d03f      	beq.n	800fe3c <_vfiprintf_r+0x22c>
 800fdbc:	4b29      	ldr	r3, [pc, #164]	; (800fe64 <_vfiprintf_r+0x254>)
 800fdbe:	bb1b      	cbnz	r3, 800fe08 <_vfiprintf_r+0x1f8>
 800fdc0:	9b03      	ldr	r3, [sp, #12]
 800fdc2:	3307      	adds	r3, #7
 800fdc4:	f023 0307 	bic.w	r3, r3, #7
 800fdc8:	3308      	adds	r3, #8
 800fdca:	9303      	str	r3, [sp, #12]
 800fdcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fdce:	443b      	add	r3, r7
 800fdd0:	9309      	str	r3, [sp, #36]	; 0x24
 800fdd2:	e767      	b.n	800fca4 <_vfiprintf_r+0x94>
 800fdd4:	fb0c 3202 	mla	r2, ip, r2, r3
 800fdd8:	460c      	mov	r4, r1
 800fdda:	2001      	movs	r0, #1
 800fddc:	e7a5      	b.n	800fd2a <_vfiprintf_r+0x11a>
 800fdde:	2300      	movs	r3, #0
 800fde0:	3401      	adds	r4, #1
 800fde2:	9305      	str	r3, [sp, #20]
 800fde4:	4619      	mov	r1, r3
 800fde6:	f04f 0c0a 	mov.w	ip, #10
 800fdea:	4620      	mov	r0, r4
 800fdec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fdf0:	3a30      	subs	r2, #48	; 0x30
 800fdf2:	2a09      	cmp	r2, #9
 800fdf4:	d903      	bls.n	800fdfe <_vfiprintf_r+0x1ee>
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d0c5      	beq.n	800fd86 <_vfiprintf_r+0x176>
 800fdfa:	9105      	str	r1, [sp, #20]
 800fdfc:	e7c3      	b.n	800fd86 <_vfiprintf_r+0x176>
 800fdfe:	fb0c 2101 	mla	r1, ip, r1, r2
 800fe02:	4604      	mov	r4, r0
 800fe04:	2301      	movs	r3, #1
 800fe06:	e7f0      	b.n	800fdea <_vfiprintf_r+0x1da>
 800fe08:	ab03      	add	r3, sp, #12
 800fe0a:	9300      	str	r3, [sp, #0]
 800fe0c:	462a      	mov	r2, r5
 800fe0e:	4b16      	ldr	r3, [pc, #88]	; (800fe68 <_vfiprintf_r+0x258>)
 800fe10:	a904      	add	r1, sp, #16
 800fe12:	4630      	mov	r0, r6
 800fe14:	f3af 8000 	nop.w
 800fe18:	4607      	mov	r7, r0
 800fe1a:	1c78      	adds	r0, r7, #1
 800fe1c:	d1d6      	bne.n	800fdcc <_vfiprintf_r+0x1bc>
 800fe1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fe20:	07d9      	lsls	r1, r3, #31
 800fe22:	d405      	bmi.n	800fe30 <_vfiprintf_r+0x220>
 800fe24:	89ab      	ldrh	r3, [r5, #12]
 800fe26:	059a      	lsls	r2, r3, #22
 800fe28:	d402      	bmi.n	800fe30 <_vfiprintf_r+0x220>
 800fe2a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fe2c:	f000 fce4 	bl	80107f8 <__retarget_lock_release_recursive>
 800fe30:	89ab      	ldrh	r3, [r5, #12]
 800fe32:	065b      	lsls	r3, r3, #25
 800fe34:	f53f af12 	bmi.w	800fc5c <_vfiprintf_r+0x4c>
 800fe38:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fe3a:	e711      	b.n	800fc60 <_vfiprintf_r+0x50>
 800fe3c:	ab03      	add	r3, sp, #12
 800fe3e:	9300      	str	r3, [sp, #0]
 800fe40:	462a      	mov	r2, r5
 800fe42:	4b09      	ldr	r3, [pc, #36]	; (800fe68 <_vfiprintf_r+0x258>)
 800fe44:	a904      	add	r1, sp, #16
 800fe46:	4630      	mov	r0, r6
 800fe48:	f000 f880 	bl	800ff4c <_printf_i>
 800fe4c:	e7e4      	b.n	800fe18 <_vfiprintf_r+0x208>
 800fe4e:	bf00      	nop
 800fe50:	08012a90 	.word	0x08012a90
 800fe54:	08012ab0 	.word	0x08012ab0
 800fe58:	08012a70 	.word	0x08012a70
 800fe5c:	08012a3c 	.word	0x08012a3c
 800fe60:	08012a46 	.word	0x08012a46
 800fe64:	00000000 	.word	0x00000000
 800fe68:	0800fbeb 	.word	0x0800fbeb
 800fe6c:	08012a42 	.word	0x08012a42

0800fe70 <_printf_common>:
 800fe70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe74:	4616      	mov	r6, r2
 800fe76:	4699      	mov	r9, r3
 800fe78:	688a      	ldr	r2, [r1, #8]
 800fe7a:	690b      	ldr	r3, [r1, #16]
 800fe7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fe80:	4293      	cmp	r3, r2
 800fe82:	bfb8      	it	lt
 800fe84:	4613      	movlt	r3, r2
 800fe86:	6033      	str	r3, [r6, #0]
 800fe88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fe8c:	4607      	mov	r7, r0
 800fe8e:	460c      	mov	r4, r1
 800fe90:	b10a      	cbz	r2, 800fe96 <_printf_common+0x26>
 800fe92:	3301      	adds	r3, #1
 800fe94:	6033      	str	r3, [r6, #0]
 800fe96:	6823      	ldr	r3, [r4, #0]
 800fe98:	0699      	lsls	r1, r3, #26
 800fe9a:	bf42      	ittt	mi
 800fe9c:	6833      	ldrmi	r3, [r6, #0]
 800fe9e:	3302      	addmi	r3, #2
 800fea0:	6033      	strmi	r3, [r6, #0]
 800fea2:	6825      	ldr	r5, [r4, #0]
 800fea4:	f015 0506 	ands.w	r5, r5, #6
 800fea8:	d106      	bne.n	800feb8 <_printf_common+0x48>
 800feaa:	f104 0a19 	add.w	sl, r4, #25
 800feae:	68e3      	ldr	r3, [r4, #12]
 800feb0:	6832      	ldr	r2, [r6, #0]
 800feb2:	1a9b      	subs	r3, r3, r2
 800feb4:	42ab      	cmp	r3, r5
 800feb6:	dc26      	bgt.n	800ff06 <_printf_common+0x96>
 800feb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800febc:	1e13      	subs	r3, r2, #0
 800febe:	6822      	ldr	r2, [r4, #0]
 800fec0:	bf18      	it	ne
 800fec2:	2301      	movne	r3, #1
 800fec4:	0692      	lsls	r2, r2, #26
 800fec6:	d42b      	bmi.n	800ff20 <_printf_common+0xb0>
 800fec8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fecc:	4649      	mov	r1, r9
 800fece:	4638      	mov	r0, r7
 800fed0:	47c0      	blx	r8
 800fed2:	3001      	adds	r0, #1
 800fed4:	d01e      	beq.n	800ff14 <_printf_common+0xa4>
 800fed6:	6823      	ldr	r3, [r4, #0]
 800fed8:	68e5      	ldr	r5, [r4, #12]
 800feda:	6832      	ldr	r2, [r6, #0]
 800fedc:	f003 0306 	and.w	r3, r3, #6
 800fee0:	2b04      	cmp	r3, #4
 800fee2:	bf08      	it	eq
 800fee4:	1aad      	subeq	r5, r5, r2
 800fee6:	68a3      	ldr	r3, [r4, #8]
 800fee8:	6922      	ldr	r2, [r4, #16]
 800feea:	bf0c      	ite	eq
 800feec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fef0:	2500      	movne	r5, #0
 800fef2:	4293      	cmp	r3, r2
 800fef4:	bfc4      	itt	gt
 800fef6:	1a9b      	subgt	r3, r3, r2
 800fef8:	18ed      	addgt	r5, r5, r3
 800fefa:	2600      	movs	r6, #0
 800fefc:	341a      	adds	r4, #26
 800fefe:	42b5      	cmp	r5, r6
 800ff00:	d11a      	bne.n	800ff38 <_printf_common+0xc8>
 800ff02:	2000      	movs	r0, #0
 800ff04:	e008      	b.n	800ff18 <_printf_common+0xa8>
 800ff06:	2301      	movs	r3, #1
 800ff08:	4652      	mov	r2, sl
 800ff0a:	4649      	mov	r1, r9
 800ff0c:	4638      	mov	r0, r7
 800ff0e:	47c0      	blx	r8
 800ff10:	3001      	adds	r0, #1
 800ff12:	d103      	bne.n	800ff1c <_printf_common+0xac>
 800ff14:	f04f 30ff 	mov.w	r0, #4294967295
 800ff18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff1c:	3501      	adds	r5, #1
 800ff1e:	e7c6      	b.n	800feae <_printf_common+0x3e>
 800ff20:	18e1      	adds	r1, r4, r3
 800ff22:	1c5a      	adds	r2, r3, #1
 800ff24:	2030      	movs	r0, #48	; 0x30
 800ff26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ff2a:	4422      	add	r2, r4
 800ff2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ff30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ff34:	3302      	adds	r3, #2
 800ff36:	e7c7      	b.n	800fec8 <_printf_common+0x58>
 800ff38:	2301      	movs	r3, #1
 800ff3a:	4622      	mov	r2, r4
 800ff3c:	4649      	mov	r1, r9
 800ff3e:	4638      	mov	r0, r7
 800ff40:	47c0      	blx	r8
 800ff42:	3001      	adds	r0, #1
 800ff44:	d0e6      	beq.n	800ff14 <_printf_common+0xa4>
 800ff46:	3601      	adds	r6, #1
 800ff48:	e7d9      	b.n	800fefe <_printf_common+0x8e>
	...

0800ff4c <_printf_i>:
 800ff4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ff50:	7e0f      	ldrb	r7, [r1, #24]
 800ff52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ff54:	2f78      	cmp	r7, #120	; 0x78
 800ff56:	4691      	mov	r9, r2
 800ff58:	4680      	mov	r8, r0
 800ff5a:	460c      	mov	r4, r1
 800ff5c:	469a      	mov	sl, r3
 800ff5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ff62:	d807      	bhi.n	800ff74 <_printf_i+0x28>
 800ff64:	2f62      	cmp	r7, #98	; 0x62
 800ff66:	d80a      	bhi.n	800ff7e <_printf_i+0x32>
 800ff68:	2f00      	cmp	r7, #0
 800ff6a:	f000 80d8 	beq.w	801011e <_printf_i+0x1d2>
 800ff6e:	2f58      	cmp	r7, #88	; 0x58
 800ff70:	f000 80a3 	beq.w	80100ba <_printf_i+0x16e>
 800ff74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ff78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ff7c:	e03a      	b.n	800fff4 <_printf_i+0xa8>
 800ff7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ff82:	2b15      	cmp	r3, #21
 800ff84:	d8f6      	bhi.n	800ff74 <_printf_i+0x28>
 800ff86:	a101      	add	r1, pc, #4	; (adr r1, 800ff8c <_printf_i+0x40>)
 800ff88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ff8c:	0800ffe5 	.word	0x0800ffe5
 800ff90:	0800fff9 	.word	0x0800fff9
 800ff94:	0800ff75 	.word	0x0800ff75
 800ff98:	0800ff75 	.word	0x0800ff75
 800ff9c:	0800ff75 	.word	0x0800ff75
 800ffa0:	0800ff75 	.word	0x0800ff75
 800ffa4:	0800fff9 	.word	0x0800fff9
 800ffa8:	0800ff75 	.word	0x0800ff75
 800ffac:	0800ff75 	.word	0x0800ff75
 800ffb0:	0800ff75 	.word	0x0800ff75
 800ffb4:	0800ff75 	.word	0x0800ff75
 800ffb8:	08010105 	.word	0x08010105
 800ffbc:	08010029 	.word	0x08010029
 800ffc0:	080100e7 	.word	0x080100e7
 800ffc4:	0800ff75 	.word	0x0800ff75
 800ffc8:	0800ff75 	.word	0x0800ff75
 800ffcc:	08010127 	.word	0x08010127
 800ffd0:	0800ff75 	.word	0x0800ff75
 800ffd4:	08010029 	.word	0x08010029
 800ffd8:	0800ff75 	.word	0x0800ff75
 800ffdc:	0800ff75 	.word	0x0800ff75
 800ffe0:	080100ef 	.word	0x080100ef
 800ffe4:	682b      	ldr	r3, [r5, #0]
 800ffe6:	1d1a      	adds	r2, r3, #4
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	602a      	str	r2, [r5, #0]
 800ffec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fff0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fff4:	2301      	movs	r3, #1
 800fff6:	e0a3      	b.n	8010140 <_printf_i+0x1f4>
 800fff8:	6820      	ldr	r0, [r4, #0]
 800fffa:	6829      	ldr	r1, [r5, #0]
 800fffc:	0606      	lsls	r6, r0, #24
 800fffe:	f101 0304 	add.w	r3, r1, #4
 8010002:	d50a      	bpl.n	801001a <_printf_i+0xce>
 8010004:	680e      	ldr	r6, [r1, #0]
 8010006:	602b      	str	r3, [r5, #0]
 8010008:	2e00      	cmp	r6, #0
 801000a:	da03      	bge.n	8010014 <_printf_i+0xc8>
 801000c:	232d      	movs	r3, #45	; 0x2d
 801000e:	4276      	negs	r6, r6
 8010010:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010014:	485e      	ldr	r0, [pc, #376]	; (8010190 <_printf_i+0x244>)
 8010016:	230a      	movs	r3, #10
 8010018:	e019      	b.n	801004e <_printf_i+0x102>
 801001a:	680e      	ldr	r6, [r1, #0]
 801001c:	602b      	str	r3, [r5, #0]
 801001e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010022:	bf18      	it	ne
 8010024:	b236      	sxthne	r6, r6
 8010026:	e7ef      	b.n	8010008 <_printf_i+0xbc>
 8010028:	682b      	ldr	r3, [r5, #0]
 801002a:	6820      	ldr	r0, [r4, #0]
 801002c:	1d19      	adds	r1, r3, #4
 801002e:	6029      	str	r1, [r5, #0]
 8010030:	0601      	lsls	r1, r0, #24
 8010032:	d501      	bpl.n	8010038 <_printf_i+0xec>
 8010034:	681e      	ldr	r6, [r3, #0]
 8010036:	e002      	b.n	801003e <_printf_i+0xf2>
 8010038:	0646      	lsls	r6, r0, #25
 801003a:	d5fb      	bpl.n	8010034 <_printf_i+0xe8>
 801003c:	881e      	ldrh	r6, [r3, #0]
 801003e:	4854      	ldr	r0, [pc, #336]	; (8010190 <_printf_i+0x244>)
 8010040:	2f6f      	cmp	r7, #111	; 0x6f
 8010042:	bf0c      	ite	eq
 8010044:	2308      	moveq	r3, #8
 8010046:	230a      	movne	r3, #10
 8010048:	2100      	movs	r1, #0
 801004a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801004e:	6865      	ldr	r5, [r4, #4]
 8010050:	60a5      	str	r5, [r4, #8]
 8010052:	2d00      	cmp	r5, #0
 8010054:	bfa2      	ittt	ge
 8010056:	6821      	ldrge	r1, [r4, #0]
 8010058:	f021 0104 	bicge.w	r1, r1, #4
 801005c:	6021      	strge	r1, [r4, #0]
 801005e:	b90e      	cbnz	r6, 8010064 <_printf_i+0x118>
 8010060:	2d00      	cmp	r5, #0
 8010062:	d04d      	beq.n	8010100 <_printf_i+0x1b4>
 8010064:	4615      	mov	r5, r2
 8010066:	fbb6 f1f3 	udiv	r1, r6, r3
 801006a:	fb03 6711 	mls	r7, r3, r1, r6
 801006e:	5dc7      	ldrb	r7, [r0, r7]
 8010070:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010074:	4637      	mov	r7, r6
 8010076:	42bb      	cmp	r3, r7
 8010078:	460e      	mov	r6, r1
 801007a:	d9f4      	bls.n	8010066 <_printf_i+0x11a>
 801007c:	2b08      	cmp	r3, #8
 801007e:	d10b      	bne.n	8010098 <_printf_i+0x14c>
 8010080:	6823      	ldr	r3, [r4, #0]
 8010082:	07de      	lsls	r6, r3, #31
 8010084:	d508      	bpl.n	8010098 <_printf_i+0x14c>
 8010086:	6923      	ldr	r3, [r4, #16]
 8010088:	6861      	ldr	r1, [r4, #4]
 801008a:	4299      	cmp	r1, r3
 801008c:	bfde      	ittt	le
 801008e:	2330      	movle	r3, #48	; 0x30
 8010090:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010094:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010098:	1b52      	subs	r2, r2, r5
 801009a:	6122      	str	r2, [r4, #16]
 801009c:	f8cd a000 	str.w	sl, [sp]
 80100a0:	464b      	mov	r3, r9
 80100a2:	aa03      	add	r2, sp, #12
 80100a4:	4621      	mov	r1, r4
 80100a6:	4640      	mov	r0, r8
 80100a8:	f7ff fee2 	bl	800fe70 <_printf_common>
 80100ac:	3001      	adds	r0, #1
 80100ae:	d14c      	bne.n	801014a <_printf_i+0x1fe>
 80100b0:	f04f 30ff 	mov.w	r0, #4294967295
 80100b4:	b004      	add	sp, #16
 80100b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100ba:	4835      	ldr	r0, [pc, #212]	; (8010190 <_printf_i+0x244>)
 80100bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80100c0:	6829      	ldr	r1, [r5, #0]
 80100c2:	6823      	ldr	r3, [r4, #0]
 80100c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80100c8:	6029      	str	r1, [r5, #0]
 80100ca:	061d      	lsls	r5, r3, #24
 80100cc:	d514      	bpl.n	80100f8 <_printf_i+0x1ac>
 80100ce:	07df      	lsls	r7, r3, #31
 80100d0:	bf44      	itt	mi
 80100d2:	f043 0320 	orrmi.w	r3, r3, #32
 80100d6:	6023      	strmi	r3, [r4, #0]
 80100d8:	b91e      	cbnz	r6, 80100e2 <_printf_i+0x196>
 80100da:	6823      	ldr	r3, [r4, #0]
 80100dc:	f023 0320 	bic.w	r3, r3, #32
 80100e0:	6023      	str	r3, [r4, #0]
 80100e2:	2310      	movs	r3, #16
 80100e4:	e7b0      	b.n	8010048 <_printf_i+0xfc>
 80100e6:	6823      	ldr	r3, [r4, #0]
 80100e8:	f043 0320 	orr.w	r3, r3, #32
 80100ec:	6023      	str	r3, [r4, #0]
 80100ee:	2378      	movs	r3, #120	; 0x78
 80100f0:	4828      	ldr	r0, [pc, #160]	; (8010194 <_printf_i+0x248>)
 80100f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80100f6:	e7e3      	b.n	80100c0 <_printf_i+0x174>
 80100f8:	0659      	lsls	r1, r3, #25
 80100fa:	bf48      	it	mi
 80100fc:	b2b6      	uxthmi	r6, r6
 80100fe:	e7e6      	b.n	80100ce <_printf_i+0x182>
 8010100:	4615      	mov	r5, r2
 8010102:	e7bb      	b.n	801007c <_printf_i+0x130>
 8010104:	682b      	ldr	r3, [r5, #0]
 8010106:	6826      	ldr	r6, [r4, #0]
 8010108:	6961      	ldr	r1, [r4, #20]
 801010a:	1d18      	adds	r0, r3, #4
 801010c:	6028      	str	r0, [r5, #0]
 801010e:	0635      	lsls	r5, r6, #24
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	d501      	bpl.n	8010118 <_printf_i+0x1cc>
 8010114:	6019      	str	r1, [r3, #0]
 8010116:	e002      	b.n	801011e <_printf_i+0x1d2>
 8010118:	0670      	lsls	r0, r6, #25
 801011a:	d5fb      	bpl.n	8010114 <_printf_i+0x1c8>
 801011c:	8019      	strh	r1, [r3, #0]
 801011e:	2300      	movs	r3, #0
 8010120:	6123      	str	r3, [r4, #16]
 8010122:	4615      	mov	r5, r2
 8010124:	e7ba      	b.n	801009c <_printf_i+0x150>
 8010126:	682b      	ldr	r3, [r5, #0]
 8010128:	1d1a      	adds	r2, r3, #4
 801012a:	602a      	str	r2, [r5, #0]
 801012c:	681d      	ldr	r5, [r3, #0]
 801012e:	6862      	ldr	r2, [r4, #4]
 8010130:	2100      	movs	r1, #0
 8010132:	4628      	mov	r0, r5
 8010134:	f7f0 f854 	bl	80001e0 <memchr>
 8010138:	b108      	cbz	r0, 801013e <_printf_i+0x1f2>
 801013a:	1b40      	subs	r0, r0, r5
 801013c:	6060      	str	r0, [r4, #4]
 801013e:	6863      	ldr	r3, [r4, #4]
 8010140:	6123      	str	r3, [r4, #16]
 8010142:	2300      	movs	r3, #0
 8010144:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010148:	e7a8      	b.n	801009c <_printf_i+0x150>
 801014a:	6923      	ldr	r3, [r4, #16]
 801014c:	462a      	mov	r2, r5
 801014e:	4649      	mov	r1, r9
 8010150:	4640      	mov	r0, r8
 8010152:	47d0      	blx	sl
 8010154:	3001      	adds	r0, #1
 8010156:	d0ab      	beq.n	80100b0 <_printf_i+0x164>
 8010158:	6823      	ldr	r3, [r4, #0]
 801015a:	079b      	lsls	r3, r3, #30
 801015c:	d413      	bmi.n	8010186 <_printf_i+0x23a>
 801015e:	68e0      	ldr	r0, [r4, #12]
 8010160:	9b03      	ldr	r3, [sp, #12]
 8010162:	4298      	cmp	r0, r3
 8010164:	bfb8      	it	lt
 8010166:	4618      	movlt	r0, r3
 8010168:	e7a4      	b.n	80100b4 <_printf_i+0x168>
 801016a:	2301      	movs	r3, #1
 801016c:	4632      	mov	r2, r6
 801016e:	4649      	mov	r1, r9
 8010170:	4640      	mov	r0, r8
 8010172:	47d0      	blx	sl
 8010174:	3001      	adds	r0, #1
 8010176:	d09b      	beq.n	80100b0 <_printf_i+0x164>
 8010178:	3501      	adds	r5, #1
 801017a:	68e3      	ldr	r3, [r4, #12]
 801017c:	9903      	ldr	r1, [sp, #12]
 801017e:	1a5b      	subs	r3, r3, r1
 8010180:	42ab      	cmp	r3, r5
 8010182:	dcf2      	bgt.n	801016a <_printf_i+0x21e>
 8010184:	e7eb      	b.n	801015e <_printf_i+0x212>
 8010186:	2500      	movs	r5, #0
 8010188:	f104 0619 	add.w	r6, r4, #25
 801018c:	e7f5      	b.n	801017a <_printf_i+0x22e>
 801018e:	bf00      	nop
 8010190:	08012a4d 	.word	0x08012a4d
 8010194:	08012a5e 	.word	0x08012a5e

08010198 <_sbrk_r>:
 8010198:	b538      	push	{r3, r4, r5, lr}
 801019a:	4d06      	ldr	r5, [pc, #24]	; (80101b4 <_sbrk_r+0x1c>)
 801019c:	2300      	movs	r3, #0
 801019e:	4604      	mov	r4, r0
 80101a0:	4608      	mov	r0, r1
 80101a2:	602b      	str	r3, [r5, #0]
 80101a4:	f7f1 f8be 	bl	8001324 <_sbrk>
 80101a8:	1c43      	adds	r3, r0, #1
 80101aa:	d102      	bne.n	80101b2 <_sbrk_r+0x1a>
 80101ac:	682b      	ldr	r3, [r5, #0]
 80101ae:	b103      	cbz	r3, 80101b2 <_sbrk_r+0x1a>
 80101b0:	6023      	str	r3, [r4, #0]
 80101b2:	bd38      	pop	{r3, r4, r5, pc}
 80101b4:	200013fc 	.word	0x200013fc

080101b8 <_raise_r>:
 80101b8:	291f      	cmp	r1, #31
 80101ba:	b538      	push	{r3, r4, r5, lr}
 80101bc:	4604      	mov	r4, r0
 80101be:	460d      	mov	r5, r1
 80101c0:	d904      	bls.n	80101cc <_raise_r+0x14>
 80101c2:	2316      	movs	r3, #22
 80101c4:	6003      	str	r3, [r0, #0]
 80101c6:	f04f 30ff 	mov.w	r0, #4294967295
 80101ca:	bd38      	pop	{r3, r4, r5, pc}
 80101cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80101ce:	b112      	cbz	r2, 80101d6 <_raise_r+0x1e>
 80101d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80101d4:	b94b      	cbnz	r3, 80101ea <_raise_r+0x32>
 80101d6:	4620      	mov	r0, r4
 80101d8:	f000 f830 	bl	801023c <_getpid_r>
 80101dc:	462a      	mov	r2, r5
 80101de:	4601      	mov	r1, r0
 80101e0:	4620      	mov	r0, r4
 80101e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80101e6:	f000 b817 	b.w	8010218 <_kill_r>
 80101ea:	2b01      	cmp	r3, #1
 80101ec:	d00a      	beq.n	8010204 <_raise_r+0x4c>
 80101ee:	1c59      	adds	r1, r3, #1
 80101f0:	d103      	bne.n	80101fa <_raise_r+0x42>
 80101f2:	2316      	movs	r3, #22
 80101f4:	6003      	str	r3, [r0, #0]
 80101f6:	2001      	movs	r0, #1
 80101f8:	e7e7      	b.n	80101ca <_raise_r+0x12>
 80101fa:	2400      	movs	r4, #0
 80101fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010200:	4628      	mov	r0, r5
 8010202:	4798      	blx	r3
 8010204:	2000      	movs	r0, #0
 8010206:	e7e0      	b.n	80101ca <_raise_r+0x12>

08010208 <raise>:
 8010208:	4b02      	ldr	r3, [pc, #8]	; (8010214 <raise+0xc>)
 801020a:	4601      	mov	r1, r0
 801020c:	6818      	ldr	r0, [r3, #0]
 801020e:	f7ff bfd3 	b.w	80101b8 <_raise_r>
 8010212:	bf00      	nop
 8010214:	20000020 	.word	0x20000020

08010218 <_kill_r>:
 8010218:	b538      	push	{r3, r4, r5, lr}
 801021a:	4d07      	ldr	r5, [pc, #28]	; (8010238 <_kill_r+0x20>)
 801021c:	2300      	movs	r3, #0
 801021e:	4604      	mov	r4, r0
 8010220:	4608      	mov	r0, r1
 8010222:	4611      	mov	r1, r2
 8010224:	602b      	str	r3, [r5, #0]
 8010226:	f7f0 fff5 	bl	8001214 <_kill>
 801022a:	1c43      	adds	r3, r0, #1
 801022c:	d102      	bne.n	8010234 <_kill_r+0x1c>
 801022e:	682b      	ldr	r3, [r5, #0]
 8010230:	b103      	cbz	r3, 8010234 <_kill_r+0x1c>
 8010232:	6023      	str	r3, [r4, #0]
 8010234:	bd38      	pop	{r3, r4, r5, pc}
 8010236:	bf00      	nop
 8010238:	200013fc 	.word	0x200013fc

0801023c <_getpid_r>:
 801023c:	f7f0 bfe2 	b.w	8001204 <_getpid>

08010240 <__swbuf_r>:
 8010240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010242:	460e      	mov	r6, r1
 8010244:	4614      	mov	r4, r2
 8010246:	4605      	mov	r5, r0
 8010248:	b118      	cbz	r0, 8010252 <__swbuf_r+0x12>
 801024a:	6983      	ldr	r3, [r0, #24]
 801024c:	b90b      	cbnz	r3, 8010252 <__swbuf_r+0x12>
 801024e:	f000 fa33 	bl	80106b8 <__sinit>
 8010252:	4b21      	ldr	r3, [pc, #132]	; (80102d8 <__swbuf_r+0x98>)
 8010254:	429c      	cmp	r4, r3
 8010256:	d12b      	bne.n	80102b0 <__swbuf_r+0x70>
 8010258:	686c      	ldr	r4, [r5, #4]
 801025a:	69a3      	ldr	r3, [r4, #24]
 801025c:	60a3      	str	r3, [r4, #8]
 801025e:	89a3      	ldrh	r3, [r4, #12]
 8010260:	071a      	lsls	r2, r3, #28
 8010262:	d52f      	bpl.n	80102c4 <__swbuf_r+0x84>
 8010264:	6923      	ldr	r3, [r4, #16]
 8010266:	b36b      	cbz	r3, 80102c4 <__swbuf_r+0x84>
 8010268:	6923      	ldr	r3, [r4, #16]
 801026a:	6820      	ldr	r0, [r4, #0]
 801026c:	1ac0      	subs	r0, r0, r3
 801026e:	6963      	ldr	r3, [r4, #20]
 8010270:	b2f6      	uxtb	r6, r6
 8010272:	4283      	cmp	r3, r0
 8010274:	4637      	mov	r7, r6
 8010276:	dc04      	bgt.n	8010282 <__swbuf_r+0x42>
 8010278:	4621      	mov	r1, r4
 801027a:	4628      	mov	r0, r5
 801027c:	f000 f988 	bl	8010590 <_fflush_r>
 8010280:	bb30      	cbnz	r0, 80102d0 <__swbuf_r+0x90>
 8010282:	68a3      	ldr	r3, [r4, #8]
 8010284:	3b01      	subs	r3, #1
 8010286:	60a3      	str	r3, [r4, #8]
 8010288:	6823      	ldr	r3, [r4, #0]
 801028a:	1c5a      	adds	r2, r3, #1
 801028c:	6022      	str	r2, [r4, #0]
 801028e:	701e      	strb	r6, [r3, #0]
 8010290:	6963      	ldr	r3, [r4, #20]
 8010292:	3001      	adds	r0, #1
 8010294:	4283      	cmp	r3, r0
 8010296:	d004      	beq.n	80102a2 <__swbuf_r+0x62>
 8010298:	89a3      	ldrh	r3, [r4, #12]
 801029a:	07db      	lsls	r3, r3, #31
 801029c:	d506      	bpl.n	80102ac <__swbuf_r+0x6c>
 801029e:	2e0a      	cmp	r6, #10
 80102a0:	d104      	bne.n	80102ac <__swbuf_r+0x6c>
 80102a2:	4621      	mov	r1, r4
 80102a4:	4628      	mov	r0, r5
 80102a6:	f000 f973 	bl	8010590 <_fflush_r>
 80102aa:	b988      	cbnz	r0, 80102d0 <__swbuf_r+0x90>
 80102ac:	4638      	mov	r0, r7
 80102ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102b0:	4b0a      	ldr	r3, [pc, #40]	; (80102dc <__swbuf_r+0x9c>)
 80102b2:	429c      	cmp	r4, r3
 80102b4:	d101      	bne.n	80102ba <__swbuf_r+0x7a>
 80102b6:	68ac      	ldr	r4, [r5, #8]
 80102b8:	e7cf      	b.n	801025a <__swbuf_r+0x1a>
 80102ba:	4b09      	ldr	r3, [pc, #36]	; (80102e0 <__swbuf_r+0xa0>)
 80102bc:	429c      	cmp	r4, r3
 80102be:	bf08      	it	eq
 80102c0:	68ec      	ldreq	r4, [r5, #12]
 80102c2:	e7ca      	b.n	801025a <__swbuf_r+0x1a>
 80102c4:	4621      	mov	r1, r4
 80102c6:	4628      	mov	r0, r5
 80102c8:	f000 f80c 	bl	80102e4 <__swsetup_r>
 80102cc:	2800      	cmp	r0, #0
 80102ce:	d0cb      	beq.n	8010268 <__swbuf_r+0x28>
 80102d0:	f04f 37ff 	mov.w	r7, #4294967295
 80102d4:	e7ea      	b.n	80102ac <__swbuf_r+0x6c>
 80102d6:	bf00      	nop
 80102d8:	08012a90 	.word	0x08012a90
 80102dc:	08012ab0 	.word	0x08012ab0
 80102e0:	08012a70 	.word	0x08012a70

080102e4 <__swsetup_r>:
 80102e4:	4b32      	ldr	r3, [pc, #200]	; (80103b0 <__swsetup_r+0xcc>)
 80102e6:	b570      	push	{r4, r5, r6, lr}
 80102e8:	681d      	ldr	r5, [r3, #0]
 80102ea:	4606      	mov	r6, r0
 80102ec:	460c      	mov	r4, r1
 80102ee:	b125      	cbz	r5, 80102fa <__swsetup_r+0x16>
 80102f0:	69ab      	ldr	r3, [r5, #24]
 80102f2:	b913      	cbnz	r3, 80102fa <__swsetup_r+0x16>
 80102f4:	4628      	mov	r0, r5
 80102f6:	f000 f9df 	bl	80106b8 <__sinit>
 80102fa:	4b2e      	ldr	r3, [pc, #184]	; (80103b4 <__swsetup_r+0xd0>)
 80102fc:	429c      	cmp	r4, r3
 80102fe:	d10f      	bne.n	8010320 <__swsetup_r+0x3c>
 8010300:	686c      	ldr	r4, [r5, #4]
 8010302:	89a3      	ldrh	r3, [r4, #12]
 8010304:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010308:	0719      	lsls	r1, r3, #28
 801030a:	d42c      	bmi.n	8010366 <__swsetup_r+0x82>
 801030c:	06dd      	lsls	r5, r3, #27
 801030e:	d411      	bmi.n	8010334 <__swsetup_r+0x50>
 8010310:	2309      	movs	r3, #9
 8010312:	6033      	str	r3, [r6, #0]
 8010314:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010318:	81a3      	strh	r3, [r4, #12]
 801031a:	f04f 30ff 	mov.w	r0, #4294967295
 801031e:	e03e      	b.n	801039e <__swsetup_r+0xba>
 8010320:	4b25      	ldr	r3, [pc, #148]	; (80103b8 <__swsetup_r+0xd4>)
 8010322:	429c      	cmp	r4, r3
 8010324:	d101      	bne.n	801032a <__swsetup_r+0x46>
 8010326:	68ac      	ldr	r4, [r5, #8]
 8010328:	e7eb      	b.n	8010302 <__swsetup_r+0x1e>
 801032a:	4b24      	ldr	r3, [pc, #144]	; (80103bc <__swsetup_r+0xd8>)
 801032c:	429c      	cmp	r4, r3
 801032e:	bf08      	it	eq
 8010330:	68ec      	ldreq	r4, [r5, #12]
 8010332:	e7e6      	b.n	8010302 <__swsetup_r+0x1e>
 8010334:	0758      	lsls	r0, r3, #29
 8010336:	d512      	bpl.n	801035e <__swsetup_r+0x7a>
 8010338:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801033a:	b141      	cbz	r1, 801034e <__swsetup_r+0x6a>
 801033c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010340:	4299      	cmp	r1, r3
 8010342:	d002      	beq.n	801034a <__swsetup_r+0x66>
 8010344:	4630      	mov	r0, r6
 8010346:	f7ff fb59 	bl	800f9fc <_free_r>
 801034a:	2300      	movs	r3, #0
 801034c:	6363      	str	r3, [r4, #52]	; 0x34
 801034e:	89a3      	ldrh	r3, [r4, #12]
 8010350:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010354:	81a3      	strh	r3, [r4, #12]
 8010356:	2300      	movs	r3, #0
 8010358:	6063      	str	r3, [r4, #4]
 801035a:	6923      	ldr	r3, [r4, #16]
 801035c:	6023      	str	r3, [r4, #0]
 801035e:	89a3      	ldrh	r3, [r4, #12]
 8010360:	f043 0308 	orr.w	r3, r3, #8
 8010364:	81a3      	strh	r3, [r4, #12]
 8010366:	6923      	ldr	r3, [r4, #16]
 8010368:	b94b      	cbnz	r3, 801037e <__swsetup_r+0x9a>
 801036a:	89a3      	ldrh	r3, [r4, #12]
 801036c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010374:	d003      	beq.n	801037e <__swsetup_r+0x9a>
 8010376:	4621      	mov	r1, r4
 8010378:	4630      	mov	r0, r6
 801037a:	f000 fa63 	bl	8010844 <__smakebuf_r>
 801037e:	89a0      	ldrh	r0, [r4, #12]
 8010380:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010384:	f010 0301 	ands.w	r3, r0, #1
 8010388:	d00a      	beq.n	80103a0 <__swsetup_r+0xbc>
 801038a:	2300      	movs	r3, #0
 801038c:	60a3      	str	r3, [r4, #8]
 801038e:	6963      	ldr	r3, [r4, #20]
 8010390:	425b      	negs	r3, r3
 8010392:	61a3      	str	r3, [r4, #24]
 8010394:	6923      	ldr	r3, [r4, #16]
 8010396:	b943      	cbnz	r3, 80103aa <__swsetup_r+0xc6>
 8010398:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801039c:	d1ba      	bne.n	8010314 <__swsetup_r+0x30>
 801039e:	bd70      	pop	{r4, r5, r6, pc}
 80103a0:	0781      	lsls	r1, r0, #30
 80103a2:	bf58      	it	pl
 80103a4:	6963      	ldrpl	r3, [r4, #20]
 80103a6:	60a3      	str	r3, [r4, #8]
 80103a8:	e7f4      	b.n	8010394 <__swsetup_r+0xb0>
 80103aa:	2000      	movs	r0, #0
 80103ac:	e7f7      	b.n	801039e <__swsetup_r+0xba>
 80103ae:	bf00      	nop
 80103b0:	20000020 	.word	0x20000020
 80103b4:	08012a90 	.word	0x08012a90
 80103b8:	08012ab0 	.word	0x08012ab0
 80103bc:	08012a70 	.word	0x08012a70

080103c0 <__register_exitproc>:
 80103c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80103c4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8010480 <__register_exitproc+0xc0>
 80103c8:	4606      	mov	r6, r0
 80103ca:	f8d8 0000 	ldr.w	r0, [r8]
 80103ce:	461f      	mov	r7, r3
 80103d0:	460d      	mov	r5, r1
 80103d2:	4691      	mov	r9, r2
 80103d4:	f000 fa0e 	bl	80107f4 <__retarget_lock_acquire_recursive>
 80103d8:	4b25      	ldr	r3, [pc, #148]	; (8010470 <__register_exitproc+0xb0>)
 80103da:	681c      	ldr	r4, [r3, #0]
 80103dc:	b934      	cbnz	r4, 80103ec <__register_exitproc+0x2c>
 80103de:	4c25      	ldr	r4, [pc, #148]	; (8010474 <__register_exitproc+0xb4>)
 80103e0:	601c      	str	r4, [r3, #0]
 80103e2:	4b25      	ldr	r3, [pc, #148]	; (8010478 <__register_exitproc+0xb8>)
 80103e4:	b113      	cbz	r3, 80103ec <__register_exitproc+0x2c>
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80103ec:	6863      	ldr	r3, [r4, #4]
 80103ee:	2b1f      	cmp	r3, #31
 80103f0:	dd07      	ble.n	8010402 <__register_exitproc+0x42>
 80103f2:	f8d8 0000 	ldr.w	r0, [r8]
 80103f6:	f000 f9ff 	bl	80107f8 <__retarget_lock_release_recursive>
 80103fa:	f04f 30ff 	mov.w	r0, #4294967295
 80103fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010402:	b34e      	cbz	r6, 8010458 <__register_exitproc+0x98>
 8010404:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8010408:	b988      	cbnz	r0, 801042e <__register_exitproc+0x6e>
 801040a:	4b1c      	ldr	r3, [pc, #112]	; (801047c <__register_exitproc+0xbc>)
 801040c:	b923      	cbnz	r3, 8010418 <__register_exitproc+0x58>
 801040e:	f8d8 0000 	ldr.w	r0, [r8]
 8010412:	f000 f9f0 	bl	80107f6 <__retarget_lock_release>
 8010416:	e7f0      	b.n	80103fa <__register_exitproc+0x3a>
 8010418:	f44f 7084 	mov.w	r0, #264	; 0x108
 801041c:	f7ff fac8 	bl	800f9b0 <malloc>
 8010420:	2800      	cmp	r0, #0
 8010422:	d0f4      	beq.n	801040e <__register_exitproc+0x4e>
 8010424:	2300      	movs	r3, #0
 8010426:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 801042a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801042e:	6863      	ldr	r3, [r4, #4]
 8010430:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8010434:	2201      	movs	r2, #1
 8010436:	409a      	lsls	r2, r3
 8010438:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801043c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8010440:	4313      	orrs	r3, r2
 8010442:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8010446:	2e02      	cmp	r6, #2
 8010448:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 801044c:	bf02      	ittt	eq
 801044e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8010452:	4313      	orreq	r3, r2
 8010454:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8010458:	6863      	ldr	r3, [r4, #4]
 801045a:	f8d8 0000 	ldr.w	r0, [r8]
 801045e:	1c5a      	adds	r2, r3, #1
 8010460:	3302      	adds	r3, #2
 8010462:	6062      	str	r2, [r4, #4]
 8010464:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8010468:	f000 f9c6 	bl	80107f8 <__retarget_lock_release_recursive>
 801046c:	2000      	movs	r0, #0
 801046e:	e7c6      	b.n	80103fe <__register_exitproc+0x3e>
 8010470:	200013f4 	.word	0x200013f4
 8010474:	20001368 	.word	0x20001368
 8010478:	00000000 	.word	0x00000000
 801047c:	0800f9b1 	.word	0x0800f9b1
 8010480:	20000084 	.word	0x20000084

08010484 <__sflush_r>:
 8010484:	898a      	ldrh	r2, [r1, #12]
 8010486:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801048a:	4605      	mov	r5, r0
 801048c:	0710      	lsls	r0, r2, #28
 801048e:	460c      	mov	r4, r1
 8010490:	d458      	bmi.n	8010544 <__sflush_r+0xc0>
 8010492:	684b      	ldr	r3, [r1, #4]
 8010494:	2b00      	cmp	r3, #0
 8010496:	dc05      	bgt.n	80104a4 <__sflush_r+0x20>
 8010498:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801049a:	2b00      	cmp	r3, #0
 801049c:	dc02      	bgt.n	80104a4 <__sflush_r+0x20>
 801049e:	2000      	movs	r0, #0
 80104a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80104a6:	2e00      	cmp	r6, #0
 80104a8:	d0f9      	beq.n	801049e <__sflush_r+0x1a>
 80104aa:	2300      	movs	r3, #0
 80104ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80104b0:	682f      	ldr	r7, [r5, #0]
 80104b2:	602b      	str	r3, [r5, #0]
 80104b4:	d032      	beq.n	801051c <__sflush_r+0x98>
 80104b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80104b8:	89a3      	ldrh	r3, [r4, #12]
 80104ba:	075a      	lsls	r2, r3, #29
 80104bc:	d505      	bpl.n	80104ca <__sflush_r+0x46>
 80104be:	6863      	ldr	r3, [r4, #4]
 80104c0:	1ac0      	subs	r0, r0, r3
 80104c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80104c4:	b10b      	cbz	r3, 80104ca <__sflush_r+0x46>
 80104c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80104c8:	1ac0      	subs	r0, r0, r3
 80104ca:	2300      	movs	r3, #0
 80104cc:	4602      	mov	r2, r0
 80104ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80104d0:	6a21      	ldr	r1, [r4, #32]
 80104d2:	4628      	mov	r0, r5
 80104d4:	47b0      	blx	r6
 80104d6:	1c43      	adds	r3, r0, #1
 80104d8:	89a3      	ldrh	r3, [r4, #12]
 80104da:	d106      	bne.n	80104ea <__sflush_r+0x66>
 80104dc:	6829      	ldr	r1, [r5, #0]
 80104de:	291d      	cmp	r1, #29
 80104e0:	d82c      	bhi.n	801053c <__sflush_r+0xb8>
 80104e2:	4a2a      	ldr	r2, [pc, #168]	; (801058c <__sflush_r+0x108>)
 80104e4:	40ca      	lsrs	r2, r1
 80104e6:	07d6      	lsls	r6, r2, #31
 80104e8:	d528      	bpl.n	801053c <__sflush_r+0xb8>
 80104ea:	2200      	movs	r2, #0
 80104ec:	6062      	str	r2, [r4, #4]
 80104ee:	04d9      	lsls	r1, r3, #19
 80104f0:	6922      	ldr	r2, [r4, #16]
 80104f2:	6022      	str	r2, [r4, #0]
 80104f4:	d504      	bpl.n	8010500 <__sflush_r+0x7c>
 80104f6:	1c42      	adds	r2, r0, #1
 80104f8:	d101      	bne.n	80104fe <__sflush_r+0x7a>
 80104fa:	682b      	ldr	r3, [r5, #0]
 80104fc:	b903      	cbnz	r3, 8010500 <__sflush_r+0x7c>
 80104fe:	6560      	str	r0, [r4, #84]	; 0x54
 8010500:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010502:	602f      	str	r7, [r5, #0]
 8010504:	2900      	cmp	r1, #0
 8010506:	d0ca      	beq.n	801049e <__sflush_r+0x1a>
 8010508:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801050c:	4299      	cmp	r1, r3
 801050e:	d002      	beq.n	8010516 <__sflush_r+0x92>
 8010510:	4628      	mov	r0, r5
 8010512:	f7ff fa73 	bl	800f9fc <_free_r>
 8010516:	2000      	movs	r0, #0
 8010518:	6360      	str	r0, [r4, #52]	; 0x34
 801051a:	e7c1      	b.n	80104a0 <__sflush_r+0x1c>
 801051c:	6a21      	ldr	r1, [r4, #32]
 801051e:	2301      	movs	r3, #1
 8010520:	4628      	mov	r0, r5
 8010522:	47b0      	blx	r6
 8010524:	1c41      	adds	r1, r0, #1
 8010526:	d1c7      	bne.n	80104b8 <__sflush_r+0x34>
 8010528:	682b      	ldr	r3, [r5, #0]
 801052a:	2b00      	cmp	r3, #0
 801052c:	d0c4      	beq.n	80104b8 <__sflush_r+0x34>
 801052e:	2b1d      	cmp	r3, #29
 8010530:	d001      	beq.n	8010536 <__sflush_r+0xb2>
 8010532:	2b16      	cmp	r3, #22
 8010534:	d101      	bne.n	801053a <__sflush_r+0xb6>
 8010536:	602f      	str	r7, [r5, #0]
 8010538:	e7b1      	b.n	801049e <__sflush_r+0x1a>
 801053a:	89a3      	ldrh	r3, [r4, #12]
 801053c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010540:	81a3      	strh	r3, [r4, #12]
 8010542:	e7ad      	b.n	80104a0 <__sflush_r+0x1c>
 8010544:	690f      	ldr	r7, [r1, #16]
 8010546:	2f00      	cmp	r7, #0
 8010548:	d0a9      	beq.n	801049e <__sflush_r+0x1a>
 801054a:	0793      	lsls	r3, r2, #30
 801054c:	680e      	ldr	r6, [r1, #0]
 801054e:	bf08      	it	eq
 8010550:	694b      	ldreq	r3, [r1, #20]
 8010552:	600f      	str	r7, [r1, #0]
 8010554:	bf18      	it	ne
 8010556:	2300      	movne	r3, #0
 8010558:	eba6 0807 	sub.w	r8, r6, r7
 801055c:	608b      	str	r3, [r1, #8]
 801055e:	f1b8 0f00 	cmp.w	r8, #0
 8010562:	dd9c      	ble.n	801049e <__sflush_r+0x1a>
 8010564:	6a21      	ldr	r1, [r4, #32]
 8010566:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010568:	4643      	mov	r3, r8
 801056a:	463a      	mov	r2, r7
 801056c:	4628      	mov	r0, r5
 801056e:	47b0      	blx	r6
 8010570:	2800      	cmp	r0, #0
 8010572:	dc06      	bgt.n	8010582 <__sflush_r+0xfe>
 8010574:	89a3      	ldrh	r3, [r4, #12]
 8010576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801057a:	81a3      	strh	r3, [r4, #12]
 801057c:	f04f 30ff 	mov.w	r0, #4294967295
 8010580:	e78e      	b.n	80104a0 <__sflush_r+0x1c>
 8010582:	4407      	add	r7, r0
 8010584:	eba8 0800 	sub.w	r8, r8, r0
 8010588:	e7e9      	b.n	801055e <__sflush_r+0xda>
 801058a:	bf00      	nop
 801058c:	20400001 	.word	0x20400001

08010590 <_fflush_r>:
 8010590:	b538      	push	{r3, r4, r5, lr}
 8010592:	690b      	ldr	r3, [r1, #16]
 8010594:	4605      	mov	r5, r0
 8010596:	460c      	mov	r4, r1
 8010598:	b913      	cbnz	r3, 80105a0 <_fflush_r+0x10>
 801059a:	2500      	movs	r5, #0
 801059c:	4628      	mov	r0, r5
 801059e:	bd38      	pop	{r3, r4, r5, pc}
 80105a0:	b118      	cbz	r0, 80105aa <_fflush_r+0x1a>
 80105a2:	6983      	ldr	r3, [r0, #24]
 80105a4:	b90b      	cbnz	r3, 80105aa <_fflush_r+0x1a>
 80105a6:	f000 f887 	bl	80106b8 <__sinit>
 80105aa:	4b14      	ldr	r3, [pc, #80]	; (80105fc <_fflush_r+0x6c>)
 80105ac:	429c      	cmp	r4, r3
 80105ae:	d11b      	bne.n	80105e8 <_fflush_r+0x58>
 80105b0:	686c      	ldr	r4, [r5, #4]
 80105b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d0ef      	beq.n	801059a <_fflush_r+0xa>
 80105ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80105bc:	07d0      	lsls	r0, r2, #31
 80105be:	d404      	bmi.n	80105ca <_fflush_r+0x3a>
 80105c0:	0599      	lsls	r1, r3, #22
 80105c2:	d402      	bmi.n	80105ca <_fflush_r+0x3a>
 80105c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80105c6:	f000 f915 	bl	80107f4 <__retarget_lock_acquire_recursive>
 80105ca:	4628      	mov	r0, r5
 80105cc:	4621      	mov	r1, r4
 80105ce:	f7ff ff59 	bl	8010484 <__sflush_r>
 80105d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80105d4:	07da      	lsls	r2, r3, #31
 80105d6:	4605      	mov	r5, r0
 80105d8:	d4e0      	bmi.n	801059c <_fflush_r+0xc>
 80105da:	89a3      	ldrh	r3, [r4, #12]
 80105dc:	059b      	lsls	r3, r3, #22
 80105de:	d4dd      	bmi.n	801059c <_fflush_r+0xc>
 80105e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80105e2:	f000 f909 	bl	80107f8 <__retarget_lock_release_recursive>
 80105e6:	e7d9      	b.n	801059c <_fflush_r+0xc>
 80105e8:	4b05      	ldr	r3, [pc, #20]	; (8010600 <_fflush_r+0x70>)
 80105ea:	429c      	cmp	r4, r3
 80105ec:	d101      	bne.n	80105f2 <_fflush_r+0x62>
 80105ee:	68ac      	ldr	r4, [r5, #8]
 80105f0:	e7df      	b.n	80105b2 <_fflush_r+0x22>
 80105f2:	4b04      	ldr	r3, [pc, #16]	; (8010604 <_fflush_r+0x74>)
 80105f4:	429c      	cmp	r4, r3
 80105f6:	bf08      	it	eq
 80105f8:	68ec      	ldreq	r4, [r5, #12]
 80105fa:	e7da      	b.n	80105b2 <_fflush_r+0x22>
 80105fc:	08012a90 	.word	0x08012a90
 8010600:	08012ab0 	.word	0x08012ab0
 8010604:	08012a70 	.word	0x08012a70

08010608 <std>:
 8010608:	2300      	movs	r3, #0
 801060a:	b510      	push	{r4, lr}
 801060c:	4604      	mov	r4, r0
 801060e:	e9c0 3300 	strd	r3, r3, [r0]
 8010612:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010616:	6083      	str	r3, [r0, #8]
 8010618:	8181      	strh	r1, [r0, #12]
 801061a:	6643      	str	r3, [r0, #100]	; 0x64
 801061c:	81c2      	strh	r2, [r0, #14]
 801061e:	6183      	str	r3, [r0, #24]
 8010620:	4619      	mov	r1, r3
 8010622:	2208      	movs	r2, #8
 8010624:	305c      	adds	r0, #92	; 0x5c
 8010626:	f7ff f9e1 	bl	800f9ec <memset>
 801062a:	4b05      	ldr	r3, [pc, #20]	; (8010640 <std+0x38>)
 801062c:	6263      	str	r3, [r4, #36]	; 0x24
 801062e:	4b05      	ldr	r3, [pc, #20]	; (8010644 <std+0x3c>)
 8010630:	62a3      	str	r3, [r4, #40]	; 0x28
 8010632:	4b05      	ldr	r3, [pc, #20]	; (8010648 <std+0x40>)
 8010634:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010636:	4b05      	ldr	r3, [pc, #20]	; (801064c <std+0x44>)
 8010638:	6224      	str	r4, [r4, #32]
 801063a:	6323      	str	r3, [r4, #48]	; 0x30
 801063c:	bd10      	pop	{r4, pc}
 801063e:	bf00      	nop
 8010640:	080108dd 	.word	0x080108dd
 8010644:	080108ff 	.word	0x080108ff
 8010648:	08010937 	.word	0x08010937
 801064c:	0801095b 	.word	0x0801095b

08010650 <_cleanup_r>:
 8010650:	4901      	ldr	r1, [pc, #4]	; (8010658 <_cleanup_r+0x8>)
 8010652:	f000 b8af 	b.w	80107b4 <_fwalk_reent>
 8010656:	bf00      	nop
 8010658:	08010591 	.word	0x08010591

0801065c <__sfmoreglue>:
 801065c:	b570      	push	{r4, r5, r6, lr}
 801065e:	2268      	movs	r2, #104	; 0x68
 8010660:	1e4d      	subs	r5, r1, #1
 8010662:	4355      	muls	r5, r2
 8010664:	460e      	mov	r6, r1
 8010666:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801066a:	f7ff fa33 	bl	800fad4 <_malloc_r>
 801066e:	4604      	mov	r4, r0
 8010670:	b140      	cbz	r0, 8010684 <__sfmoreglue+0x28>
 8010672:	2100      	movs	r1, #0
 8010674:	e9c0 1600 	strd	r1, r6, [r0]
 8010678:	300c      	adds	r0, #12
 801067a:	60a0      	str	r0, [r4, #8]
 801067c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010680:	f7ff f9b4 	bl	800f9ec <memset>
 8010684:	4620      	mov	r0, r4
 8010686:	bd70      	pop	{r4, r5, r6, pc}

08010688 <__sfp_lock_acquire>:
 8010688:	4801      	ldr	r0, [pc, #4]	; (8010690 <__sfp_lock_acquire+0x8>)
 801068a:	f000 b8b3 	b.w	80107f4 <__retarget_lock_acquire_recursive>
 801068e:	bf00      	nop
 8010690:	200013fa 	.word	0x200013fa

08010694 <__sfp_lock_release>:
 8010694:	4801      	ldr	r0, [pc, #4]	; (801069c <__sfp_lock_release+0x8>)
 8010696:	f000 b8af 	b.w	80107f8 <__retarget_lock_release_recursive>
 801069a:	bf00      	nop
 801069c:	200013fa 	.word	0x200013fa

080106a0 <__sinit_lock_acquire>:
 80106a0:	4801      	ldr	r0, [pc, #4]	; (80106a8 <__sinit_lock_acquire+0x8>)
 80106a2:	f000 b8a7 	b.w	80107f4 <__retarget_lock_acquire_recursive>
 80106a6:	bf00      	nop
 80106a8:	200013fb 	.word	0x200013fb

080106ac <__sinit_lock_release>:
 80106ac:	4801      	ldr	r0, [pc, #4]	; (80106b4 <__sinit_lock_release+0x8>)
 80106ae:	f000 b8a3 	b.w	80107f8 <__retarget_lock_release_recursive>
 80106b2:	bf00      	nop
 80106b4:	200013fb 	.word	0x200013fb

080106b8 <__sinit>:
 80106b8:	b510      	push	{r4, lr}
 80106ba:	4604      	mov	r4, r0
 80106bc:	f7ff fff0 	bl	80106a0 <__sinit_lock_acquire>
 80106c0:	69a3      	ldr	r3, [r4, #24]
 80106c2:	b11b      	cbz	r3, 80106cc <__sinit+0x14>
 80106c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80106c8:	f7ff bff0 	b.w	80106ac <__sinit_lock_release>
 80106cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80106d0:	6523      	str	r3, [r4, #80]	; 0x50
 80106d2:	4b13      	ldr	r3, [pc, #76]	; (8010720 <__sinit+0x68>)
 80106d4:	4a13      	ldr	r2, [pc, #76]	; (8010724 <__sinit+0x6c>)
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80106da:	42a3      	cmp	r3, r4
 80106dc:	bf04      	itt	eq
 80106de:	2301      	moveq	r3, #1
 80106e0:	61a3      	streq	r3, [r4, #24]
 80106e2:	4620      	mov	r0, r4
 80106e4:	f000 f820 	bl	8010728 <__sfp>
 80106e8:	6060      	str	r0, [r4, #4]
 80106ea:	4620      	mov	r0, r4
 80106ec:	f000 f81c 	bl	8010728 <__sfp>
 80106f0:	60a0      	str	r0, [r4, #8]
 80106f2:	4620      	mov	r0, r4
 80106f4:	f000 f818 	bl	8010728 <__sfp>
 80106f8:	2200      	movs	r2, #0
 80106fa:	60e0      	str	r0, [r4, #12]
 80106fc:	2104      	movs	r1, #4
 80106fe:	6860      	ldr	r0, [r4, #4]
 8010700:	f7ff ff82 	bl	8010608 <std>
 8010704:	68a0      	ldr	r0, [r4, #8]
 8010706:	2201      	movs	r2, #1
 8010708:	2109      	movs	r1, #9
 801070a:	f7ff ff7d 	bl	8010608 <std>
 801070e:	68e0      	ldr	r0, [r4, #12]
 8010710:	2202      	movs	r2, #2
 8010712:	2112      	movs	r1, #18
 8010714:	f7ff ff78 	bl	8010608 <std>
 8010718:	2301      	movs	r3, #1
 801071a:	61a3      	str	r3, [r4, #24]
 801071c:	e7d2      	b.n	80106c4 <__sinit+0xc>
 801071e:	bf00      	nop
 8010720:	08012a38 	.word	0x08012a38
 8010724:	08010651 	.word	0x08010651

08010728 <__sfp>:
 8010728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801072a:	4607      	mov	r7, r0
 801072c:	f7ff ffac 	bl	8010688 <__sfp_lock_acquire>
 8010730:	4b1e      	ldr	r3, [pc, #120]	; (80107ac <__sfp+0x84>)
 8010732:	681e      	ldr	r6, [r3, #0]
 8010734:	69b3      	ldr	r3, [r6, #24]
 8010736:	b913      	cbnz	r3, 801073e <__sfp+0x16>
 8010738:	4630      	mov	r0, r6
 801073a:	f7ff ffbd 	bl	80106b8 <__sinit>
 801073e:	3648      	adds	r6, #72	; 0x48
 8010740:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010744:	3b01      	subs	r3, #1
 8010746:	d503      	bpl.n	8010750 <__sfp+0x28>
 8010748:	6833      	ldr	r3, [r6, #0]
 801074a:	b30b      	cbz	r3, 8010790 <__sfp+0x68>
 801074c:	6836      	ldr	r6, [r6, #0]
 801074e:	e7f7      	b.n	8010740 <__sfp+0x18>
 8010750:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010754:	b9d5      	cbnz	r5, 801078c <__sfp+0x64>
 8010756:	4b16      	ldr	r3, [pc, #88]	; (80107b0 <__sfp+0x88>)
 8010758:	60e3      	str	r3, [r4, #12]
 801075a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801075e:	6665      	str	r5, [r4, #100]	; 0x64
 8010760:	f000 f847 	bl	80107f2 <__retarget_lock_init_recursive>
 8010764:	f7ff ff96 	bl	8010694 <__sfp_lock_release>
 8010768:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801076c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010770:	6025      	str	r5, [r4, #0]
 8010772:	61a5      	str	r5, [r4, #24]
 8010774:	2208      	movs	r2, #8
 8010776:	4629      	mov	r1, r5
 8010778:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801077c:	f7ff f936 	bl	800f9ec <memset>
 8010780:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010784:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010788:	4620      	mov	r0, r4
 801078a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801078c:	3468      	adds	r4, #104	; 0x68
 801078e:	e7d9      	b.n	8010744 <__sfp+0x1c>
 8010790:	2104      	movs	r1, #4
 8010792:	4638      	mov	r0, r7
 8010794:	f7ff ff62 	bl	801065c <__sfmoreglue>
 8010798:	4604      	mov	r4, r0
 801079a:	6030      	str	r0, [r6, #0]
 801079c:	2800      	cmp	r0, #0
 801079e:	d1d5      	bne.n	801074c <__sfp+0x24>
 80107a0:	f7ff ff78 	bl	8010694 <__sfp_lock_release>
 80107a4:	230c      	movs	r3, #12
 80107a6:	603b      	str	r3, [r7, #0]
 80107a8:	e7ee      	b.n	8010788 <__sfp+0x60>
 80107aa:	bf00      	nop
 80107ac:	08012a38 	.word	0x08012a38
 80107b0:	ffff0001 	.word	0xffff0001

080107b4 <_fwalk_reent>:
 80107b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80107b8:	4606      	mov	r6, r0
 80107ba:	4688      	mov	r8, r1
 80107bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80107c0:	2700      	movs	r7, #0
 80107c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80107c6:	f1b9 0901 	subs.w	r9, r9, #1
 80107ca:	d505      	bpl.n	80107d8 <_fwalk_reent+0x24>
 80107cc:	6824      	ldr	r4, [r4, #0]
 80107ce:	2c00      	cmp	r4, #0
 80107d0:	d1f7      	bne.n	80107c2 <_fwalk_reent+0xe>
 80107d2:	4638      	mov	r0, r7
 80107d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80107d8:	89ab      	ldrh	r3, [r5, #12]
 80107da:	2b01      	cmp	r3, #1
 80107dc:	d907      	bls.n	80107ee <_fwalk_reent+0x3a>
 80107de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80107e2:	3301      	adds	r3, #1
 80107e4:	d003      	beq.n	80107ee <_fwalk_reent+0x3a>
 80107e6:	4629      	mov	r1, r5
 80107e8:	4630      	mov	r0, r6
 80107ea:	47c0      	blx	r8
 80107ec:	4307      	orrs	r7, r0
 80107ee:	3568      	adds	r5, #104	; 0x68
 80107f0:	e7e9      	b.n	80107c6 <_fwalk_reent+0x12>

080107f2 <__retarget_lock_init_recursive>:
 80107f2:	4770      	bx	lr

080107f4 <__retarget_lock_acquire_recursive>:
 80107f4:	4770      	bx	lr

080107f6 <__retarget_lock_release>:
 80107f6:	4770      	bx	lr

080107f8 <__retarget_lock_release_recursive>:
 80107f8:	4770      	bx	lr

080107fa <__swhatbuf_r>:
 80107fa:	b570      	push	{r4, r5, r6, lr}
 80107fc:	460e      	mov	r6, r1
 80107fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010802:	2900      	cmp	r1, #0
 8010804:	b096      	sub	sp, #88	; 0x58
 8010806:	4614      	mov	r4, r2
 8010808:	461d      	mov	r5, r3
 801080a:	da08      	bge.n	801081e <__swhatbuf_r+0x24>
 801080c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010810:	2200      	movs	r2, #0
 8010812:	602a      	str	r2, [r5, #0]
 8010814:	061a      	lsls	r2, r3, #24
 8010816:	d410      	bmi.n	801083a <__swhatbuf_r+0x40>
 8010818:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801081c:	e00e      	b.n	801083c <__swhatbuf_r+0x42>
 801081e:	466a      	mov	r2, sp
 8010820:	f000 f8c2 	bl	80109a8 <_fstat_r>
 8010824:	2800      	cmp	r0, #0
 8010826:	dbf1      	blt.n	801080c <__swhatbuf_r+0x12>
 8010828:	9a01      	ldr	r2, [sp, #4]
 801082a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801082e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010832:	425a      	negs	r2, r3
 8010834:	415a      	adcs	r2, r3
 8010836:	602a      	str	r2, [r5, #0]
 8010838:	e7ee      	b.n	8010818 <__swhatbuf_r+0x1e>
 801083a:	2340      	movs	r3, #64	; 0x40
 801083c:	2000      	movs	r0, #0
 801083e:	6023      	str	r3, [r4, #0]
 8010840:	b016      	add	sp, #88	; 0x58
 8010842:	bd70      	pop	{r4, r5, r6, pc}

08010844 <__smakebuf_r>:
 8010844:	898b      	ldrh	r3, [r1, #12]
 8010846:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010848:	079d      	lsls	r5, r3, #30
 801084a:	4606      	mov	r6, r0
 801084c:	460c      	mov	r4, r1
 801084e:	d507      	bpl.n	8010860 <__smakebuf_r+0x1c>
 8010850:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010854:	6023      	str	r3, [r4, #0]
 8010856:	6123      	str	r3, [r4, #16]
 8010858:	2301      	movs	r3, #1
 801085a:	6163      	str	r3, [r4, #20]
 801085c:	b002      	add	sp, #8
 801085e:	bd70      	pop	{r4, r5, r6, pc}
 8010860:	ab01      	add	r3, sp, #4
 8010862:	466a      	mov	r2, sp
 8010864:	f7ff ffc9 	bl	80107fa <__swhatbuf_r>
 8010868:	9900      	ldr	r1, [sp, #0]
 801086a:	4605      	mov	r5, r0
 801086c:	4630      	mov	r0, r6
 801086e:	f7ff f931 	bl	800fad4 <_malloc_r>
 8010872:	b948      	cbnz	r0, 8010888 <__smakebuf_r+0x44>
 8010874:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010878:	059a      	lsls	r2, r3, #22
 801087a:	d4ef      	bmi.n	801085c <__smakebuf_r+0x18>
 801087c:	f023 0303 	bic.w	r3, r3, #3
 8010880:	f043 0302 	orr.w	r3, r3, #2
 8010884:	81a3      	strh	r3, [r4, #12]
 8010886:	e7e3      	b.n	8010850 <__smakebuf_r+0xc>
 8010888:	4b0d      	ldr	r3, [pc, #52]	; (80108c0 <__smakebuf_r+0x7c>)
 801088a:	62b3      	str	r3, [r6, #40]	; 0x28
 801088c:	89a3      	ldrh	r3, [r4, #12]
 801088e:	6020      	str	r0, [r4, #0]
 8010890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010894:	81a3      	strh	r3, [r4, #12]
 8010896:	9b00      	ldr	r3, [sp, #0]
 8010898:	6163      	str	r3, [r4, #20]
 801089a:	9b01      	ldr	r3, [sp, #4]
 801089c:	6120      	str	r0, [r4, #16]
 801089e:	b15b      	cbz	r3, 80108b8 <__smakebuf_r+0x74>
 80108a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80108a4:	4630      	mov	r0, r6
 80108a6:	f000 f891 	bl	80109cc <_isatty_r>
 80108aa:	b128      	cbz	r0, 80108b8 <__smakebuf_r+0x74>
 80108ac:	89a3      	ldrh	r3, [r4, #12]
 80108ae:	f023 0303 	bic.w	r3, r3, #3
 80108b2:	f043 0301 	orr.w	r3, r3, #1
 80108b6:	81a3      	strh	r3, [r4, #12]
 80108b8:	89a0      	ldrh	r0, [r4, #12]
 80108ba:	4305      	orrs	r5, r0
 80108bc:	81a5      	strh	r5, [r4, #12]
 80108be:	e7cd      	b.n	801085c <__smakebuf_r+0x18>
 80108c0:	08010651 	.word	0x08010651

080108c4 <__malloc_lock>:
 80108c4:	4801      	ldr	r0, [pc, #4]	; (80108cc <__malloc_lock+0x8>)
 80108c6:	f7ff bf95 	b.w	80107f4 <__retarget_lock_acquire_recursive>
 80108ca:	bf00      	nop
 80108cc:	200013f9 	.word	0x200013f9

080108d0 <__malloc_unlock>:
 80108d0:	4801      	ldr	r0, [pc, #4]	; (80108d8 <__malloc_unlock+0x8>)
 80108d2:	f7ff bf91 	b.w	80107f8 <__retarget_lock_release_recursive>
 80108d6:	bf00      	nop
 80108d8:	200013f9 	.word	0x200013f9

080108dc <__sread>:
 80108dc:	b510      	push	{r4, lr}
 80108de:	460c      	mov	r4, r1
 80108e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108e4:	f000 f894 	bl	8010a10 <_read_r>
 80108e8:	2800      	cmp	r0, #0
 80108ea:	bfab      	itete	ge
 80108ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80108ee:	89a3      	ldrhlt	r3, [r4, #12]
 80108f0:	181b      	addge	r3, r3, r0
 80108f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80108f6:	bfac      	ite	ge
 80108f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80108fa:	81a3      	strhlt	r3, [r4, #12]
 80108fc:	bd10      	pop	{r4, pc}

080108fe <__swrite>:
 80108fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010902:	461f      	mov	r7, r3
 8010904:	898b      	ldrh	r3, [r1, #12]
 8010906:	05db      	lsls	r3, r3, #23
 8010908:	4605      	mov	r5, r0
 801090a:	460c      	mov	r4, r1
 801090c:	4616      	mov	r6, r2
 801090e:	d505      	bpl.n	801091c <__swrite+0x1e>
 8010910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010914:	2302      	movs	r3, #2
 8010916:	2200      	movs	r2, #0
 8010918:	f000 f868 	bl	80109ec <_lseek_r>
 801091c:	89a3      	ldrh	r3, [r4, #12]
 801091e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010922:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010926:	81a3      	strh	r3, [r4, #12]
 8010928:	4632      	mov	r2, r6
 801092a:	463b      	mov	r3, r7
 801092c:	4628      	mov	r0, r5
 801092e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010932:	f000 b817 	b.w	8010964 <_write_r>

08010936 <__sseek>:
 8010936:	b510      	push	{r4, lr}
 8010938:	460c      	mov	r4, r1
 801093a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801093e:	f000 f855 	bl	80109ec <_lseek_r>
 8010942:	1c43      	adds	r3, r0, #1
 8010944:	89a3      	ldrh	r3, [r4, #12]
 8010946:	bf15      	itete	ne
 8010948:	6560      	strne	r0, [r4, #84]	; 0x54
 801094a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801094e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010952:	81a3      	strheq	r3, [r4, #12]
 8010954:	bf18      	it	ne
 8010956:	81a3      	strhne	r3, [r4, #12]
 8010958:	bd10      	pop	{r4, pc}

0801095a <__sclose>:
 801095a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801095e:	f000 b813 	b.w	8010988 <_close_r>
	...

08010964 <_write_r>:
 8010964:	b538      	push	{r3, r4, r5, lr}
 8010966:	4d07      	ldr	r5, [pc, #28]	; (8010984 <_write_r+0x20>)
 8010968:	4604      	mov	r4, r0
 801096a:	4608      	mov	r0, r1
 801096c:	4611      	mov	r1, r2
 801096e:	2200      	movs	r2, #0
 8010970:	602a      	str	r2, [r5, #0]
 8010972:	461a      	mov	r2, r3
 8010974:	f7f0 fc85 	bl	8001282 <_write>
 8010978:	1c43      	adds	r3, r0, #1
 801097a:	d102      	bne.n	8010982 <_write_r+0x1e>
 801097c:	682b      	ldr	r3, [r5, #0]
 801097e:	b103      	cbz	r3, 8010982 <_write_r+0x1e>
 8010980:	6023      	str	r3, [r4, #0]
 8010982:	bd38      	pop	{r3, r4, r5, pc}
 8010984:	200013fc 	.word	0x200013fc

08010988 <_close_r>:
 8010988:	b538      	push	{r3, r4, r5, lr}
 801098a:	4d06      	ldr	r5, [pc, #24]	; (80109a4 <_close_r+0x1c>)
 801098c:	2300      	movs	r3, #0
 801098e:	4604      	mov	r4, r0
 8010990:	4608      	mov	r0, r1
 8010992:	602b      	str	r3, [r5, #0]
 8010994:	f7f0 fc91 	bl	80012ba <_close>
 8010998:	1c43      	adds	r3, r0, #1
 801099a:	d102      	bne.n	80109a2 <_close_r+0x1a>
 801099c:	682b      	ldr	r3, [r5, #0]
 801099e:	b103      	cbz	r3, 80109a2 <_close_r+0x1a>
 80109a0:	6023      	str	r3, [r4, #0]
 80109a2:	bd38      	pop	{r3, r4, r5, pc}
 80109a4:	200013fc 	.word	0x200013fc

080109a8 <_fstat_r>:
 80109a8:	b538      	push	{r3, r4, r5, lr}
 80109aa:	4d07      	ldr	r5, [pc, #28]	; (80109c8 <_fstat_r+0x20>)
 80109ac:	2300      	movs	r3, #0
 80109ae:	4604      	mov	r4, r0
 80109b0:	4608      	mov	r0, r1
 80109b2:	4611      	mov	r1, r2
 80109b4:	602b      	str	r3, [r5, #0]
 80109b6:	f7f0 fc8c 	bl	80012d2 <_fstat>
 80109ba:	1c43      	adds	r3, r0, #1
 80109bc:	d102      	bne.n	80109c4 <_fstat_r+0x1c>
 80109be:	682b      	ldr	r3, [r5, #0]
 80109c0:	b103      	cbz	r3, 80109c4 <_fstat_r+0x1c>
 80109c2:	6023      	str	r3, [r4, #0]
 80109c4:	bd38      	pop	{r3, r4, r5, pc}
 80109c6:	bf00      	nop
 80109c8:	200013fc 	.word	0x200013fc

080109cc <_isatty_r>:
 80109cc:	b538      	push	{r3, r4, r5, lr}
 80109ce:	4d06      	ldr	r5, [pc, #24]	; (80109e8 <_isatty_r+0x1c>)
 80109d0:	2300      	movs	r3, #0
 80109d2:	4604      	mov	r4, r0
 80109d4:	4608      	mov	r0, r1
 80109d6:	602b      	str	r3, [r5, #0]
 80109d8:	f7f0 fc8b 	bl	80012f2 <_isatty>
 80109dc:	1c43      	adds	r3, r0, #1
 80109de:	d102      	bne.n	80109e6 <_isatty_r+0x1a>
 80109e0:	682b      	ldr	r3, [r5, #0]
 80109e2:	b103      	cbz	r3, 80109e6 <_isatty_r+0x1a>
 80109e4:	6023      	str	r3, [r4, #0]
 80109e6:	bd38      	pop	{r3, r4, r5, pc}
 80109e8:	200013fc 	.word	0x200013fc

080109ec <_lseek_r>:
 80109ec:	b538      	push	{r3, r4, r5, lr}
 80109ee:	4d07      	ldr	r5, [pc, #28]	; (8010a0c <_lseek_r+0x20>)
 80109f0:	4604      	mov	r4, r0
 80109f2:	4608      	mov	r0, r1
 80109f4:	4611      	mov	r1, r2
 80109f6:	2200      	movs	r2, #0
 80109f8:	602a      	str	r2, [r5, #0]
 80109fa:	461a      	mov	r2, r3
 80109fc:	f7f0 fc84 	bl	8001308 <_lseek>
 8010a00:	1c43      	adds	r3, r0, #1
 8010a02:	d102      	bne.n	8010a0a <_lseek_r+0x1e>
 8010a04:	682b      	ldr	r3, [r5, #0]
 8010a06:	b103      	cbz	r3, 8010a0a <_lseek_r+0x1e>
 8010a08:	6023      	str	r3, [r4, #0]
 8010a0a:	bd38      	pop	{r3, r4, r5, pc}
 8010a0c:	200013fc 	.word	0x200013fc

08010a10 <_read_r>:
 8010a10:	b538      	push	{r3, r4, r5, lr}
 8010a12:	4d07      	ldr	r5, [pc, #28]	; (8010a30 <_read_r+0x20>)
 8010a14:	4604      	mov	r4, r0
 8010a16:	4608      	mov	r0, r1
 8010a18:	4611      	mov	r1, r2
 8010a1a:	2200      	movs	r2, #0
 8010a1c:	602a      	str	r2, [r5, #0]
 8010a1e:	461a      	mov	r2, r3
 8010a20:	f7f0 fc12 	bl	8001248 <_read>
 8010a24:	1c43      	adds	r3, r0, #1
 8010a26:	d102      	bne.n	8010a2e <_read_r+0x1e>
 8010a28:	682b      	ldr	r3, [r5, #0]
 8010a2a:	b103      	cbz	r3, 8010a2e <_read_r+0x1e>
 8010a2c:	6023      	str	r3, [r4, #0]
 8010a2e:	bd38      	pop	{r3, r4, r5, pc}
 8010a30:	200013fc 	.word	0x200013fc

08010a34 <_init>:
 8010a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a36:	bf00      	nop
 8010a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010a3a:	bc08      	pop	{r3}
 8010a3c:	469e      	mov	lr, r3
 8010a3e:	4770      	bx	lr

08010a40 <_fini>:
 8010a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a42:	bf00      	nop
 8010a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010a46:	bc08      	pop	{r3}
 8010a48:	469e      	mov	lr, r3
 8010a4a:	4770      	bx	lr
